{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Feasibility of learning\n",
    "\n",
    "Consider the basic problem in supervised learning:\n",
    "\n",
    "The learner gets to see a finite sample $\\mathcal{D} = \\{(\\bar{x}_1,y_1,\\ldots,\\bar{x}_n,y_n)\\}$\n",
    "\n",
    "from an unknown target function $f:\\mathcal{X}\\rightarrow\\mathcal{Y}$.\n",
    "\n",
    "You want to predict what $f$ would do on a new instance $\\bar{x} \\in \\mathcal{X}$ which is not in the sample.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Feasibility of learning\n",
    "\n",
    "Let  $\\mathcal{X}=\\mathbb{Z}$ and $\\mathcal{Y} = \\{0,1\\}$.\n",
    "\n",
    "Suppose $\\mathcal{D} = \\{(1,0),(2,0),(3,0)\\}$.\n",
    "\n",
    "That means $f(1)=f(2)=f(3)=0$.\n",
    "\n",
    "Consider $f(4)$. \n",
    "\n",
    "What should we guess that it is?  \n",
    "\n",
    "Why?  How do we know that $f$ is not a very complicated rule?\n",
    "\n",
    "If $f$ can really be anything then there is no reason to have any belief about the values of $f$ outside $\\mathcal{D}$."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### A different question\n",
    "\n",
    "Rather than tackling this tough problem head on we will try to answer an easier one.\n",
    "\n",
    "* Given a function $h:\\mathcal{X} \\rightarrow \\mathcal{Y}$, how similar is $h$ to $f$?\n",
    "\n",
    "To make *this* question make sense, we assume that there is some probability distribution $P$ over $\\mathcal{X}$ from which the examples in $\\mathcal{D}$ are drawn. \n",
    "\n",
    "This corresponds to real life:  There seems to be some real probability distribution that determines the features of the people you meet, the cars you see, the trees in the forest, etc.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### The distribution on $\\mathcal{X}$\n",
    "\n",
    "Suppose that $\\mathcal{X}$ are the features of frogs: length, weight, tongue length, color\n",
    "\n",
    "All of these features could take on any value in principle.\n",
    "\n",
    "But which ones are you likely to actually see?\n",
    "\n",
    "Those are the ones in $\\mathcal{D}$. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![img](https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fi.ytimg.com%2Fvi%2FkT3sktb6U0E%2Fhqdefault.jpg&f=1&nofb=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### The distribution on $\\mathcal{X}$\n",
    "\n",
    "In our cat classification exercise we imagined that $\\mathcal{X}$ is all 256x256 pixel images.\n",
    "\n",
    "Which of those are you likely to actually see on the internet, or as a result of taking a photograph?\n",
    "\n",
    "\n",
    "$\\mathcal{D}$ gives us a sample showing which $\\bar{x}\\in \\mathcal{X}$ are likely to be encountered.  \n",
    "\n",
    "This is what $P$ is.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### How good is a hypothesis $h$?\n",
    "\n",
    "The measure of how well $h:\\mathcal{X} \\rightarrow \\mathcal{Y}$ approximates $f$ is:\n",
    "\n",
    "$$E_{out}(h) = P[h(\\bar{x}) \\neq f(\\bar{x})]$$\n",
    "\n",
    "where $P$ is the probability distribution over $\\mathcal{X}$ that generates examples (i.e. $\\mathcal{D}$).\n",
    "\n",
    "In other words if we pick some $\\bar{x} \\in \\mathcal{X}$ at random (according to the distribution $P$) how likely is it that $f$ and $h$ agree on this instance?\n",
    "\n",
    "This is **out of sample error** and it is the ultimate measure of the quality of a hypothesis. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### How good a hypothesis is $h$?\n",
    "\n",
    "Unfortunately, it is generally impossible to know $E_{out}(h)$, because we don't know $P$ or $f$.\n",
    "\n",
    "However $\\mathcal{D}$ gives us data about both $f$ and $P$.\n",
    "\n",
    "We assume that the $\\bar{x}$ in $\\mathcal{D}$ were drawn independently according to $P$.\n",
    "\n",
    "And of course in supervised learning $\\mathcal{D}$ also tell us $y = f(\\bar{x})$.\n",
    "\n",
    "The bigger $\\mathcal{D}$ is, the more we know about $f$ and $P$.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### In sample error\n",
    "\n",
    "\n",
    "We use $\\mathcal{D}$ to compute the **in sample error**:\n",
    "\n",
    "$$E_{in}(h) = \\frac{1}{N}\\sum_{n=1}^N [\\![ h(\\bar{x}_n) \\neq f(\\bar{x}_n)]\\!]$$\n",
    "\n",
    "This is just the proportion of $\\mathcal{D}$ for which $h$ says the same thing as $f$.\n",
    "\n",
    "For example if $\\mathcal{D} = \\{(a,0),(b,1),(c,0)\\}$ and $h(a)=h(b)=h(c)=0$, then\n",
    "\n",
    "$$E_{in}(h) = \\frac{1}{3}(0+1+0) = \\frac{1}{3}$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### $E_{in} \\approx E_{out}$?\n",
    "\n",
    "So, to summarize we know $E_{in}(h)$ but we want to know $E_{out}(h)$.  \n",
    "\n",
    "But measuring $E_{out}(h)$ is generally impossible. \n",
    "\n",
    "But because of probability theory $E_{in}(h)$ and $E_{out}(h)$ must be pretty close.\n",
    "\n",
    "Why is this true?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### You have to urn it\n",
    "\n",
    "Suppose that every $\\bar{x} \\in \\mathcal{X}$ is a ball in an urn.\n",
    "\n",
    "We color the ball green if $h(\\bar{x}) = f(\\bar{x})$ and red if $h(\\bar{x}) \\neq f(\\bar{x})$\n",
    "\n",
    "$E_{out}(h)$ is the probability of pulling a red ball out of the urn. \n",
    "\n",
    "$E_{in}(h)$ is the proportion of red balls you see if you actually pull $N=|\\mathcal{D}|$ of them out and check what you get. \n",
    "\n",
    "Arguably the **meaning** of $E_{out}$ is just the limit of $E_{in}$ as $N \\rightarrow \\infty$.\n",
    "\n",
    "So for big $N$ they should be close together.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "E_in = 0.10075\n",
      "E_out = 0.1\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "N=100000\n",
    "E_out = 0.1\n",
    "red, green = 1,0\n",
    "D = np.random.choice([red,green],N,p=[E_out,1-E_out])\n",
    "E_in = np.sum(D)/N\n",
    "print(\"E_in = {}\".format(E_in))\n",
    "print(\"E_out = {}\".format(E_out))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Shoulda woulda coulda\n",
    "\n",
    "We said that $E_{in}(h)$ and $E_{out}(h)$ \"should\" be close in value, and we can see from our little program (above) that they actually are.\n",
    "\n",
    "They **might** differ by a lot if you are super unluckly.\n",
    "\n",
    "But it is very unlikely that you will be extremely unlucky.\n",
    "\n",
    "$E_{in}(h)$ and $E_{out}(h)$ are **probably approximately equal**."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Probably approximately equal\n",
    "\n",
    "The Hoeffding bound is a mathematical formula that rigorously defines \"probably approximately equal\".\n",
    "\n",
    "It says that, for any $\\epsilon > 0$,\n",
    "\n",
    "$$P[|E_{in}(h)-E_{out}(h)| > \\epsilon] \\leq 2e^{-2\\epsilon^2N}$$\n",
    "\n",
    "In words:  The probability that $E_{in}(h)$ and $E_{out}(h)$ differ by more than a tiny amount $\\epsilon$ decreases exponentially as $N \\rightarrow \\infty$.\n",
    "\n",
    "But for small $\\epsilon$, the term $\\epsilon^2$ will be **really** small and slow down the convergence."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "for N in [10,100,1000,10000]:\n",
    "\n",
    "    epsilon = np.logspace(0,-5)\n",
    "    delta = 2*np.exp(-2*epsilon**2*N)\n",
    "    plt.plot(epsilon,delta,label=\"N={}\".format(N))\n",
    "plt.xlabel(r\"$\\epsilon$\")\n",
    "plt.ylabel(r\"$\\delta$\")\n",
    "plt.legend()\n",
    "x1,x2,y1,y2 = plt.axis()\n",
    "\n",
    "plt.axis((x1,x2,y1,1))\n",
    "plt.title(r\"Confidence as a function of $\\epsilon$\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "for epsilon in [0.1,0.05,0.025,0.01,0.001]:\n",
    "    N = np.logspace(4,12,base=2)\n",
    "    delta = 2*np.exp(-2*epsilon**2*N)\n",
    "    plt.plot(N,delta,label=r\"$\\epsilon= {}$\".format(epsilon))\n",
    "plt.ylabel(r\"$\\delta$\")\n",
    "plt.xlabel(r\"$N$\")\n",
    "plt.legend()\n",
    "plt.title(r\"Confidence as a function of $N$ \")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Hoeffding is \"distribution free\"\n",
    "\n",
    "The amazing thing about the Hoeffding inequality is that the right hand side does not depend on $P$.\n",
    "\n",
    "$$P[|E_{in}(h)-E_{out}(h)| > \\epsilon] \\leq 2e^{-2\\epsilon^2N}$$\n",
    "\n",
    "It is true for *all* $P$, even the worst possible $P$.\n",
    "\n",
    "For that reason, the bound is usally *very* conservative."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Difference exceeds epsilon 0.19% of time\n",
      "Hoeffding bound: at most 39.58% of time\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "N = 100\n",
    "E_out = 0.1\n",
    "red, green = 1,0\n",
    "\n",
    "results = []\n",
    "numtries = 10000\n",
    "for tries in range(numtries):\n",
    "    D = np.random.choice([red,green],N,p=[E_out,1-E_out])\n",
    "    E_in = np.sum(D)/N\n",
    "    results.append(E_in)\n",
    "\n",
    "E_ins = np.array(results)\n",
    "epsilon = 0.09\n",
    "exceeded = np.abs(E_ins-E_out)>epsilon\n",
    "print(\"Difference exceeds epsilon {}% of time\".format(100*np.mean(exceeded)))\n",
    "print(\"Hoeffding bound: at most {0:.2f}% of time\".format(200*np.exp(-2*epsilon**2*N)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### So what have we learned?\n",
    "\n",
    "We have learned that in the special case $\\mathcal{H} = \\{h\\}$\n",
    "\n",
    "if $N = \\mathcal{D}$ is large\n",
    "\n",
    "and\n",
    "\n",
    "if $E_{in}(h)$ is small\n",
    "\n",
    "Then $E_{out}(h)$ is *probably* also small, \n",
    "\n",
    "and therefore when we see a new instance $\\bar{x} \\in \\mathcal{X}$ it is likely that\n",
    "\n",
    "$h(\\bar{x}) = f(\\bar{x})$.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### So what have we learned?\n",
    "\n",
    "But if $E_{in}(h)$ is not small then there's really not much we can say.\n",
    "\n",
    "And if $\\mathcal{H}$ only has one hypothesis in it, we would really be pretty lucky if it were any good.\n",
    "\n",
    "What we need is some guarantee that \n",
    "\n",
    "if $\\mathcal{H}$ is big\n",
    "\n",
    "and we take the $h \\in \\mathcal{H}$ for which $E_{in}(h)$ is least \n",
    "\n",
    "then $E_{in}(h)$ is *still* close to $E_{out}(h)$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Too much!\n",
    "\n",
    "But that's too much to ask for.  \n",
    "\n",
    "Because if $\\mathcal{H}$ is big enough then any function is in there.\n",
    "\n",
    "So consider the function $h$ that behaves just like $f$ on $\\mathcal{D}$ but just the opposite of $f$ for examples not in $\\mathcal{D}$.\n",
    "\n",
    "Then $E_{in}(h) = 0$ but $E_{out}(h)=1$!\n",
    "\n",
    "In other words they are as far apart as possible.\n",
    "\n",
    "This tells us that we must consider only a special kind of $\\mathcal{H}$ (described in Ch 2).\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### $\\mathcal{H} = \\{h_1,h_2,\\ldots,h_m\\}$\n",
    "\n",
    "Consider a hypothesis class $\\mathcal{H}$ with $m$ hypotheses.\n",
    "\n",
    "Each $h_i$ has an out of sample error rate $E_{out}(h_i)$.\n",
    "\n",
    "This is like an urn of red and green marbles with a certain percentage of reds.\n",
    "\n",
    "Each $h_i$ also has an in sample error rate $E_{in}(h_i)$.\n",
    "\n",
    "This is like a sample of 10 marbles from its urn, which gives an estimate of the true percentage of reds.\n",
    "\n",
    "If $\\mathcal{H}$ is big compared to $\\mathcal{D}$, then through luck one of the $h_i$ may have $E_{in}(h_i) \\not \\approx E_{out}(h_i)$."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Luck vs skill  $(E_{in} vs E_{out}?)$\n",
    "\n",
    "Entities that are exceptional are exceptional for two reasons: luck and skill.\n",
    "\n",
    "Skill persists but luck does not.  \n",
    "\n",
    "Consider 100 people, each of whom flip a fair coin ten times.\n",
    "\n",
    "We simulate this below.  Each column is a \"person\".\n",
    "\n",
    "The row corresponding to a person is their flipping record.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.5, 0.6, 0.5, 0.2, 0.8, 0.6, 0.7, 0.7, 0.7, 0.5, 0.8, 0.3, 0.5,\n",
       "       0.6, 0.7, 0.6, 0.7, 0.4, 0.4, 0.4, 0.4, 0.4, 0.6, 0.4, 0.6, 0.6,\n",
       "       0.5, 0.4, 0.8, 0.4, 0.6, 0.7, 0.5, 0.3, 0.6, 0.5, 0.2, 0.2, 0.4,\n",
       "       0.7, 0.6, 0.4, 0.6, 0.4, 0.6, 0.4, 0.4, 0. , 0.4, 0.4, 0.5, 0.2,\n",
       "       0.6, 0.7, 0.6, 0.7, 0.5, 0.4, 0.6, 0.6, 0.5, 0.6, 0.2, 0.3, 0.7,\n",
       "       0.6, 0.7, 0.7, 0.4, 0.4, 0.5, 0.8, 0.6, 0.5, 0.4, 0.5, 0.6, 0.4,\n",
       "       0.4, 0.6, 0.1, 0.7, 0.8, 0.6, 0.7, 0.5, 0.7, 0.5, 0.4, 0.4, 0.7,\n",
       "       0.7, 0.3, 0.6, 0.4, 0.5, 0.3, 0.5, 0.4, 0.4])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "## |D|=10, |H|=100\n",
    "flips = np.random.randint(0,2,100*10).reshape(10,100)\n",
    "\n",
    "mu = np.mean(flips,axis=0)\n",
    "mu"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(4, 0.8)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "best_person = np.argmax(mu)\n",
    "best_person, mu[best_person]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Wow, what a performance!\n",
    "\n",
    "Someone has a real tendency to flip heads.\n",
    "\n",
    "Or do they?\n",
    "\n",
    "Do you think their luck will hold up in ten more flips?\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "flips = np.random.randint(0,2,100*10).reshape(10,100)\n",
    "mu = np.mean(flips,axis=0)\n",
    "mu[best_person]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Uh oh, must have been the pressure?\n",
    "\n",
    "Obviously no one is really any better than anyone else at flipping coins.\n",
    "\n",
    "The best person's performance was all luck and no skill.\n",
    "\n",
    "When we tested the person on fresh data the luck vanished and only the skill remained.\n",
    "\n",
    "With only skill and no luck to rely on, performance decreased.\n",
    "\n",
    "This is called **regression to the mean**.\n",
    "\n",
    "We have to be very careful about this in ML when evaluating model performance."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Hoeffding?\n",
    "\n",
    "If we pick the best $g \\in \\mathcal{H}$ with respect to $E_{in}$ then the Hoeffding bound does not apply.  \n",
    "\n",
    "To show this you could check the percentage of time that the best of 1000 coin flippers (in 100 flips) has a sample average different from 0.5 by more than $\\epsilon = 0.1$.\n",
    "\n",
    "We compute the Hoeffding bound below. \n",
    "\n",
    "After that we perform an experiment to see how often epsilon is actually exceeded by the best flipper."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "If Hoeffding holds for the best flipper,\n",
      " then the difference between E_in and E_out \n",
      " will exceed epsilon at most 27.07% of the time\n"
     ]
    }
   ],
   "source": [
    "answer=2*np.exp(-2*0.1**2*100)\n",
    "print(\"If Hoeffding holds for the best flipper,\\n then the difference between E_in and E_out \\n will exceed epsilon at most {:0.2f}% of the time\".format(100*answer))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The difference exceeded epsilon 100.00% of the time\n"
     ]
    }
   ],
   "source": [
    "num_experiments = 10**4\n",
    "epsilon=0.1\n",
    "epsilon_exceeded = 0\n",
    "for i in range(num_experiments):\n",
    "    flips = np.random.randint(0,2,100*1000).reshape(100,1000)\n",
    "    mu = np.mean(flips,axis=0)\n",
    "    best_person = np.argmax(mu)\n",
    "    best_record = np.max(mu)\n",
    "    diff = np.abs(best_record-0.5)\n",
    "    if diff > epsilon:\n",
    "        epsilon_exceeded +=1\n",
    "answer = epsilon_exceeded/num_experiments                \n",
    "print(\"The difference exceeded epsilon {:0.2f}% of the time\".format(100*answer))        \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### A crude bound\n",
    "\n",
    "We **can** come up with a Hoeffding like bound assuming that $\\mathcal{H}$ contains $M$ hypotheses. \n",
    "\n",
    "Because the probability that the **best** $g$ has $E_{in}$ within $\\epsilon$ of $E_{out}$\n",
    "\n",
    "is at most the probability that **some** $h$ has $E_{in}$ within $\\epsilon$ of $E_{out}$.\n",
    "\n",
    "$$P[|E_{in}(g)-E_{out}(g)| > \\epsilon] \\leq \\sum_{h \\in \\mathcal{H}} P[|E_{in}(h)-E_{out}(h)| > \\epsilon]$$\n",
    "\n",
    "But Hoeffding **does** apply to each summand in RHS because each $h$ was picked before $\\mathcal{D}$.  Thus\n",
    "\n",
    "$$P[|E_{in}(g)-E_{out}(g)|>\\epsilon] \\leq 2Me^{-2\\epsilon^2N}$$\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### But are we happy with that?\n",
    "\n",
    "We are not very happy with the bound \n",
    "\n",
    "$$P[|E_{in}(g)-E_{out}(g)|>\\epsilon] \\leq 2Me^{-2\\epsilon^2N}$$\n",
    "\n",
    "because $\\mathcal{H}$ is often very large, or even infinite.\n",
    "\n",
    "The perceptron, for example, has an infinite hypothesis class.\n",
    "\n",
    "This bound was improved in the 70's by Vapnik and Chervonenkis to apply\n",
    "\n",
    "to some infinite $\\mathcal{H}$.\n",
    "\n",
    "The ones with finite VC dimension (see Ch 2).\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
