{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Regularization\n",
    "\n",
    "In some circumstances we might want to try a complex hypothesis on a small dataset.\n",
    "\n",
    "In such a scenario bias will be low, but variance will be high.\n",
    "\n",
    "In other words we will overfit.\n",
    "\n",
    "But there are methods for avoiding overfitting by restricting the way in which $\\mathcal{H}$ is explored.\n",
    "\n",
    "If we explore $\\mathcal{H}$ very conservatively maybe we can keep variance down while also keeping bias low.\n",
    "\n",
    "---\n",
    "\n",
    "### Early stopping\n",
    "\n",
    "One easy way to reduce variance is to explore less of $\\mathcal{H}$ during gradient descent or stochastic gradient descent.\n",
    "\n",
    "This method is called *early stopping*.\n",
    "\n",
    "We give an example below.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 200,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(506, 13)"
      ]
     },
     "execution_count": 200,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.datasets import load_boston\n",
    "X, y = load_boston(return_X_y=True)\n",
    "X.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 201,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "np.random.seed(389247)\n",
    "rs = np.random.randint(100000)\n",
    "X_train,X_test,y_train,y_test = train_test_split(X,y,random_state=rs)\n",
    "\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "scaler = MinMaxScaler()\n",
    "scaler.fit(X_train)\n",
    "X_train = scaler.transform(X_train)\n",
    "X_test = scaler.transform(X_test)\n",
    "X_train = np.c_[np.ones(X_train.shape[0]),X_train]\n",
    "X_test = np.c_[np.ones(X_test.shape[0]),X_test]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 202,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "w (gradient descent) = [ 2.78883045e+01 -1.21223691e+01  3.81486865e+00  9.05613713e-01\n",
      "  2.53526154e+00 -7.77845602e+00  1.61639721e+01 -2.20445616e-02\n",
      " -1.46602136e+01  7.69220419e+00 -6.51947267e+00 -8.16306126e+00\n",
      "  3.37987109e+00 -2.05233289e+01]\n",
      "R2 (gradient descent)= 0.8216680773546365\n"
     ]
    }
   ],
   "source": [
    "import mystuff as ms\n",
    "from sklearn.metrics import r2_score as R2\n",
    "import numpy as np\n",
    "\n",
    "def mse(w,X,y):\n",
    "    return 1/X.shape[0]*(w.T.dot(X.T).dot(X).dot(w)-2*w.T.dot(X.T).dot(y)+y.dot(y))\n",
    "\n",
    "def mse_gradient(w,X,y):\n",
    "    return 2/X.shape[0]*(X.T.dot(X).dot(w)-X.T.dot(y))\n",
    "\n",
    "w_init = np.random.randn(X_train.shape[1])\n",
    "\n",
    "wgd,path = ms.grad_descent(w_init,X_train,y_train,mse_gradient,eta=0.07,max_iter=10000)\n",
    "\n",
    "y_test_hat = X_test.dot(wgd)\n",
    "\n",
    "print(\"w (gradient descent) = {}\".format(wgd))\n",
    "print(\"R2 (gradient descent)= {}\".format(R2(y_test,y_test_hat)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 203,
   "metadata": {},
   "outputs": [],
   "source": [
    "test_scores = [mse(w,X_test,y_test) for w in path]\n",
    "train_scores = [mse(w,X_train,y_train) for w in path]\n",
    "\n",
    "R2test_scores = [R2(X_test.dot(w),y_test) for w in path]\n",
    "R2train_scores = [R2(X_train.dot(w),y_train) for w in path]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 204,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "dom = range(len(test_scores))\n",
    "\n",
    "plt.ylim(min(test_scores)-0.5,min(test_scores)+0.5)\n",
    "plt.plot(dom,test_scores,label=\"test error (MSE)\")\n",
    "\n",
    "#plt.plot(dom,train_scores,label=\"train error\")\n",
    "plt.legend()\n",
    "plt.title(\"Test error at each time step\")\n",
    "plt.ylabel(\"MSE\")\n",
    "plt.xlabel(\"Iteration\")\n",
    "plt.show()\n",
    "\n",
    "\n",
    "plt.ylim(max(R2test_scores)-0.5,max(R2test_scores)+0.5)\n",
    "plt.plot(dom,R2test_scores,label=\"test error (R2)\")\n",
    "\n",
    "#plt.plot(dom,train_scores,label=\"train error\")\n",
    "plt.legend()\n",
    "plt.title(\"Test error at each time step\")\n",
    "plt.ylabel(\"MSE\")\n",
    "plt.xlabel(\"Iteration\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 205,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2162\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "20.590810995545183"
      ]
     },
     "execution_count": 205,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "best_stop = np.argmin(test_scores)\n",
    "best_w = path[best_stop]\n",
    "print(best_stop)\n",
    "mse(best_w,X_test,y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 206,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "21.01916719220272"
      ]
     },
     "execution_count": 206,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "last_w = path[-1]\n",
    "mse(last_w,X_test,y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Best stopping time\n",
    "\n",
    "The results above show that test error is minimized when we reach the 2162th iteration of gradient descent (with these parameters).\n",
    "\n",
    "Note that this only applies to MSE in this example.\n",
    "\n",
    "We could easily automate the selection of this best parameter (in fact we kind of did).\n",
    "\n",
    "Also note that we \"snooped\" on the test set when we found the best $g \\in \\mathcal{H}$.  \n",
    "\n",
    "Now if we want to predict the true $E_{out}(g)$ we should use a reserve set of data (the validation set)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
