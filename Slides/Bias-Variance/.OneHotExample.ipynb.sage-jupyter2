{"backend_state":"running","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":159334400},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.5"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1585236088276,"exec_count":1,"id":"a1edd2","input":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndf = pd.read_csv(\"abalone.data\")\ndf.head()","kernel":"python3","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Sex</th>\n      <th>Length</th>\n      <th>Diameter</th>\n      <th>Height</th>\n      <th>WWeight</th>\n      <th>SWeight</th>\n      <th>VWeight</th>\n      <th>ShWeight</th>\n      <th>Rings</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>M</td>\n      <td>0.455</td>\n      <td>0.365</td>\n      <td>0.095</td>\n      <td>0.5140</td>\n      <td>0.2245</td>\n      <td>0.1010</td>\n      <td>0.150</td>\n      <td>15</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>M</td>\n      <td>0.350</td>\n      <td>0.265</td>\n      <td>0.090</td>\n      <td>0.2255</td>\n      <td>0.0995</td>\n      <td>0.0485</td>\n      <td>0.070</td>\n      <td>7</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>F</td>\n      <td>0.530</td>\n      <td>0.420</td>\n      <td>0.135</td>\n      <td>0.6770</td>\n      <td>0.2565</td>\n      <td>0.1415</td>\n      <td>0.210</td>\n      <td>9</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>M</td>\n      <td>0.440</td>\n      <td>0.365</td>\n      <td>0.125</td>\n      <td>0.5160</td>\n      <td>0.2155</td>\n      <td>0.1140</td>\n      <td>0.155</td>\n      <td>10</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>I</td>\n      <td>0.330</td>\n      <td>0.255</td>\n      <td>0.080</td>\n      <td>0.2050</td>\n      <td>0.0895</td>\n      <td>0.0395</td>\n      <td>0.055</td>\n      <td>7</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"  Sex  Length  Diameter  Height  WWeight  SWeight  VWeight  ShWeight  Rings\n0   M   0.455     0.365   0.095   0.5140   0.2245   0.1010     0.150     15\n1   M   0.350     0.265   0.090   0.2255   0.0995   0.0485     0.070      7\n2   F   0.530     0.420   0.135   0.6770   0.2565   0.1415     0.210      9\n3   M   0.440     0.365   0.125   0.5160   0.2155   0.1140     0.155     10\n4   I   0.330     0.255   0.080   0.2050   0.0895   0.0395     0.055      7"},"exec_count":1}},"pos":0,"start":1585236087595,"state":"done","type":"cell"}
{"cell_type":"code","end":1585236088348,"exec_count":2,"id":"435d3f","input":"df.describe()","kernel":"python3","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Length</th>\n      <th>Diameter</th>\n      <th>Height</th>\n      <th>WWeight</th>\n      <th>SWeight</th>\n      <th>VWeight</th>\n      <th>ShWeight</th>\n      <th>Rings</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>4177.000000</td>\n      <td>4177.000000</td>\n      <td>4177.000000</td>\n      <td>4177.000000</td>\n      <td>4177.000000</td>\n      <td>4177.000000</td>\n      <td>4177.000000</td>\n      <td>4177.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>0.523992</td>\n      <td>0.407881</td>\n      <td>0.139516</td>\n      <td>0.828742</td>\n      <td>0.359367</td>\n      <td>0.180594</td>\n      <td>0.238831</td>\n      <td>9.933684</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>0.120093</td>\n      <td>0.099240</td>\n      <td>0.041827</td>\n      <td>0.490389</td>\n      <td>0.221963</td>\n      <td>0.109614</td>\n      <td>0.139203</td>\n      <td>3.224169</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>0.075000</td>\n      <td>0.055000</td>\n      <td>0.000000</td>\n      <td>0.002000</td>\n      <td>0.001000</td>\n      <td>0.000500</td>\n      <td>0.001500</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>0.450000</td>\n      <td>0.350000</td>\n      <td>0.115000</td>\n      <td>0.441500</td>\n      <td>0.186000</td>\n      <td>0.093500</td>\n      <td>0.130000</td>\n      <td>8.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>0.545000</td>\n      <td>0.425000</td>\n      <td>0.140000</td>\n      <td>0.799500</td>\n      <td>0.336000</td>\n      <td>0.171000</td>\n      <td>0.234000</td>\n      <td>9.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>0.615000</td>\n      <td>0.480000</td>\n      <td>0.165000</td>\n      <td>1.153000</td>\n      <td>0.502000</td>\n      <td>0.253000</td>\n      <td>0.329000</td>\n      <td>11.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>0.815000</td>\n      <td>0.650000</td>\n      <td>1.130000</td>\n      <td>2.825500</td>\n      <td>1.488000</td>\n      <td>0.760000</td>\n      <td>1.005000</td>\n      <td>29.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"            Length     Diameter       Height      WWeight      SWeight  \\\ncount  4177.000000  4177.000000  4177.000000  4177.000000  4177.000000   \nmean      0.523992     0.407881     0.139516     0.828742     0.359367   \nstd       0.120093     0.099240     0.041827     0.490389     0.221963   \nmin       0.075000     0.055000     0.000000     0.002000     0.001000   \n25%       0.450000     0.350000     0.115000     0.441500     0.186000   \n50%       0.545000     0.425000     0.140000     0.799500     0.336000   \n75%       0.615000     0.480000     0.165000     1.153000     0.502000   \nmax       0.815000     0.650000     1.130000     2.825500     1.488000   \n\n           VWeight     ShWeight        Rings  \ncount  4177.000000  4177.000000  4177.000000  \nmean      0.180594     0.238831     9.933684  \nstd       0.109614     0.139203     3.224169  \nmin       0.000500     0.001500     1.000000  \n25%       0.093500     0.130000     8.000000  \n50%       0.171000     0.234000     9.000000  \n75%       0.253000     0.329000    11.000000  \nmax       0.760000     1.005000    29.000000  "},"exec_count":2}},"pos":1,"start":1585236088282,"state":"done","type":"cell"}
{"cell_type":"code","end":1585236089343,"exec_count":3,"id":"a195cb","input":"plt.scatter(df[df.columns[7]],df[df.columns[-1]])\nplt.show()","kernel":"python3","output":{"0":{"data":{"image/png":"9dff8fa1ecc16312bb9de859a2e9b843a8833b70","text/plain":"<Figure size 864x504 with 1 Axes>"},"metadata":{"image/png":{"height":411,"width":703},"needs_background":"light"}}},"pos":2,"start":1585236088506,"state":"done","type":"cell"}
{"cell_type":"code","end":1585236089393,"exec_count":4,"id":"d6f4fd","input":"df_num = df.replace(\"M\",0).replace(\"F\",1).replace(\"I\",2)\ndf_num.head()","kernel":"python3","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Sex</th>\n      <th>Length</th>\n      <th>Diameter</th>\n      <th>Height</th>\n      <th>WWeight</th>\n      <th>SWeight</th>\n      <th>VWeight</th>\n      <th>ShWeight</th>\n      <th>Rings</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>0.455</td>\n      <td>0.365</td>\n      <td>0.095</td>\n      <td>0.5140</td>\n      <td>0.2245</td>\n      <td>0.1010</td>\n      <td>0.150</td>\n      <td>15</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0</td>\n      <td>0.350</td>\n      <td>0.265</td>\n      <td>0.090</td>\n      <td>0.2255</td>\n      <td>0.0995</td>\n      <td>0.0485</td>\n      <td>0.070</td>\n      <td>7</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>0.530</td>\n      <td>0.420</td>\n      <td>0.135</td>\n      <td>0.6770</td>\n      <td>0.2565</td>\n      <td>0.1415</td>\n      <td>0.210</td>\n      <td>9</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0</td>\n      <td>0.440</td>\n      <td>0.365</td>\n      <td>0.125</td>\n      <td>0.5160</td>\n      <td>0.2155</td>\n      <td>0.1140</td>\n      <td>0.155</td>\n      <td>10</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2</td>\n      <td>0.330</td>\n      <td>0.255</td>\n      <td>0.080</td>\n      <td>0.2050</td>\n      <td>0.0895</td>\n      <td>0.0395</td>\n      <td>0.055</td>\n      <td>7</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"   Sex  Length  Diameter  Height  WWeight  SWeight  VWeight  ShWeight  Rings\n0    0   0.455     0.365   0.095   0.5140   0.2245   0.1010     0.150     15\n1    0   0.350     0.265   0.090   0.2255   0.0995   0.0485     0.070      7\n2    1   0.530     0.420   0.135   0.6770   0.2565   0.1415     0.210      9\n3    0   0.440     0.365   0.125   0.5160   0.2155   0.1140     0.155     10\n4    2   0.330     0.255   0.080   0.2050   0.0895   0.0395     0.055      7"},"exec_count":4}},"pos":3,"start":1585236089355,"state":"done","type":"cell"}
{"cell_type":"code","end":1585236089423,"exec_count":5,"id":"67df36","input":"def df2np(df):\n    \"\"\"Convert pandas dataframe to numpy X,y\"\"\"\n    X = df.values[:,:-1]\n    y = df.values[:,-1]\n    return X,y\n\nX,y = df2np(df_num)","kernel":"python3","pos":4,"start":1585236089417,"state":"done","type":"cell"}
{"cell_type":"code","end":1585236090324,"exec_count":6,"id":"b48187","input":"from sklearn.preprocessing import MinMaxScaler\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\n\nX_train,X_test,y_train,y_test = train_test_split(X,y)\n\nscaler = MinMaxScaler()\nscaler.fit(X_train)\nX_train = scaler.transform(X_train)\nX_test = scaler.transform(X_test)\nX_train.shape,X_test.shape","kernel":"python3","output":{"0":{"data":{"text/plain":"((3132, 8), (1045, 8))"},"exec_count":6}},"pos":5,"start":1585236089430,"state":"done","type":"cell"}
{"cell_type":"code","end":1585236090348,"exec_count":7,"id":"4e6048","input":"from sklearn.metrics import r2_score\n\nw = np.linalg.pinv(X_train).dot(y_train)\nyhat = X_test.dot(w)\n\nscore_train = r2_score(X_train.dot(w),y_train)\nscore_test = r2_score(yhat,y_test)\n\nscore_train,score_test","kernel":"python3","output":{"0":{"data":{"text/plain":"(0.24666712155603132, 0.22287784973863223)"},"exec_count":7}},"pos":6,"start":1585236090333,"state":"done","type":"cell"}
{"cell_type":"code","end":1585236090496,"exec_count":8,"id":"d200a2","input":"w","kernel":"python3","output":{"0":{"data":{"text/plain":"array([ -0.12899735,   6.41997939,   9.16816457,  18.0835361 ,\n        22.39430372, -31.5448081 ,  -8.77104925,   6.18531952])"},"exec_count":8}},"pos":7,"start":1585236090396,"state":"done","type":"cell"}
{"cell_type":"code","end":1585236090692,"exec_count":9,"id":"4bffee","input":"from sklearn.preprocessing import PolynomialFeatures\npoly2 = PolynomialFeatures(2)\nX_train_poly = poly2.fit_transform(X_train)\nX_test_poly = poly2.fit_transform(X_test)\n\n\nw = np.linalg.pinv(X_train_poly).dot(y_train)\nyhat = X_test_poly.dot(w)\n\npoly_score_train = r2_score(X_train_poly.dot(w),y_train)\npoly_score_test = r2_score(yhat,y_test)\n\npoly_score_train,poly_score_test","kernel":"python3","output":{"0":{"data":{"text/plain":"(0.28469212291296586, 0.25480359781116435)"},"exec_count":9}},"pos":8,"start":1585236090505,"state":"done","type":"cell"}
{"cell_type":"code","end":1585236090809,"exec_count":10,"id":"c32e67","input":"df = pd.read_csv(\"abalone.data\")\n\ndf = pd.concat([pd.get_dummies(df['Sex'], prefix='Sex',drop_first=True),df],axis=1)\n\n# now drop the original 'Sex' column (you don't need it anymore)\ndf.drop(['Sex'],axis=1, inplace=True)\n\n","kernel":"python3","pos":9,"start":1585236090704,"state":"done","type":"cell"}
{"cell_type":"code","end":1585236090835,"exec_count":11,"id":"182034","input":"df.head()","kernel":"python3","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Sex_I</th>\n      <th>Sex_M</th>\n      <th>Length</th>\n      <th>Diameter</th>\n      <th>Height</th>\n      <th>WWeight</th>\n      <th>SWeight</th>\n      <th>VWeight</th>\n      <th>ShWeight</th>\n      <th>Rings</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>1</td>\n      <td>0.455</td>\n      <td>0.365</td>\n      <td>0.095</td>\n      <td>0.5140</td>\n      <td>0.2245</td>\n      <td>0.1010</td>\n      <td>0.150</td>\n      <td>15</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0</td>\n      <td>1</td>\n      <td>0.350</td>\n      <td>0.265</td>\n      <td>0.090</td>\n      <td>0.2255</td>\n      <td>0.0995</td>\n      <td>0.0485</td>\n      <td>0.070</td>\n      <td>7</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0.530</td>\n      <td>0.420</td>\n      <td>0.135</td>\n      <td>0.6770</td>\n      <td>0.2565</td>\n      <td>0.1415</td>\n      <td>0.210</td>\n      <td>9</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0</td>\n      <td>1</td>\n      <td>0.440</td>\n      <td>0.365</td>\n      <td>0.125</td>\n      <td>0.5160</td>\n      <td>0.2155</td>\n      <td>0.1140</td>\n      <td>0.155</td>\n      <td>10</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>0</td>\n      <td>0.330</td>\n      <td>0.255</td>\n      <td>0.080</td>\n      <td>0.2050</td>\n      <td>0.0895</td>\n      <td>0.0395</td>\n      <td>0.055</td>\n      <td>7</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"   Sex_I  Sex_M  Length  Diameter  Height  WWeight  SWeight  VWeight  \\\n0      0      1   0.455     0.365   0.095   0.5140   0.2245   0.1010   \n1      0      1   0.350     0.265   0.090   0.2255   0.0995   0.0485   \n2      0      0   0.530     0.420   0.135   0.6770   0.2565   0.1415   \n3      0      1   0.440     0.365   0.125   0.5160   0.2155   0.1140   \n4      1      0   0.330     0.255   0.080   0.2050   0.0895   0.0395   \n\n   ShWeight  Rings  \n0     0.150     15  \n1     0.070      7  \n2     0.210      9  \n3     0.155     10  \n4     0.055      7  "},"exec_count":11}},"pos":10,"start":1585236090813,"state":"done","type":"cell"}
{"cell_type":"code","end":1585236090848,"exec_count":12,"id":"a85471","input":"X,y = df2np(df)\nX_train,X_test,y_train,y_test = train_test_split(X,y)\n\nscaler = MinMaxScaler()\nscaler.fit(X_train)\nX_train = scaler.transform(X_train)\nX_test = scaler.transform(X_test)\n\n","kernel":"python3","pos":11,"start":1585236090842,"state":"done","type":"cell"}
{"cell_type":"code","end":1585236090940,"exec_count":13,"id":"3ab672","input":"w = np.linalg.pinv(X_train).dot(y_train)\nyhat = X_test.dot(w)\n\nscore_train = r2_score(X_train.dot(w),y_train)\nscore_test = r2_score(yhat,y_test)\n\nscore_train,score_test","kernel":"python3","output":{"0":{"data":{"text/plain":"(0.2363208921950969, 0.22515978741250453)"},"exec_count":13}},"pos":12,"start":1585236090853,"state":"done","type":"cell"}
{"cell_type":"code","end":1585236091230,"exec_count":14,"id":"bb07ee","input":"poly2 = PolynomialFeatures(2)\nX_train_poly = poly2.fit_transform(X_train)\nX_test_poly = poly2.fit_transform(X_test)\n\n\n\nw = np.linalg.pinv(X_train_poly).dot(y_train)\nyhat = X_test_poly.dot(w)\n\npoly_score_train = r2_score(X_train_poly.dot(w),y_train)\npoly_score_test = r2_score(yhat,y_test)\n\npoly_score_train,poly_score_test","kernel":"python3","output":{"0":{"data":{"text/plain":"(0.29587562408960144, 0.32553248698574855)"},"exec_count":14}},"pos":13,"start":1585236090990,"state":"done","type":"cell"}
{"cell_type":"code","id":"e2197d","input":"","pos":14,"type":"cell"}
{"id":0,"time":1585235843851,"type":"user"}
{"last_load":1585235844084,"type":"file"}