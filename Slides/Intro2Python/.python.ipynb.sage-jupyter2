{"backend_state":"ready","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":14.081632653067496,"memory":37179392},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.9"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"0c039d","input":"","pos":70,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"60a077","input":"## Exercise:\n\n## Cover up or delete the above code and try to do it again yourself","pos":66,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"acb1fb","input":"## Exercise...\n\n## Sum the series 2/(n*(n+1)) for n = 1,2,...,10000\n\nsum([2/(n*(n+1)) for n in range(1,10001)])","pos":63,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":1,"id":"20d506","input":"a = 6\nb = 6.0\nc = \"hi\"\ntype(a),type(b),type(c)\n","output":{"0":{"data":{"text/plain":"(int, float, str)"},"exec_count":1,"output_type":"execute_result"}},"pos":1,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":1,"id":"57363d","input":"for letter in \"word\":\n    print(letter)","output":{"0":{"name":"stdout","output_type":"stream","text":"w\no\nr\nd\n"}},"pos":37,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":1,"id":"b5c726","input":"## Both \"\" and '' are equally valid ways of declaring string literals\n\"hi\" == 'hi'","output":{"0":{"data":{"text/plain":"True"},"exec_count":1,"output_type":"execute_result"}},"pos":14,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":10,"id":"e0db90","input":"## Exercise:\n\n##  Try to do a task from rosettacode in python:  http://www.rosettacode.org/wiki/Category:Programming_Tasks\n\n## Also, look at python solutions to other problems and try to understand them.  ","pos":67,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":12,"id":"39cebb","input":"for i in range(1,9):\n    print(i)","output":{"0":{"name":"stdout","output_type":"stream","text":"1\n2\n3\n4\n5\n6\n7\n8\n"}},"pos":29,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":13,"id":"fd2443","input":"### A tuple is a \"constant\" version of a list that cannot be altered.\n### Try making changes to T, below\nT = tuple(A)\nT","output":{"0":{"data":{"text/plain":"(1, 2, 3)"},"exec_count":13,"output_type":"execute_result"}},"pos":24,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":14,"id":"572bb4","input":"## Floating point vs integer division in Python3\n5/3, 5//3, divmod(5,3)","output":{"0":{"data":{"text/plain":"(1.6666666666666667, 1, (1, 2))"},"exec_count":14,"output_type":"execute_result"}},"pos":4,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":15,"id":"529002","input":"# This time we specify the stridelength to be -1, so the range counts down\nfor i in range(10,1,-1):\n    print(i)\nprint(\"b\")    ","output":{"0":{"name":"stdout","output_type":"stream","text":"10\n9\n8\n7\n6\n5\n4\n3\n2\nb\n"}},"pos":34,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":15,"id":"7f4b37","input":"int(\"0xdefaced\",16)  #base conversion defaced base 16 to decimal","output":{"0":{"data":{"text/plain":"233811181"},"exec_count":15,"output_type":"execute_result"}},"pos":7,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":16,"id":"90bb1d","input":"  ","output":{"0":{"data":{"text/plain":"[]"},"exec_count":16,"output_type":"execute_result"}},"pos":69,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":16,"id":"ffeeb9","input":"print(\"This is how you print a string.\")","output":{"0":{"name":"stdout","output_type":"stream","text":"This is how you print a string.\n"}},"pos":9,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":18,"id":"b5c744","input":"\"ABC\" + \"DEF\"  ## Addition is concatenation","output":{"0":{"data":{"text/plain":"'ABCDEF'"},"exec_count":18,"output_type":"execute_result"}},"pos":10,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":19,"id":"377794","input":"a_list = [a,b,c]\na_list","output":{"0":{"data":{"text/plain":"[6, 6.0, 'hi']"},"exec_count":19,"output_type":"execute_result"}},"pos":19,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":19,"id":"40abb3","input":"","output":{"0":{"name":"stdout","output_type":"stream","text":"The unsorted list: [41, 36, 11, 16, 25, 36, 21, 26, 21, 0]\nThe sorted list: [0, 11, 16, 21, 21, 25, 26, 36, 36, 41]\n"}},"pos":68,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":2,"id":"3740f0","input":"S = \"\"\"let's find all the words in this sentence that contain 'a'\nThis string has\n\nmany lines\n\nand that's possible because of the triple quotes\n\"\"\"\n[w for w in S.split() if 'a' in w]","output":{"0":{"data":{"text/plain":"['all', 'that', 'contain', \"'a'\", 'has', 'many', 'and', \"that's\", 'because']"},"exec_count":2,"output_type":"execute_result"}},"pos":56,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":2,"id":"ebd567","input":"\"With the two notations for a string you can make 'strings within strings' as it were.\"","output":{"0":{"data":{"text/plain":"\"With the two notations for a string you can make 'strings within strings' as it were.\""},"exec_count":2,"output_type":"execute_result"}},"pos":15,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":20,"id":"6bc159","input":"a_list[2]=4\na_list.append(9)\n#B = a_list*3\n#B\na_list","output":{"0":{"data":{"text/plain":"[6, 6.0, 4, 9]"},"exec_count":20,"output_type":"execute_result"}},"pos":21,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":21,"id":"a0882b","input":"\"This is a {} string.  You can use this to report on numbers like {} that are the result of computations.\".format(\"formatted\",99999)","output":{"0":{"data":{"text/plain":"'This is a formatted string.  You can use this to report on numbers like 99999 that are the result of computations.'"},"exec_count":21,"output_type":"execute_result"}},"pos":12,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":21,"id":"cd13c9","input":"for i in range(4):\n    print(i)","output":{"0":{"name":"stdout","output_type":"stream","text":"0\n1\n2\n3\n"}},"pos":31,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":23,"id":"9b4d8c","input":"\n## Matrixes are the fundamental abstraction in data science\n## Pay attention to this cell :)\nmatrix = [[1,2],[3,4],[5,6]]\nfor row in matrix:\n    print(row)","output":{"0":{"name":"stdout","output_type":"stream","text":"[1, 2]\n[3, 4]\n[5, 6]\n"}},"pos":38,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":24,"id":"24363f","input":"A = list(range(10))\nA[2:8]\n    ","output":{"0":{"data":{"text/plain":"[2, 3, 4, 5, 6, 7]"},"exec_count":24,"output_type":"execute_result"}},"pos":40,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":24,"id":"4aa931","input":"# You can also specify the starting number (zero by default)\nfor i in range(1,4):\n    print(i)","output":{"0":{"name":"stdout","output_type":"stream","text":"1\n2\n3\n"}},"pos":33,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":25,"id":"edc4fb","input":"# The last two elements of A\n\nA[-2:]","output":{"0":{"data":{"text/plain":"[8, 9]"},"exec_count":25,"output_type":"execute_result"}},"pos":43,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":27,"id":"0f43b0","input":"for i in range(100):\n    if i in [6,8,10]:\n        continue\n    if i > 90:\n        break\n    if i%11 == 0:\n        print(i)\n    elif i%18 == 0:\n        #print(\"{} is even better than {}\".format(i,\"sliced bread\"))\n        print(\"%s is even better than %s\"%(str(i),\"sliced bread\"))\n    ","output":{"0":{"name":"stdout","output_type":"stream","text":"0\n11\n18 is even better than sliced bread\n22\n33\n36 is even better than sliced bread\n44\n54 is even better than sliced bread\n55\n66\n72 is even better than sliced bread\n77\n88\n90 is even better than sliced bread\n"}},"pos":59,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":29,"id":"72dd3f","input":"list(range(2,10,2))","output":{"0":{"data":{"text/plain":"[2, 4, 6, 8]"},"exec_count":29,"output_type":"execute_result"}},"pos":30,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":3,"id":"4beae0","input":"\"A\"*12     ## Mulitiplication by n is self concatenation n times","output":{"0":{"data":{"text/plain":"'AAAAAAAAAAAA'"},"exec_count":3,"output_type":"execute_result"}},"pos":11,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":3,"id":"784ccb","input":"t = \"\"\"\nStrings within triple quotes can be multiple lines long.\nOften triple quotes are used for comments in python.\n\"\"\"","pos":16,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":3,"id":"793e5c","input":"## Exercise:\n\nS = \"find all the words in this sentence that have length at least four\"\n[w for w in S.split() if len(w) >=4]\n","output":{"0":{"data":{"text/plain":"['find',\n 'words',\n 'this',\n 'sentence',\n 'that',\n 'have',\n 'length',\n 'least',\n 'four']"},"exec_count":3,"output_type":"execute_result"}},"pos":57,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":3,"id":"eaf3fa","input":"a = 2**2937  ## Exponentiation\na","output":{"0":{"data":{"text/plain":"133382012266810123024243828603394426976927152206975532639271446494657605005869810581402297860867547970971808618496630775115365070461019225470911909891207539593698249211981543529126968522097246438076835325552147285729708862130849456627126486128644044636093886998494454268535882847783642961087784921278158012882301646459116718121831085383068678148777133207220825981493053953142217556787669261042434503120546127430672245352426858630485963844835125665431291001685890849284343212502744681734107108633656396817161961610038957674088533451737014880833617487010153506995520270904794121476878260616065707740274422344570006101334925302538280576485927248260617797884635715401286073160452569779061942907384332932888877218829666518222908579365872307875940600574144141899375356051164602995174221526428696222980600186676749453613000656041217117421344990038264739898368497072802792134141410886625001472"},"exec_count":3,"output_type":"execute_result"}},"pos":3,"scrolled":true,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":32,"id":"775174","input":"total = 0\nfor i in range(101):\n    total += i\nprint(total)  #The sum of 1,2,3,...,100\nprint(total/100) # The average of 1,2,3,...,100","output":{"0":{"name":"stdout","output_type":"stream","text":"5050\n50.5\n"}},"pos":60,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":33,"id":"697690","input":"A[:]","output":{"0":{"data":{"text/plain":"[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"},"exec_count":33,"output_type":"execute_result"}},"pos":44,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":33,"id":"69b9ea","input":"A = [1,2,3]\nB = A[:]  ## Deep copy -- doesn't change A\nB.append(\"whoa\")\nA","output":{"0":{"data":{"text/plain":"[1, 2, 3]"},"exec_count":33,"output_type":"execute_result"}},"pos":22,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":35,"id":"1f6757","input":"## Exercise\n## Use array slicing to print out every other word of the sentence below\n\nS = \"this is a sentence but it becomes a list of strings when we split it\"\nL = S.split()\nL[-1:0:-1]","output":{"0":{"data":{"text/plain":"['it',\n 'split',\n 'we',\n 'when',\n 'strings',\n 'of',\n 'list',\n 'a',\n 'becomes',\n 'it',\n 'but',\n 'sentence',\n 'a',\n 'is']"},"exec_count":35,"output_type":"execute_result"}},"pos":47,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":36,"id":"f7f662","input":"P = \"antidisestablishmentarianism\"\nC = \"micropachycephalosaurus\"\nP[4:8]","output":{"0":{"data":{"text/plain":"'dise'"},"exec_count":36,"output_type":"execute_result"}},"pos":46,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":37,"id":"8189a6","input":"e_recip = (1-1/1000000)**1000000  # Exponentiation is denoted **\n\n1/e_recip","output":{"0":{"data":{"text/plain":"2.7182831876793716"},"exec_count":37,"output_type":"execute_result"}},"pos":61,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":4,"id":"93f2e3","input":"\"Sometimes you may want to deal with text just as ASCII byte codes (aka UTF8)\".encode()","output":{"0":{"data":{"text/plain":"b'Sometimes you may want to deal with text just as ASCII byte codes (aka UTF8)'"},"exec_count":4,"output_type":"execute_result"}},"pos":17,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":40,"id":"c27d78","input":"# Exercise print the even numbers between 0 and 10\n\n# Create a list of the first 6 odd numbers and find the sum, max and min\n\nL = list(range(1,2*6+1,2))\nL,sum(L), max(L),min(L)\n","output":{"0":{"data":{"text/plain":"([1, 3, 5, 7, 9, 11], 36, 11, 1)"},"exec_count":40,"output_type":"execute_result"}},"pos":35,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":42,"id":"3c171f","input":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nx = np.linspace(-10,10,100)\ny = 1/(1+np.exp(-x))\n\nplt.plot(x,y)\nplt.show()","output":{"0":{"data":{"image/png":"a50598dc416993704282967d05bcf6ef63414c9c","text/plain":"<Figure size 432x288 with 1 Axes>"},"exec_count":42,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":49,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":42,"id":"858959","input":"# Another approach\n\nsum([2/(n*(n+1)) for n in range(1,10001)])","output":{"0":{"data":{"text/plain":"1.9998000199980015"},"exec_count":42,"output_type":"execute_result"}},"pos":64,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":50,"id":"2f0af6","input":"## The sieve of eratosthenes...\nimport math\nN = 10000\nsqrtN = int(math.sqrt(N))\nnumbers = range(2,N)\nis_prime = N*[True]\n## is_prime  = [True, True, True,...,True] one thousand times\n\nfor n in numbers[:sqrtN+1]:\n    if not is_prime[n]:\n        continue\n    for j in range(2,N // n):\n        is_prime[j*n] = False\n\nprimes_less_than_N = [p for p in numbers if is_prime[p]]\nprimes_less_than_N[:20]","output":{"0":{"data":{"text/plain":"[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71]"},"exec_count":50,"output_type":"execute_result"}},"pos":65,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":52,"id":"8848e0","input":"#Exercise\n\n## Use the math library to find hyperbolic tangent of all the numbers in range(-10,11)\nimport math \n[math.tanh(x) for x in range(-10,11)]\n","output":{"0":{"data":{"text/plain":"[-0.9999999958776927,\n -0.999999969540041,\n -0.9999997749296758,\n -0.9999983369439447,\n -0.9999877116507956,\n -0.9999092042625951,\n -0.999329299739067,\n -0.9950547536867305,\n -0.9640275800758169,\n -0.7615941559557649,\n 0.0,\n 0.7615941559557649,\n 0.9640275800758169,\n 0.9950547536867305,\n 0.999329299739067,\n 0.9999092042625951,\n 0.9999877116507956,\n 0.9999983369439447,\n 0.9999997749296758,\n 0.999999969540041,\n 0.9999999958776927]"},"exec_count":52,"output_type":"execute_result"}},"pos":53,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":55,"id":"571be8","input":"# If the start isn't given it's assumed to be zero\n\nA[:5]","output":{"0":{"data":{"text/plain":"[0, 1, 2, 3, 4]"},"exec_count":55,"output_type":"execute_result"}},"pos":41,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":55,"id":"f69fa1","input":"## List comprehensions\n\nA = range(100)\nprint([a for a in A if (a**2)%100 == 1] )\n\n## The form is:\n\n#[a for a in Some_Container if Some_Condition]\n\n## You can also do\n\n#[f(a) for a in Some_Container if Some_Condition]\n\n## where f is any function\n\n## Exercise:\n\n## The code above shows that \"1\" has some \"square roots\" mod 100.\n## Compute the set of all \"squares\" mod 100.\nlen(set([(a**2)%100 for a in A]))\n","output":{"0":{"name":"stdout","output_type":"stream","text":"[1, 49, 51, 99]\n"},"1":{"data":{"text/plain":"22"},"exec_count":55,"output_type":"execute_result"}},"pos":55,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":56,"id":"5e47f9","input":"#  If the stop isn't given we get the array all the way up to the end\n\nA[2:]","output":{"0":{"data":{"text/plain":"[2, 3, 4, 5, 6, 7, 8, 9]"},"exec_count":56,"output_type":"execute_result"}},"pos":42,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":58,"id":"0f8e09","input":"#You can add a stride...\n# here the stop and the start are the default values\nA[::2]","output":{"0":{"data":{"text/plain":"[0, 2, 4, 6, 8]"},"exec_count":58,"output_type":"execute_result"}},"pos":45,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":6,"id":"2a180d","input":"# Exercise\n\n## In this cell create a list containing two numbers and two strings.\n## Try accesing the \"-1\"th element of your list.  What happened?\n\nernie = [3,\"blue\",18.0,\"red\"]\nernie[-2]","output":{"0":{"data":{"text/plain":"18.0"},"exec_count":6,"output_type":"execute_result"}},"pos":25,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":6,"id":"c41c2a","input":"int(\"5000\")  #conversion str to int","output":{"0":{"data":{"text/plain":"5000"},"exec_count":6,"output_type":"execute_result"}},"pos":5,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":6,"id":"e51da3","input":"S = \"microwave\"\nS[2]    ## string values can be \"gotten\" but not changed.\n","output":{"0":{"data":{"text/plain":"'c'"},"exec_count":6,"output_type":"execute_result"}},"pos":13,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":63,"id":"baeb7f","input":"## Exercise \n## Print out the first 10 powers of 2\n[2**p for p in range(10)]","output":{"0":{"data":{"text/plain":"[1, 2, 4, 8, 16, 32, 64, 128, 256, 512]"},"exec_count":63,"output_type":"execute_result"}},"pos":62,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":64,"id":"cf1632","input":"# Uniform randomness\n# Not cryptographically secure\nimport random\n\nrandom.randint(0,2),random.random()","output":{"0":{"data":{"text/plain":"(0, 0.8166279820784121)"},"exec_count":64,"output_type":"execute_result"}},"pos":51,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":68,"id":"0c538e","input":"import hashlib\n\nh = hashlib.sha256()\n\nh.update(\"machine learning doesn't use hashing\".encode())\nh.hexdigest()","output":{"0":{"data":{"text/plain":"'a99969c35d5160f18823429ca736a93d6e12e061ce11761ac7ae53b4ddac5ff4'"},"exec_count":68,"output_type":"execute_result"}},"pos":52,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":7,"id":"228401","input":"str(5000) #conversion int to str","output":{"0":{"data":{"text/plain":"'5000'"},"exec_count":7,"output_type":"execute_result"}},"pos":6,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":8,"id":"b14b6d","input":"A = [1,2,3]\nB = A  ## Just a pointer, changes affect A\nB.append(\"whoa\")\nA","output":{"0":{"data":{"text/plain":"[1, 2, 3, 'whoa']"},"exec_count":8,"output_type":"execute_result"}},"pos":23,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":9,"id":"1702c5","input":"## There are built in functions for sorting lists and manipulating them in other ways.\n\njamie = [3,4,5,10,-11]\njamie.sort()\njamie.count(3)","output":{"0":{"data":{"text/plain":"1"},"exec_count":9,"output_type":"execute_result"}},"pos":27,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":9,"id":"ff9571","input":"## Addition on lists is concatenation\n\nernie + A","output":{"0":{"data":{"text/plain":"[3, 'blue', 18.0, 'red', 1, 2, 3, 'whoa']"},"exec_count":9,"output_type":"execute_result"}},"pos":26,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"00e862","input":"#### Floats\n\nThere is basically nothing surprising or unusual about floats in Python.\n\n#### Strings\n\nPython has a lot of functions that are convenient for string manipulation.\n\nWe'll see some of those below.  \n\nHere let's just focus on how to use basic strings.\n\nA few examples will follow. \n\n","pos":8,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"074369","input":"## Some quick Python...\n\nWe don't need to know tons of python for this course.  We do need to know the basics though.\n\nYou should already know C++.  There are 3 big differences between python and C++ you will notice right away:\n\n1.  You don't compile python, it just runs as a script.\n1.  There are no braces {} in python.  **Code blocks are determined by indentation.**\n1.  You don't need to declare variable types.  They are determined implicitly.\n\nPoint (3) is nice, but it can lead to hard to find bugs so be careful.  If you want to check the type of a python variable you can do it using the `type()` command.\n\n\nThere are many great free online resources for learning Python.  \n\nYou might want to read through Think Python 2e which is available here: https://greenteapress.com/wp/think-python-2e/","pos":0,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"252950","input":"## Control structures\n\nLike C++ python allows you to branch on conditions.  There are while loops as well as for loops.\n\nBelow I'm going to write a variety of programs.  You can use them as a reference for the exercises given after.\n","pos":58,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"2fe2de","input":"#### Using libraries\n\nLibraries are used in python by using the \"import\" command.\nLike in C++, libraries expand the set of functions you can use in python.\n\n","pos":48,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"613bd6","input":"### Indentation is important!\n\nPython doesn't use braces like C, C++ or Java. \n\nThe only way you know you are \"inside\" a code block (such as a for-loop) is by the indentation level.\n","pos":32,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"66bc7e","input":"###  Int, Float, Str\n\nThe basic atomic datatypes in Python are integers, floats and strings.  \n\n#### Integers\n\nIntegers can be as big as you want, unlike C/C++.\n\nArithmetic works as it usually does.\n\nIn Python3 but not Python2 quotients of integers are floats.\n\nBelow are some examples.  ","pos":2,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"6efd4b","input":"### Array slicing\n\nAn important idea in python and especially in this class is array slicing.\n\nThe basic syntax is \n\n    A[start:stop]\n\nwhere `A` is a list.  This returns a new array which is a copy of the subarray of `A` with indexes greater than or equal to `start` and strictly less than `stop`.\n\nFor example:\n\n","pos":39,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"79da00","input":"### Accessing List Elements\n\nYou access the elements of a list using basically the same notation as C++.  It's zero-based integer indexing.\n    \nFor example ...","pos":20,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"7b2c2b","input":"#### Slick tricks\n\nThere are a few nice ways to do things fast in python.  Here is a quick sketch of some of them.\n\nThe most important of these is called a **list comprehension**.\n\nIt is a fast way to both transform and filter an existing container using something like set-builder notation.\n\nThe basic syntax is:\n\n```\n    [t(a) for a in L if <condition>]\n```\n\nwhere `t` is some (optional) transformation function and L is a container (such as a list).\n","pos":54,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"a721e8","input":"### Ranges and iteration\n\nAn important type of list is a _range_.\n\nThis produces a list of numbers from `a` to `b`.  If you want you can also introduce a \"stride length\".\n\nUsually `for` loops are over ranges of numbers.  Here are some examples.","pos":28,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"c62077","input":"### Some familiar datatypes...\n\nYou can see that even though they are implicit, python still uses ints, floats and strings.  \nAlso notice that the result of the last command in a cell is printed to the screen!\n\nAnother thing that might be new to you with python is the arrays work.\n\nIn python memory management is all done for you and you don't need to allocate space.\n\nPython calls arrays _lists_.  \n\nPython lists are just variables inside hard brackets.\n","pos":18,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"d34cbb","input":"# import math\n\nmath.log(100), math.e\n\n","pos":50,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"de228c","input":"### Iteration over containers\n\nIn python for-loops iterate over some container (like a list).\n\nSome examples of this are below...","pos":36,"state":"done","type":"cell"}
{"id":0,"time":1582646580057,"type":"user"}
{"last_load":1582670343887,"type":"file"}