{"backend_state":"running","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":83484672},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.5"}},"type":"settings"}
{"cell_type":"code","exec_count":10,"id":"5bfbe0","input":"import mystuff as ms","pos":8,"type":"cell"}
{"cell_type":"code","exec_count":11,"id":"c78bb7","input":"for alpha in [10**k for k in [-6,-5,-4,-3,-2,-1]]:\n    print(\"alpha = {}\".format(alpha))\n    w,path = grad_descent(w,Z_original,y_original,ms.reg_fast_grad_lr,alpha=alpha,eta=0.1,max_iter=20000)\n    z = (varzp.dot(w)).reshape(x1v.shape)\n\n    zsoft = sigmoid(z)\n    #z = np.sign(z)\n    plt.contourf(x1v,x2v,zsoft,alpha=0.25)\n    Xg = X[y==1]\n    Xb = X[y==-1]\n\n    plt.scatter(Xg[:,1],Xg[:,2],c=\"b\",alpha=0.5)\n    plt.scatter(Xb[:,1],Xb[:,2],c='r',alpha=0.5)\n    plt.xlabel(r\"$x_1$\")\n    plt.ylabel(r\"$x_2$\")\n\n    plt.title(\"Contour plot of soft boundary\")\n    plt.colorbar()\n    plt.show()\n\n\n    zsoft = np.sign(z)\n    #z = np.sign(z)\n    plt.contourf(x1v,x2v,zsoft,alpha=0.25)\n    Xg = X[y==1]\n    Xb = X[y==-1]\n\n    plt.scatter(Xg[:,1],Xg[:,2],c=\"b\",alpha=0.5)\n    plt.scatter(Xb[:,1],Xb[:,2],c='r',alpha=0.5)\n    plt.xlabel(r\"$x_1$\")\n    plt.ylabel(r\"$x_2$\")\n\n    plt.title(\"Contour plot of hard boundary\")\n    plt.colorbar()\n    plt.show()\n    print(\"E_out(w) = {}\".format(E_in(Z,y,w)))","output":{"0":{"name":"stdout","output_type":"stream","text":"alpha = 1e-06\n"},"1":{"name":"stderr","output_type":"stream","text":"/usr/lib/python3/dist-packages/ipykernel_launcher.py:15: RuntimeWarning: overflow encountered in exp\n  from ipykernel import kernelapp as app\n"},"10":{"name":"stdout","output_type":"stream","text":"E_out(w) = 0.095\nalpha = 0.001\n"},"11":{"data":{"image/png":"304c34d618b2d94c6d52148c34502e90c573c1c2","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"},"12":{"data":{"image/png":"f341be08070526b6fe38c006faa362882286e6f4","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"},"13":{"name":"stdout","output_type":"stream","text":"E_out(w) = 0.09625\nalpha = 0.01\n"},"14":{"data":{"image/png":"cfdf734db5f175ccdc258bccfb4de10a5af606ab","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"},"15":{"data":{"image/png":"52b55ce42fe0b4cf757e37562f3ab96a9f99b1f5","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"},"16":{"name":"stdout","output_type":"stream","text":"E_out(w) = 0.10875\nalpha = 0.1\n"},"17":{"data":{"image/png":"07f87aea358a877ea528e051d34594b5f0256fde","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"},"18":{"data":{"image/png":"1d340a57e3dc1ad491b130c4035bb295f736c9e3","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"},"19":{"name":"stdout","output_type":"stream","text":"E_out(w) = 0.1625\n"},"2":{"data":{"image/png":"b0a1171ad6a23f911d85fed877371df930f9e8cc","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"},"3":{"data":{"image/png":"ed1cd5c516a9542b02ad1b8804c620288491ab61","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"},"4":{"name":"stdout","output_type":"stream","text":"E_out(w) = 0.09875\nalpha = 1e-05\n"},"5":{"data":{"image/png":"c845f2a96be83c562b22c7a1e54645a0a81806af","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"},"6":{"data":{"image/png":"9c00e00d0f08bf198af7df51606828cc2b05b2b3","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"},"7":{"name":"stdout","output_type":"stream","text":"E_out(w) = 0.09875\nalpha = 0.0001\n"},"8":{"data":{"image/png":"f90b662cd9fe63dea623e0cc4d00ff39bd7d0402","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"},"9":{"data":{"image/png":"345e7f6845a3c873dab7150c475a909e8bfb8966","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":9,"type":"cell"}
{"cell_type":"code","exec_count":13,"id":"b5ed89","input":"for alpha in [2**k for k in [-7,-6,-5,-4,-3,-2,-1]]:\n    print(\"alpha = {}\".format(alpha))\n    w,path = grad_descent(w,Z_original,y_original,ms.reg_fast_grad_lr,alpha=alpha,eta=0.1,max_iter=20000)\n    z = (varzp.dot(w)).reshape(x1v.shape)\n\n\n\n\n    zsoft = np.sign(z)\n    #z = np.sign(z)\n    plt.contourf(x1v,x2v,zsoft,alpha=0.25)\n    Xg = X_original[y_original==1]\n    Xb = X_original[y_original==-1]\n\n    plt.scatter(Xg[:,1],Xg[:,2],c=\"b\",alpha=0.5)\n    plt.scatter(Xb[:,1],Xb[:,2],c='r',alpha=0.5)\n    plt.xlabel(r\"$x_1$\")\n    plt.ylabel(r\"$x_2$\")\n\n    plt.title(\"Contour plot of hard boundary\")\n    plt.colorbar()\n    plt.show()\n    print(\"E_in(w) = {}\".format(E_in(Z,y,w)))","output":{"0":{"name":"stdout","output_type":"stream","text":"alpha = 0.0078125\n"},"1":{"data":{"image/png":"4c303acebb4f0f8c927eb0b722331905920774e6","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"},"10":{"name":"stdout","output_type":"stream","text":"E_in(w) = 0.17\nalpha = 0.25\n"},"11":{"data":{"image/png":"2c82b76ce0473172ac90588fd2c473c288277b19","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"},"12":{"name":"stdout","output_type":"stream","text":"E_in(w) = 0.185\nalpha = 0.5\n"},"13":{"data":{"image/png":"d9485d229205233211700615fa630842a00c0154","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"},"14":{"name":"stdout","output_type":"stream","text":"E_in(w) = 0.20875\n"},"2":{"name":"stdout","output_type":"stream","text":"E_in(w) = 0.105\nalpha = 0.015625\n"},"3":{"data":{"image/png":"fef01024d2b3b7cdb9e8c112d3dc28754e9bd135","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"},"4":{"name":"stdout","output_type":"stream","text":"E_in(w) = 0.1175\nalpha = 0.03125\n"},"5":{"data":{"image/png":"c14d6fdad0038ae7fd3d46f88a0901a6156b2a7e","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"},"6":{"name":"stdout","output_type":"stream","text":"E_in(w) = 0.13\nalpha = 0.0625\n"},"7":{"data":{"image/png":"57b4a55c46c5e9bd0f4d98a14b86119e67e0b5cf","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"},"8":{"name":"stdout","output_type":"stream","text":"E_in(w) = 0.15125\nalpha = 0.125\n"},"9":{"data":{"image/png":"1ec80a1ddcd805ea988acd54440b37b1e186f20a","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":10,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"a5eb8f","input":"import numpy as np\nimport mystuff as ms\nimport matplotlib.pyplot as plt\n\nfrom sklearn.datasets import make_moons\n\ndef blobs(N=40):\n    X,y= make_moons(n_samples=2*N,noise=0.3, random_state=0)\n    X = np.c_[np.ones(2*N),X[:,0],X[:,1]]\n    y=2*y-1\n    return X,y\n        \n\nN=40\n\nX,y = blobs(N)\nXb = X[y==1]\nXr = X[y==-1]\nplt.scatter(Xb[:,1],Xb[:,2])\nplt.scatter(Xr[:,1],Xr[:,2])\nplt.show()","output":{"0":{"data":{"image/png":"f8c5bb422ae8436e2ebbca3c784c108d3c62327b","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":0,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"e43a4e","input":"\ndef E_in(X,y,w):\n    mc = (np.sign(X.dot(w)) != y)\n    return np.sum(mc)/len(mc)\n\nw = np.zeros(X.shape[1])\nw,path = ms.grad_descent(w,X,y,ms.fast_grad_lr,eta=0.1,max_iter=10000)\n\n\ndef sigmoid(array):\n    \"\"\"Applies the sigmoid or logistic function to a numpy array\"\"\"\n    return 1/(1+np.exp(-array))\n\n\nxmin = np.min(X[:,1])-0.5\nxmax = np.max(X[:,1])+0.5\nymin = np.min(X[:,2])-0.5\nymax = np.max(X[:,2])+0.5\nx1 = np.arange(xmin,xmax,0.01)\nx2 = np.arange(ymin,ymax,0.01)\n\nx1v,x2v = np.meshgrid(x1,x2)\n\nvarz = [np.ones_like(x1v),x1v,x2v]\n\nz = np.zeros_like(x1v)\nfor ww,v in zip(w,varz):\n    z += ww*v\n\nzsoft = sigmoid(z)\n#z = np.sign(z)\nplt.contourf(x1v,x2v,zsoft,alpha=0.25)\nXg = X[y==1]\nXb = X[y==-1]\n\nplt.scatter(Xg[:,1],Xg[:,2],c=\"b\",alpha=0.5)\nplt.scatter(Xb[:,1],Xb[:,2],c='r',alpha=0.5)\nplt.xlabel(r\"$x_1$\")\nplt.ylabel(r\"$x_2$\")\n\nplt.title(\"Contour plot of soft boundary\")\nplt.colorbar()\nplt.show()\n\n\nzsoft = np.sign(z)\n#z = np.sign(z)\nplt.contourf(x1v,x2v,zsoft,alpha=0.25)\nXg = X[y==1]\nXb = X[y==-1]\n\nplt.scatter(Xg[:,1],Xg[:,2],c=\"b\",alpha=0.5)\nplt.scatter(Xb[:,1],Xb[:,2],c='r',alpha=0.5)\nplt.xlabel(r\"$x_1$\")\nplt.ylabel(r\"$x_2$\")\n\nplt.title(\"Contour plot of hard boundary\")\nplt.colorbar()\nplt.show()\n\n\nprint(\"E_in(w) = {}\".format(E_in(X,y,w)))\nw_lin=w","output":{"0":{"data":{"image/png":"a84f9fd522175c54e68cd514131b4b7fd80ad798","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"},"1":{"data":{"image/png":"7dc45743f1b5925aa6d511f21ebb11dd47e411f9","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"},"2":{"name":"stdout","output_type":"stream","text":"E_in(w) = 0.175\n"}},"pos":1,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"9aba2c","input":"from sklearn.preprocessing import PolynomialFeatures\ndeg=5\npf = PolynomialFeatures(deg)\nZ = pf.fit_transform(X[:,1:])\nw = np.zeros(Z.shape[1])\nw,path = ms.grad_descent(w,Z,y,ms.fast_grad_lr,eta=0.1,max_iter=20000)","pos":3,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"da4781","input":"def sigmoid(array):\n    \"\"\"Applies the sigmoid or logistic function to a numpy array\"\"\"\n    return 1/(1+np.exp(-array))\n\n\nxmin = np.min(X[:,1])-0.5\nxmax = np.max(X[:,1])+0.5\nymin = np.min(X[:,2])-0.5\nymax = np.max(X[:,2])+0.5\nx1 = np.arange(xmin,xmax,0.01)\nx2 = np.arange(ymin,ymax,0.01)\n\nx1v,x2v = np.meshgrid(x1,x2)\n\nvarz = np.concatenate((x1v.reshape(-1,1),x2v.reshape(-1,1)),axis=1)\nvarzp = pf.fit_transform(varz)\n\nz = (varzp.dot(w)).reshape(x1v.shape)\n\nzsoft = sigmoid(z)\n#z = np.sign(z)\nplt.contourf(x1v,x2v,zsoft,alpha=0.25)\nXg = X[y==1]\nXb = X[y==-1]\n\nplt.scatter(Xg[:,1],Xg[:,2],c=\"b\",alpha=0.5)\nplt.scatter(Xb[:,1],Xb[:,2],c='r',alpha=0.5)\nplt.xlabel(r\"$x_1$\")\nplt.ylabel(r\"$x_2$\")\n\nplt.title(\"Contour plot of soft boundary\")\nplt.colorbar()\nplt.show()\n\n\nzsoft = np.sign(z)\n#z = np.sign(z)\nplt.contourf(x1v,x2v,zsoft,alpha=0.25)\nXg = X[y==1]\nXb = X[y==-1]\n\nplt.scatter(Xg[:,1],Xg[:,2],c=\"b\",alpha=0.5)\nplt.scatter(Xb[:,1],Xb[:,2],c='r',alpha=0.5)\nplt.xlabel(r\"$x_1$\")\nplt.ylabel(r\"$x_2$\")\n\nplt.title(\"Contour plot of hard boundary\")\nplt.colorbar()\nplt.show()\nprint(\"E_in(w) = {}\".format(E_in(Z,y,w)))\n\nw_poly = w","output":{"0":{"data":{"image/png":"3eb1fe59cebaf440727c2def2b8245973343af27","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"},"1":{"data":{"image/png":"b233534e9e415bac2b0e7c4706745061b0381b8b","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"},"2":{"name":"stdout","output_type":"stream","text":"E_in(w) = 0.075\n"}},"pos":4,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"383bdc","input":"X_original = np.copy(X)\ny_original = np.copy(y)\nX,y = blobs(N*10)\nZ_original = np.copy(Z)\nZ = pf.fit_transform(X[:,1:])\n\n\n#w = np.zeros(X.shape[1])\n#w,path = ms.grad_descent(w,X,y,ms.fast_grad_lr,eta=0.1,max_iter=10000)\n\nw = w_lin\n\ndef sigmoid(array):\n    \"\"\"Applies the sigmoid or logistic function to a numpy array\"\"\"\n    return 1/(1+np.exp(-array))\n\n\nxmin = np.min(X[:,1])-0.5\nxmax = np.max(X[:,1])+0.5\nymin = np.min(X[:,2])-0.5\nymax = np.max(X[:,2])+0.5\nx1 = np.arange(xmin,xmax,0.01)\nx2 = np.arange(ymin,ymax,0.01)\n\nx1v,x2v = np.meshgrid(x1,x2)\n\nvarz = [np.ones_like(x1v),x1v,x2v]\n\nz = np.zeros_like(x1v)\nfor ww,v in zip(w,varz):\n    z += ww*v\n\nzsoft = sigmoid(z)\n#z = np.sign(z)\nplt.contourf(x1v,x2v,zsoft,alpha=0.25)\nXg = X[y==1]\nXb = X[y==-1]\n\nplt.scatter(Xg[:,1],Xg[:,2],c=\"b\",alpha=0.5)\nplt.scatter(Xb[:,1],Xb[:,2],c='r',alpha=0.5)\nplt.xlabel(r\"$x_1$\")\nplt.ylabel(r\"$x_2$\")\n\nplt.title(\"Contour plot of soft boundary\")\nplt.colorbar()\nplt.show()\n\n\nzsoft = np.sign(z)\n#z = np.sign(z)\nplt.contourf(x1v,x2v,zsoft,alpha=0.25)\nXg = X[y==1]\nXb = X[y==-1]\n\nplt.scatter(Xg[:,1],Xg[:,2],c=\"b\",alpha=0.5)\nplt.scatter(Xb[:,1],Xb[:,2],c='r',alpha=0.5)\nplt.xlabel(r\"$x_1$\")\nplt.ylabel(r\"$x_2$\")\n\nplt.title(\"Contour plot of hard boundary\")\nplt.colorbar()\nplt.show()\n\n\nprint(\"E_in(w) = {}\".format(E_in(X,y,w)))\n","output":{"0":{"data":{"image/png":"b94ace25bb2cae89af36c1c040ff256daadb1496","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"},"1":{"data":{"image/png":"14e311e613e94964b94b7e2c23e37a70a5f34341","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"},"2":{"name":"stdout","output_type":"stream","text":"E_in(w) = 0.14875\n"}},"pos":5,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"674910","input":"w = w_poly\n\n\n\nxmin = np.min(X[:,1])-0.5\nxmax = np.max(X[:,1])+0.5\nymin = np.min(X[:,2])-0.5\nymax = np.max(X[:,2])+0.5\nx1 = np.arange(xmin,xmax,0.01)\nx2 = np.arange(ymin,ymax,0.01)\n\nx1v,x2v = np.meshgrid(x1,x2)\n\nvarz = np.concatenate((x1v.reshape(-1,1),x2v.reshape(-1,1)),axis=1)\nvarzp = pf.fit_transform(varz)\n\nz = (varzp.dot(w)).reshape(x1v.shape)\n\nzsoft = sigmoid(z)\n#z = np.sign(z)\nplt.contourf(x1v,x2v,zsoft,alpha=0.25)\nXg = X[y==1]\nXb = X[y==-1]\n\nplt.scatter(Xg[:,1],Xg[:,2],c=\"b\",alpha=0.5)\nplt.scatter(Xb[:,1],Xb[:,2],c='r',alpha=0.5)\nplt.xlabel(r\"$x_1$\")\nplt.ylabel(r\"$x_2$\")\n\nplt.title(\"Contour plot of soft boundary\")\nplt.colorbar()\nplt.show()\n\n\nzsoft = np.sign(z)\n#z = np.sign(z)\nplt.contourf(x1v,x2v,zsoft,alpha=0.25)\nXg = X[y==1]\nXb = X[y==-1]\n\nplt.scatter(Xg[:,1],Xg[:,2],c=\"b\",alpha=0.5)\nplt.scatter(Xb[:,1],Xb[:,2],c='r',alpha=0.5)\nplt.xlabel(r\"$x_1$\")\nplt.ylabel(r\"$x_2$\")\n\nplt.title(\"Contour plot of hard boundary\")\nplt.colorbar()\nplt.show()\nprint(\"E_in(w) = {}\".format(E_in(Z,y,w)))\n","output":{"0":{"data":{"image/png":"0de64b7759d4ce98d2857e89d92b40003b6960af","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"},"1":{"data":{"image/png":"0033d33f311e86b87f29737595d0f77c7c0caa00","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"},"2":{"name":"stdout","output_type":"stream","text":"E_in(w) = 0.09625\n"}},"pos":6,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"454ebb","input":"\n\ndef grad_descent(w,X,y,gradient,alpha=0.001,eta=0.1,max_iter=1000):\n    \"\"\" parameters: w, gradient\n\t\toptional: eta (default 0.1) max_iter (default 1000)\n    \"\"\" \n    history=[]\n    history.append(w)\n    for i in range(max_iter):\n        w = w-eta*gradient(w,X,y,alpha)\n        history.append(w)\n    return w,np.array(history)\n\n","pos":7,"type":"cell"}
{"cell_type":"code","id":"bf54b2","input":"","pos":11,"type":"cell"}
{"cell_type":"markdown","id":"d822ca","input":"### Fitting\n\nWe now use logistic regression to fit this data in a high dimensional space.\n","pos":2,"type":"cell"}
{"id":0,"time":1588946217378,"type":"user"}
{"last_load":1588946220704,"type":"file"}