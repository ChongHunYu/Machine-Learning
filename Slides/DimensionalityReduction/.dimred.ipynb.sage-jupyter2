{"backend_state":"running","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":83292160},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.2"}},"type":"settings"}
{"cell_type":"code","exec_count":49,"id":"275991","input":"\nD = np.loadtxt(open(\"num_data.txt\", \"rb\"), delimiter=\",\", skiprows=0)\n\ncol_names = [\"ID\",\"Diagnosis\",\"mean_radius\",\"std_err_radius\",\"worst_radius\",\n            \"mean_texture\",\"std_err_texture\",\"worst_texture\",\n            \"mean_perimeter\",\"std_err_perimeter\",\"worst_perimeter\",\n            \"mean_area\",\"std_err_area\",\"worst_area\",\n            \"mean_smoothness\",\"std_err_smoothness\",\"worst_smoothness\",\n            \"mean_compactness\",\"std_err_compactness\",\"worst_compactness\",\n            \"mean_concavity\",\"std_err_concavity\",\"worst_concavity\",\n            \"mean_concave_pts\",\"std_err_concave_pts\",\"worst_concave_pts\",\n            \"mean_symmetry\",\"std_err_symmetry\",\"worst_symmetry\",\n            \"mean_fractal_dim\",\"std_err_fractal_dim\",\"worst_fractal_dim\"]\nX = np.copy(D[:,2:])\ny = 2*D[:,1] -1  # so that y in {-1,1}, not {0,1}\n\nnames = col_names[2:]\nX.shape[1],len(names)\n","output":{"0":{"data":{"text/plain":"(30, 30)"},"exec_count":49,"output_type":"execute_result"}},"pos":7,"type":"cell"}
{"cell_type":"code","exec_count":50,"id":"f96173","input":"X_centered = X-X.mean(axis=0)\nX_centered.mean(axis=0)","output":{"0":{"data":{"text/plain":"array([-1.10608652e-14, -2.84841473e-14, -1.72328467e-14, -3.17883583e-13,\n        8.51325454e-17, -6.14500639e-17, -2.46824627e-17,  3.80968446e-17,\n       -5.04624657e-17, -1.07315055e-17, -2.75311896e-16, -4.76088608e-16,\n        3.76656332e-15, -3.37788770e-14, -2.21794610e-18, -6.67670371e-18,\n        2.64873068e-17, -1.67679774e-18, -2.67068148e-18, -7.98003286e-19,\n       -1.11826190e-14,  1.08204794e-14, -4.20581359e-14,  2.28772283e-13,\n       -1.18753864e-16, -3.46237391e-16,  1.18631915e-16, -1.32680432e-17,\n       -1.45314341e-16,  4.52552465e-17])"},"exec_count":50,"output_type":"execute_result"}},"pos":8,"type":"cell"}
{"cell_type":"code","exec_count":51,"id":"a8d9bf","input":"U,s,V = np.linalg.svd(X_centered)\nc1 = V.T[:,0]\nc2 = V.T[:,1]\nc1","output":{"0":{"data":{"text/plain":"array([-5.08623202e-03, -2.19657026e-03, -3.50763298e-02, -5.16826469e-01,\n       -4.23694535e-06, -4.05260047e-05, -8.19399539e-05, -4.77807775e-05,\n       -7.07804332e-06,  2.62155251e-06, -3.13742507e-04,  6.50984008e-05,\n       -2.23634150e-03, -5.57271669e-02,  8.05646029e-07, -5.51918197e-06,\n       -8.87094462e-06, -3.27915009e-06,  1.24101836e-06,  8.54530832e-08,\n       -7.15473257e-03, -3.06736622e-03, -4.94576447e-02, -8.52063392e-01,\n       -6.42005481e-06, -1.01275937e-04, -1.68928625e-04, -7.36658178e-05,\n       -1.78986262e-05, -1.61356159e-06])"},"exec_count":51,"output_type":"execute_result"}},"pos":9,"type":"cell"}
{"cell_type":"code","exec_count":52,"id":"fbf4e7","input":"## most important features?\nnp.array(names)[np.argsort(np.abs(c1))]","output":{"0":{"data":{"text/plain":"array(['std_err_concavity', 'worst_smoothness', 'mean_concavity',\n       'worst_fractal_dim', 'mean_area', 'worst_compactness',\n       'std_err_texture', 'mean_compactness', 'mean_symmetry',\n       'worst_perimeter', 'std_err_compactness', 'std_err_fractal_dim',\n       'worst_texture', 'std_err_perimeter', 'worst_area',\n       'mean_fractal_dim', 'mean_perimeter', 'std_err_symmetry',\n       'worst_symmetry', 'std_err_area', 'std_err_radius',\n       'mean_smoothness', 'mean_concave_pts', 'mean_radius',\n       'worst_concavity', 'worst_radius', 'std_err_concave_pts',\n       'std_err_smoothness', 'mean_texture', 'worst_concave_pts'],\n      dtype='<U19')"},"exec_count":52,"output_type":"execute_result"}},"pos":10,"type":"cell"}
{"cell_type":"code","exec_count":53,"id":"02043b","input":"W_2 = V.T[:,:2]\nX2D = X_centered.dot(W_2)\nX2D.shape","output":{"0":{"data":{"text/plain":"(569, 2)"},"exec_count":53,"output_type":"execute_result"}},"pos":11,"type":"cell"}
{"cell_type":"code","exec_count":54,"id":"045e00","input":"\nimport matplotlib.pyplot as plt\n\nfor yy in set(y):\n    XX = X2D[y==yy]\n    plt.scatter(XX[:,0],XX[:,1],alpha=0.25)\nplt.show()    ","output":{"0":{"data":{"image/png":"eaa982805150768849d61e898b906925fe31880c","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":12,"type":"cell"}
{"cell_type":"code","exec_count":55,"id":"ce6955","input":"from sklearn.decomposition import PCA\n\npca = PCA()\nXpca = pca.fit_transform(X) ## autocentered\nXpca.shape","output":{"0":{"data":{"text/plain":"(569, 30)"},"exec_count":55,"output_type":"execute_result"}},"pos":13,"type":"cell"}
{"cell_type":"code","exec_count":56,"id":"cdc07b","input":"pca.explained_variance_ratio_","output":{"0":{"data":{"text/plain":"array([9.82044672e-01, 1.61764899e-02, 1.55751075e-03, 1.20931964e-04,\n       8.82724536e-05, 6.64883951e-06, 4.01713682e-06, 8.22017197e-07,\n       3.44135279e-07, 1.86018721e-07, 6.99473205e-08, 1.65908880e-08,\n       6.99641650e-09, 4.78318306e-09, 2.93549214e-09, 1.41684927e-09,\n       8.29577731e-10, 5.20405883e-10, 4.08463983e-10, 3.63313378e-10,\n       1.72849737e-10, 1.27487508e-10, 7.72682973e-11, 6.28357718e-11,\n       3.57302295e-11, 2.76396041e-11, 8.14452259e-12, 6.30211541e-12,\n       4.43666945e-12, 1.55344680e-12])"},"exec_count":56,"output_type":"execute_result"}},"pos":14,"type":"cell"}
{"cell_type":"code","exec_count":57,"id":"e4fd8c","input":"np.cumsum(pca.explained_variance_ratio_)","output":{"0":{"data":{"text/plain":"array([0.98204467, 0.99822116, 0.99977867, 0.9998996 , 0.99998788,\n       0.99999453, 0.99999854, 0.99999936, 0.99999971, 0.99999989,\n       0.99999996, 0.99999998, 0.99999999, 0.99999999, 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ])"},"exec_count":57,"output_type":"execute_result"}},"pos":15,"type":"cell"}
{"cell_type":"code","exec_count":58,"id":"a49fad","input":"from sklearn.datasets import fetch_openml\nimport matplotlib.pyplot as plt\n\nX, y = fetch_openml('mnist_784', version=1, return_X_y=True)","pos":16,"type":"cell"}
{"cell_type":"code","exec_count":59,"id":"5ad1d8","input":"X.shape","output":{"0":{"data":{"text/plain":"(70000, 784)"},"exec_count":59,"output_type":"execute_result"}},"pos":17,"type":"cell"}
{"cell_type":"code","exec_count":60,"id":"0b6e12","input":"pca = PCA()\nXpca = pca.fit_transform(X) ## autocentered\nXpca.shape","output":{"0":{"data":{"text/plain":"(70000, 784)"},"exec_count":60,"output_type":"execute_result"}},"pos":18,"type":"cell"}
{"cell_type":"code","exec_count":61,"id":"616a5a","input":"np.cumsum(pca.explained_variance_ratio_)[:50]","output":{"0":{"data":{"text/plain":"array([0.09746116, 0.16901561, 0.23051091, 0.28454476, 0.3334341 ,\n       0.37648637, 0.40926898, 0.4381654 , 0.46574904, 0.48917044,\n       0.51023733, 0.53061286, 0.5476835 , 0.5646237 , 0.58045752,\n       0.59532097, 0.60851456, 0.6213047 , 0.63317742, 0.64470679,\n       0.65536719, 0.66546513, 0.67505665, 0.684153  , 0.69298586,\n       0.70137405, 0.70947236, 0.71732954, 0.72473217, 0.73163231,\n       0.73819375, 0.74464845, 0.75065664, 0.75651276, 0.7621803 ,\n       0.767615  , 0.77266217, 0.77753297, 0.78232252, 0.78699846,\n       0.79154214, 0.79599132, 0.80017349, 0.80413513, 0.8079722 ,\n       0.81173005, 0.81534432, 0.81883456, 0.82222188, 0.82541884])"},"exec_count":61,"output_type":"execute_result"}},"pos":19,"type":"cell"}
{"cell_type":"code","exec_count":62,"id":"09d492","input":"\nplt.plot(np.cumsum(pca.explained_variance_ratio_))\nplt.xlabel('number of components')\nplt.ylabel('cumulative explained variance')\nplt.title(\"Explained variance for breast cancer dataset\")\nplt.show()","output":{"0":{"data":{"image/png":"fc12e9154ed57aac20085e9760a9f1d6b4072f3e","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":20,"type":"cell"}
{"cell_type":"code","exec_count":63,"id":"62ebdb","input":"pca.components_\n\n_, axes = plt.subplots(2, 4)\nimages_and_labels = list(zip(pca.components_, range(8)))\nfor ax, (image, label) in zip(axes[0, :], images_and_labels[:4]):\n    ax.set_axis_off()\n    ax.imshow(image.reshape(28,28), cmap=plt.cm.gray_r, interpolation='nearest')\n    ax.set_title('PC : {}'.format(label))\nfor ax, (image, label) in zip(axes[1, :], images_and_labels[4:8]):\n    ax.set_axis_off()\n    ax.imshow(image.reshape(28,28), cmap=plt.cm.gray_r, interpolation='nearest')\n    ax.set_title('PC : {}'.format(label))","output":{"0":{"data":{"image/png":"13caa08ee502cd5063320f2dc97715b33b15d082","text/plain":"<Figure size 432x288 with 8 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":21,"type":"cell"}
{"cell_type":"code","exec_count":64,"id":"6c7911","input":"pca = PCA(n_components=2)\nXpca = pca.fit_transform(X) ## autocentered\nXpca.shape","output":{"0":{"data":{"text/plain":"(70000, 2)"},"exec_count":64,"output_type":"execute_result"}},"pos":22,"type":"cell"}
{"cell_type":"code","exec_count":65,"id":"00c866","input":"\nfor yy in set(y):\n    XX = Xpca[y==yy]\n    plt.scatter(XX[:,0],XX[:,1],alpha=0.5,label=yy)\nplt.legend()    \nplt.show()  ","output":{"0":{"data":{"image/png":"034ed094ec0b16d931a4b1f61cf510854cc9f81f","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":23,"type":"cell"}
{"cell_type":"code","exec_count":67,"id":"3ac9fe","input":"from sklearn.model_selection import train_test_split\n\nX_train,X_test,y_train,y_test = train_test_split(X,y)\n\n\npca = PCA(n_components=0.95)\nXpca_train = pca.fit_transform(X_train) ## autocentered\nXpca_test = pca.transform(X_test)\n\nXpca_train.shape","output":{"0":{"data":{"text/plain":"(52500, 153)"},"exec_count":67,"output_type":"execute_result"}},"pos":25,"type":"cell"}
{"cell_type":"code","exec_count":68,"id":"c39a6a","input":"\nfrom sklearn.ensemble import RandomForestClassifier\nmodel = RandomForestClassifier()\nmodel.fit(X_train,y_train)\nmodel.score(X_test,y_test)\n","output":{"0":{"data":{"text/plain":"0.9673714285714285"},"exec_count":68,"output_type":"execute_result"}},"pos":26,"type":"cell"}
{"cell_type":"code","exec_count":69,"id":"1ccd02","input":"model = RandomForestClassifier()\nmodel.fit(Xpca_train,y_train)\nmodel.score(Xpca_test,y_test)\n","output":{"0":{"data":{"text/plain":"0.9463428571428572"},"exec_count":69,"output_type":"execute_result"}},"pos":27,"type":"cell"}
{"cell_type":"code","exec_count":70,"id":"5c91f6","input":"#%timeit model.fit(Xpca_train,y_train)\n#1min 5s ± 4.43 s per loop (mean ± std. dev. of 7 runs, 1 loop each)\n","pos":28,"type":"cell"}
{"cell_type":"code","exec_count":71,"id":"a624a5","input":"#%timeit model.fit(X_train,y_train)\n#23.6 s ± 422 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\n","pos":29,"type":"cell"}
{"cell_type":"code","exec_count":72,"id":"e96b03","input":"X_recovered = pca.inverse_transform(Xpca_train)","pos":31,"type":"cell"}
{"cell_type":"code","exec_count":73,"id":"ed04f4","input":"_, axes = plt.subplots(2, 4)\nimages_and_labels = list(zip(X_train, y_train))\nfor ax, (image, label) in zip(axes[0, :], images_and_labels[:4]):\n    ax.set_axis_off()\n    ax.imshow(image.reshape(28,28), cmap=plt.cm.gray_r, interpolation='nearest')\n    ax.set_title('Training: {}'.format(label))\nfor ax, (image, label) in zip(axes[1, :], images_and_labels[4:8]):\n    ax.set_axis_off()\n    ax.imshow(image.reshape(28,28), cmap=plt.cm.gray_r, interpolation='nearest')\n    ax.set_title('Training: {}'.format(label))","output":{"0":{"data":{"image/png":"a93023adab3a31c9db7600a19f34729e9856fc59","text/plain":"<Figure size 432x288 with 8 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":32,"type":"cell"}
{"cell_type":"code","exec_count":74,"id":"2e74b8","input":"_, axes = plt.subplots(2, 4)\nimages_and_labels = list(zip(X_recovered, y_train))\nfor ax, (image, label) in zip(axes[0, :], images_and_labels[:4]):\n    ax.set_axis_off()\n    ax.imshow(image.reshape(28,28), cmap=plt.cm.gray_r, interpolation='nearest')\n    ax.set_title('Training: {}'.format(label))\nfor ax, (image, label) in zip(axes[1, :], images_and_labels[4:8]):\n    ax.set_axis_off()\n    ax.imshow(image.reshape(28,28), cmap=plt.cm.gray_r, interpolation='nearest')\n    ax.set_title('Training: {}'.format(label))","output":{"0":{"data":{"image/png":"b089823a0f3f0dfc7513f147c2dcd48728cdde18","text/plain":"<Figure size 432x288 with 8 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":33,"type":"cell"}
{"cell_type":"code","exec_count":75,"id":"435608","input":"from sklearn.manifold import LocallyLinearEmbedding\n\n#lle = LocallyLinearEmbedding(n_components=2,n_neighbors=10,n_jobs=-1)\n#Xlle = lle.fit_transform(X)\n","pos":36,"type":"cell"}
{"cell_type":"code","exec_count":76,"id":"3896a4","input":"#for yy in set(y):\n#    XX = Xlle[y==yy]\n#    plt.scatter(XX[:,0],XX[:,1],alpha=0.5,label=yy)\n#plt.legend()    \n#plt.show()  ","pos":37,"type":"cell"}
{"cell_type":"code","exec_count":77,"id":"4163b8","input":"## Breast cancer\nimport matplotlib.pyplot as plt\nimport numpy as np\nX = np.copy(D[:,2:])","pos":38,"type":"cell"}
{"cell_type":"code","exec_count":81,"id":"fda672","input":"from sklearn.manifold import LocallyLinearEmbedding\n\nlle = LocallyLinearEmbedding(n_components=2,n_neighbors=10)\nXlle = lle.fit_transform(X)\ny = 2*D[:,1] -1  # so that y in {-1,1}, not {0,1}\n\nfor yy in set(y):\n    XX = Xlle[y==yy]\n    plt.scatter(XX[:,0],XX[:,1],alpha=0.5,label=yy)\nplt.legend()    \nplt.show()  ","output":{"0":{"data":{"image/png":"1a5c8ca35f4863fcd5471569d6cc15c9b658b27d","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":39,"type":"cell"}
{"cell_type":"code","exec_count":83,"id":"970e24","input":"from sklearn.manifold import TSNE\nXtsne = TSNE(n_components=2).fit_transform(X)","pos":43,"type":"cell"}
{"cell_type":"code","exec_count":84,"id":"834c1f","input":"\nfor yy in set(y):\n    XX = Xtsne[y==yy]\n    plt.scatter(XX[:,0],XX[:,1],alpha=0.5,label=yy)\nplt.legend()    \nplt.show()  ","output":{"0":{"data":{"image/png":"d5c15baeafbb8041c6db9dd3aea1f00061290d27","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":44,"type":"cell"}
{"cell_type":"code","exec_count":87,"id":"15bc16","input":"from sklearn.manifold import Isomap\n\nX_iso = Isomap(n_components =2).fit_transform(X)\n\nfor yy in set(y):\n    XX = X_iso[y==yy]\n    plt.scatter(XX[:,0],XX[:,1],alpha=0.5,label=yy)\nplt.legend()    \nplt.show()  \n","output":{"0":{"data":{"image/png":"ebfd6e7e62f0bcc0bd304399bb2cb871f5717ab6","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":46,"type":"cell"}
{"cell_type":"code","exec_count":88,"id":"29ec75","input":"from sklearn.manifold import MDS\n\nX_mds = MDS(n_components=2).fit_transform(X)\n\nfor yy in set(y):\n    XX = X_mds[y==yy]\n    plt.scatter(XX[:,0],XX[:,1],alpha=0.5,label=yy)\nplt.legend()    \nplt.show()  \n","output":{"0":{"data":{"image/png":"9b920c763e0c077d6923f3570385733528376cb9","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":48,"type":"cell"}
{"cell_type":"code","exec_count":89,"id":"a2a345","input":"\"\"\"X_centered = X-X.mean(axis=0)\nX_centered.mean(axis=0)\n\nU,s,V = np.linalg.svd(X_centered)\nc1 = V.T[:,0]\nc2 = V.T[:,1]\nc1\"\"\"\n### Computationally infeasible","output":{"0":{"data":{"text/plain":"'X_centered = X-X.mean(axis=0)\\nX_centered.mean(axis=0)\\n\\nU,s,V = np.linalg.svd(X_centered)\\nc1 = V.T[:,0]\\nc2 = V.T[:,1]\\nc1'"},"exec_count":89,"output_type":"execute_result"}},"pos":24,"type":"cell"}
{"cell_type":"code","exec_count":92,"id":"bfe222","input":"\"\"\"Average distance of points in a hypercube of dimension d\"\"\"\n\nimport numpy as np\n\nd = 1000\n\ndists = []\nfor i in range(1000):\n    v = np.random.uniform(size=d)\n    w = np.random.uniform(size=d)\n    dists.append(np.linalg.norm(v-w))\nnp.mean(dists)","output":{"0":{"data":{"text/plain":"12.912612052476554"},"exec_count":92,"output_type":"execute_result"}},"pos":2,"type":"cell"}
{"cell_type":"code","id":"33e537","input":"","pos":49,"type":"cell"}
{"cell_type":"markdown","id":"048da6","input":"### Pictures...\n\nSome images from Geron's *Hands on Machine Learning*\n\nhttps://github.com/ageron/handson-ml/blob/master/08_dimensionality_reduction.ipynb\n\n","pos":4,"type":"cell"}
{"cell_type":"markdown","id":"089f10","input":"### Locally Linear Embedding\n\nhttps://cs.nyu.edu/~roweis/lle/algorithm.html\n\nFirst measure how each training instance linearly relates to its closest neighbors.\n\nThen look for a low dimensional representation where these local relationships are best preserved.\n\nThis is particularly good at \"unrolling\" manifolds. \n\nFirst:\n\nFor each $\\bar{x}$ in $X$, identify $k$ closest neighbors ($k=10$?)\n\nSecond:\n\nCompute\n\n$$\\hat{W} = \\text{argmin}_W \\sum_{i=1}^N |\\!|\\bar{x}_i - \\sum_{j=1}^N w_{i,j}\\bar{x}_j |\\!|^2$$\n\nSubject to:\n\n$w_{i,j} = 0$ if $\\bar{x}_j$ is not in knn $\\bar{x}_i$.\n\n$\\sum_{j=1}^N w_{i,j} =1$ for $i=1,2,\\ldots,N$.\n\nNow $\\hat{W}$ stores local linear relationships.\n\nNow compute\n\n$$\\hat{Z} = \\text{argmin}_Z \\sum_{i=1}^N |\\!|\\bar{z}_i - \\sum_{j=1}^N w_{i,j}\\bar{z}_j |\\!|^2$$\n\n![img](lle.gif)","pos":35,"type":"cell"}
{"cell_type":"markdown","id":"464dca","input":"### \"Decompressing\" from the PCA transform\n\nBy inverting the PCA transformation we can visualize how much information is lost in the projection.\n\n$$X_{\\text{recovered}} = X_{d-\\text{proj}}\\cdot W_d^T$$\n\nwhere $W_d = $`V.T[:,:d]`","pos":30,"type":"cell"}
{"cell_type":"markdown","id":"4e98a8","input":"\nhttps://blog.datawow.io/the-curse-of-dimensionality-c99409eb58e9\n\nHyperspheres inscribed in hypercubes...\n\n\n![img](sphere.png)\n\n![img](hypersphere.png)\n\n![img](cod.jpeg)\n\nhttps://www.kdnuggets.com/2015/03/deep-learning-curse-dimensionality-autoencoders.html/2\n\n\n![img](cod2.png)","pos":1,"type":"cell"}
{"cell_type":"markdown","id":"5d3aae","input":"### t-Distributed Stochastic Neighbor Embedding (t-SNE)\n\n\"Reduces dimensionality while trying to keep similar instances close and dissimilar instances apart\"\n","pos":42,"type":"cell"}
{"cell_type":"markdown","id":"8f397f","input":"### Manifold Learning\n\nhttps://scikit-learn.org/stable/modules/manifold.html\n\n","pos":34,"type":"cell"}
{"cell_type":"markdown","id":"8fc0d4","input":"### Nonintuitive properties of high dimensional space\n\n","pos":0,"type":"cell"}
{"cell_type":"markdown","id":"956e2c","input":"### LLE run time\n\n$O(N\\log(N)d\\log(k))$ to find KNN\n\n$O(Ndk^3)$ for computing $\\hat{W}$\n\n$O(dN^2)$ for computing $\\hat{Z}$\n","pos":40,"type":"cell"}
{"cell_type":"markdown","id":"ac18ce","input":"### Axis oriented data\n\nAnother use for PCA is to \"rectify\" the data with respect to the coordinate axes.\n\nThis may make certain algorithms work better (eg tree based methods).\n\nhttp://randomanalyses.blogspot.com/2012/01/principal-components-analysis.html\n\n![img](matlab.png)\n\n","pos":6,"type":"cell"}
{"cell_type":"markdown","id":"c4320e","input":"### Multidimensional Scaling\n\n\"reduces dimensionality while trying to preserve the distances between the instances\"\n","pos":47,"type":"cell"}
{"cell_type":"markdown","id":"cda7b0","input":"### Other methods...\n","pos":41,"type":"cell"}
{"cell_type":"markdown","id":"dceca1","input":"![img](geron1.png)\n\n![img](geron2.png)","pos":5,"type":"cell"}
{"cell_type":"markdown","id":"e0a1f3","input":"### Principal Components Analysis (PCA)\n\nUses singluar value decomposition:\n\n$$ X = U\\Sigma V^T$$\n\nHere $U$ is $N\\times N$ and unitary\n\n$\\Sigma$ is $N \\times d$ and rectangular diagonal\n\n$V$ is $d\\times d$ and unitary\n\nThe columns of $V$ are the *principal components*.\n\nThe principal components are an orthogonal basis for the data space.\n\nProjection onto the first $k$ principal components reduces dimensionality while preserving maximal variance.\n\nThis gives a low dimensional version of the data which retains as much information as possible.","pos":3,"type":"cell"}
{"cell_type":"markdown","id":"e44b37","input":"### Isomap\n\n\"creates a graph by connecting each instance to its nearest neighbors, then reduces dimensionality while trying to preserve geodesic (graph) distances between the instances\"","pos":45,"type":"cell"}
{"id":0,"time":1589852965922,"type":"user"}
{"last_load":1589852967918,"type":"file"}