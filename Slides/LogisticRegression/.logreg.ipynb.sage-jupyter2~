{"backend_state":"running","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":160358400},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.5"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1582764503774,"exec_count":20,"id":"eb37c5","input":"np.sum(probabilities,axis=1)","kernel":"python3","output":{"0":{"data":{"text/plain":"array([1., 1., 1., ..., 1., 1., 1.])"},"exec_count":20}},"pos":2,"start":1582764503768,"state":"done","type":"cell"}
{"cell_type":"code","end":1582764508341,"exec_count":21,"id":"fc16e5","input":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.datasets import make_blobs\nnp.random.seed(999)\nX,y = make_blobs(centers=2)\nclf = LogisticRegression()\nclf.fit(X,y)\nw0,w1,w2 = clf.intercept_[0],clf.coef_[0,0],clf.coef_[0,1]\nw0,w1,w2","kernel":"python3","output":{"0":{"data":{"text/plain":"(-0.9414641871380997, -0.9723795030999837, 0.12987860570467213)"},"exec_count":21}},"pos":0,"start":1582764508331,"state":"done","type":"cell"}
{"cell_type":"code","end":1582764731603,"exec_count":28,"id":"73404d","input":"import matplotlib.pyplot as plt\nimport numpy as np\nyes = y==1\nno = ~yes\n\nxmin = np.min(X[:,0])*1.1\nxmax = np.max(X[:,0])*1.1\nymin = np.min(X[:,1])*1.1\nymax = np.max(X[:,1])*1.1\n\nline = (-w1*xx-w0)/w2\nplt.scatter(X[yes][:,0],X[yes][:,1])\nplt.scatter(X[no][:,0],X[no][:,1])\n#plt.plot(xx,line)\n\nxx = np.linspace(xmin, xmax, 100)\nyy = np.linspace(ymin, ymax, 100).T\nxx, yy = np.meshgrid(xx, yy)\nXfull = np.c_[xx.ravel(), yy.ravel()]\nprobabilities = (clf.predict_proba(Xfull)>0.5)*2-1\nimshow_handle = plt.imshow(probabilities[:, 1].reshape((100, 100)),\n                                   extent=(xmin,xmax,ymin,ymax), origin='lower')\n\nplt.title(\"Logistic Regression--Hard Threshold\")\n\nax = plt.axes([0.15,-.15, 0.7, 0.05])\nplt.colorbar(imshow_handle, cax=ax, orientation='horizontal')\n\nplt.show()","kernel":"python3","output":{"0":{"data":{"image/png":"b1bb120e0675417e0e5fa1aa0d8455d3141f3316","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"image/png":{"height":299,"width":362}}}},"pos":3,"start":1582764730896,"state":"done","type":"cell"}
{"cell_type":"code","end":1582764744387,"exec_count":29,"id":"a68a48","input":"import matplotlib.pyplot as plt\nimport numpy as np\nyes = y==1\nno = ~yes\n\nxmin = np.min(X[:,0])*1.1\nxmax = np.max(X[:,0])*1.1\nymin = np.min(X[:,1])*1.1\nymax = np.max(X[:,1])*1.1\n\nline = (-w1*xx-w0)/w2\nplt.scatter(X[yes][:,0],X[yes][:,1])\nplt.scatter(X[no][:,0],X[no][:,1])\n#plt.plot(xx,line)\n\nxx = np.linspace(xmin, xmax, 100)\nyy = np.linspace(ymin, ymax, 100).T\nxx, yy = np.meshgrid(xx, yy)\nXfull = np.c_[xx.ravel(), yy.ravel()]\nprobabilities = clf.predict_proba(Xfull)\nimshow_handle = plt.imshow(probabilities[:, 1].reshape((100, 100)),\n                                   extent=(xmin,xmax,ymin,ymax), origin='lower')\n\nplt.title(\"Logistic Regression -- soft threshold\")\n\nax = plt.axes([0.15,-.15, 0.7, 0.05])\nplt.colorbar(imshow_handle, cax=ax, orientation='horizontal')\n\nplt.show()","kernel":"python3","output":{"0":{"data":{"image/png":"a7094dcabeb4d2416049851941f113a0983a0660","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"image/png":{"height":299,"width":362}}}},"pos":1,"start":1582764743433,"state":"done","type":"cell"}
{"id":"76e833","input":"","pos":4,"type":"cell"}
{"id":0,"time":1582764361781,"type":"user"}
{"last_load":1582764361935,"type":"file"}