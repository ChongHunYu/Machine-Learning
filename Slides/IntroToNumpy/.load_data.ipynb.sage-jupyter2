{"backend_state":"running","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":81043456},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.5"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"31dfda","input":"","pos":18,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"8eb0b7","input":"","pos":14,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"af7b1d","input":"","pos":19,"type":"cell"}
{"cell_type":"code","exec_count":1,"id":"87fb1c","input":"#I'm going to use this:\n\n#  https://archive.ics.uci.edu/ml/datasets/Breast+Cancer+Wisconsin+%28Original%29\n\nimport numpy as np\nnp.loadtxt(open(\"wdbc.data.txt\", \"r\"), delimiter=\",\", skiprows=0)\n\n#Boom (There will be problems here, because benign=\"B\" and malignant=\"M\" cannot be converted to floats)","output":{"0":{"ename":"ValueError","evalue":"could not convert string to float: 'M'","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-1-c5a150b4ddcd>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mnumpy\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloadtxt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"wdbc.data.txt\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"r\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdelimiter\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\",\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mskiprows\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      7\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;31m#Boom (There will be problems here, because benign=\"B\" and malignant=\"M\" cannot be converted to floats)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/ext/anaconda5/lib/python3.6/site-packages/numpy/lib/npyio.py\u001b[0m in \u001b[0;36mloadtxt\u001b[0;34m(fname, dtype, comments, delimiter, converters, skiprows, usecols, unpack, ndmin, encoding)\u001b[0m\n\u001b[1;32m   1099\u001b[0m         \u001b[0;31m# converting the data\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1100\u001b[0m         \u001b[0mX\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1101\u001b[0;31m         \u001b[0;32mfor\u001b[0m \u001b[0mx\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mread_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_loadtxt_chunksize\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1102\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mX\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1103\u001b[0m                 \u001b[0mX\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/ext/anaconda5/lib/python3.6/site-packages/numpy/lib/npyio.py\u001b[0m in \u001b[0;36mread_data\u001b[0;34m(chunk_size)\u001b[0m\n\u001b[1;32m   1026\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1027\u001b[0m             \u001b[0;31m# Convert each value according to its column and store\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1028\u001b[0;31m             \u001b[0mitems\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mconv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mval\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mconv\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mval\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mconverters\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvals\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1029\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1030\u001b[0m             \u001b[0;31m# Then pack it according to the dtype's nesting\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/ext/anaconda5/lib/python3.6/site-packages/numpy/lib/npyio.py\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m   1026\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1027\u001b[0m             \u001b[0;31m# Convert each value according to its column and store\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1028\u001b[0;31m             \u001b[0mitems\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mconv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mval\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mconv\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mval\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mconverters\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvals\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1029\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1030\u001b[0m             \u001b[0;31m# Then pack it according to the dtype's nesting\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/ext/anaconda5/lib/python3.6/site-packages/numpy/lib/npyio.py\u001b[0m in \u001b[0;36mfloatconv\u001b[0;34m(x)\u001b[0m\n\u001b[1;32m    744\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;34m'0x'\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    745\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mfloat\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfromhex\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 746\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mfloat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    747\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    748\u001b[0m     \u001b[0mtyp\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtype\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: could not convert string to float: 'M'"]}},"pos":1,"type":"cell"}
{"cell_type":"code","exec_count":10,"id":"ec3c74","input":"np.corrcoef(x,y)","output":{"0":{"data":{"text/plain":"array([[1.        , 0.32378189],\n       [0.32378189, 1.        ]])"},"exec_count":10,"output_type":"execute_result"}},"pos":13,"type":"cell"}
{"cell_type":"code","exec_count":15,"id":"a6904f","input":"x  = D[:,3]\ny  = D[:,2]\n\nplt.scatter(x,y,c=D[:,1])\nplt.show()","output":{"0":{"data":{"image/png":"dc88b317cd76c68609eb242d15d294e906f50996"},"exec_count":15,"metadata":{"image/png":{"height":250,"width":370},"needs_background":"light"},"output_type":"execute_result"}},"pos":12,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"7bc5df","input":"import numpy as np\nnp.array(['a'])","output":{"0":{"data":{"text/plain":"array(['a'], dtype='<U1')"},"exec_count":2,"output_type":"execute_result"}},"pos":3,"type":"cell"}
{"cell_type":"code","exec_count":24,"id":"0eaded","input":"x  = D[:,3]\ny  = D[:,2]\n\nplt.scatter(x,y,c=D[:,1])\nplt.show()","output":{"0":{"data":{"image/png":"dc88b317cd76c68609eb242d15d294e906f50996"},"exec_count":24,"metadata":{"image/png":{"height":250,"width":370},"needs_background":"light"},"output_type":"execute_result"}},"pos":15,"type":"cell"}
{"cell_type":"code","exec_count":25,"id":"42e09c","input":"\nfeatures = [2,3,19]\nplt.figure(1,figsize=(10,10))\nsubplot = 1\nfor f in features:\n    for s in features:\n        plt.subplot(len(features), len(features), subplot)\n        subplot += 1\n        x  = D[:,f]\n        y  = D[:,s]\n        plt.scatter(x,y,c=D[:,1])\nplt.show()","output":{"0":{"data":{"image/png":"637690ad5742b32b03e55d038720c783dca21191"},"exec_count":25,"metadata":{"image/png":{"height":576,"width":594},"needs_background":"light"},"output_type":"execute_result"}},"pos":17,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"ee99ad","input":"fp = open(\"wdbc.data.txt\",\"r\")\ncsv_lines = fp.readlines()\n\nsymb = set()\nfor line in csv_lines[:]:\n    line = line.split(',')\n    symb.add(line[1])\nprint( symb    )\nfp.close()","output":{"0":{"name":"stdout","output_type":"stream","text":"{'B', 'M'}\n"}},"pos":4,"type":"cell"}
{"cell_type":"code","exec_count":30,"id":"b5e826","input":"x  = D[:,8]\ny  = D[:,20]\n\nmalignant = D[:,1]==1\nxm = x[malignant]\nym = y[malignant]\n\nbenign = D[:,1]==0\nxb = x[benign]\nyb = y[benign]\n\nplt.scatter(xm,ym,label=\"malignant\")\nplt.scatter(xb,yb,label=\"benign\")\n\nplt.legend()\nplt.show()","output":{"0":{"data":{"image/png":"d32a7a3acaeafd500596cce6fa311262f35a690b"},"exec_count":30,"metadata":{"image/png":{"height":250,"width":380},"needs_background":"light"},"output_type":"execute_result"}},"pos":16,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"0c9bb1","input":"fp = open(\"wdbc.data.txt\")\ndata = fp.read()\ndata = data.replace(\"M\",'1')\ndata = data.replace(\"B\",'0')\nfp.close()\nfp = open(\"num_data.txt\",\"w\")\nfp.write(data)\nfp.close()","pos":6,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"b3f6cf","input":"D = np.loadtxt(open(\"num_data.txt\", \"rb\"), delimiter=\",\", skiprows=0)\nD[:2]","output":{"0":{"data":{"text/plain":"array([[8.42302e+05, 1.00000e+00, 1.79900e+01, 1.03800e+01, 1.22800e+02,\n        1.00100e+03, 1.18400e-01, 2.77600e-01, 3.00100e-01, 1.47100e-01,\n        2.41900e-01, 7.87100e-02, 1.09500e+00, 9.05300e-01, 8.58900e+00,\n        1.53400e+02, 6.39900e-03, 4.90400e-02, 5.37300e-02, 1.58700e-02,\n        3.00300e-02, 6.19300e-03, 2.53800e+01, 1.73300e+01, 1.84600e+02,\n        2.01900e+03, 1.62200e-01, 6.65600e-01, 7.11900e-01, 2.65400e-01,\n        4.60100e-01, 1.18900e-01],\n       [8.42517e+05, 1.00000e+00, 2.05700e+01, 1.77700e+01, 1.32900e+02,\n        1.32600e+03, 8.47400e-02, 7.86400e-02, 8.69000e-02, 7.01700e-02,\n        1.81200e-01, 5.66700e-02, 5.43500e-01, 7.33900e-01, 3.39800e+00,\n        7.40800e+01, 5.22500e-03, 1.30800e-02, 1.86000e-02, 1.34000e-02,\n        1.38900e-02, 3.53200e-03, 2.49900e+01, 2.34100e+01, 1.58800e+02,\n        1.95600e+03, 1.23800e-01, 1.86600e-01, 2.41600e-01, 1.86000e-01,\n        2.75000e-01, 8.90200e-02]])"},"exec_count":5,"output_type":"execute_result"}},"pos":8,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"61fafb","input":"D.shape","output":{"0":{"data":{"text/plain":"(569, 32)"},"exec_count":6,"output_type":"execute_result"}},"pos":9,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"b6e68b","input":"D.mean(axis=0)","output":{"0":{"data":{"text/plain":"array([3.03718314e+07, 3.72583480e-01, 1.41272917e+01, 1.92896485e+01,\n       9.19690334e+01, 6.54889104e+02, 9.63602812e-02, 1.04340984e-01,\n       8.87993158e-02, 4.89191459e-02, 1.81161863e-01, 6.27976098e-02,\n       4.05172056e-01, 1.21685343e+00, 2.86605923e+00, 4.03370791e+01,\n       7.04097891e-03, 2.54781388e-02, 3.18937163e-02, 1.17961371e-02,\n       2.05422988e-02, 3.79490387e-03, 1.62691898e+01, 2.56772232e+01,\n       1.07261213e+02, 8.80583128e+02, 1.32368594e-01, 2.54265044e-01,\n       2.72188483e-01, 1.14606223e-01, 2.90075571e-01, 8.39458172e-02])"},"exec_count":7,"output_type":"execute_result"}},"pos":10,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"42d75b","input":"import numpy as np\nimport matplotlib.pyplot as plt\n\nx  = D[:,1]\ny  = D[:,2]\n\nplt.scatter(x,y)\nplt.show()\n#for z in zip(x,y):\n#    print (z)","output":{"0":{"data":{"image/png":"a5ca00e636fbdffc83dfde6785f1e058d32c8be6"},"exec_count":8,"metadata":{"image/png":{"height":250,"width":370},"needs_background":"light"},"output_type":"execute_result"}},"pos":11,"type":"cell"}
{"cell_type":"markdown","id":"12c638","input":"# A fix\n\nWe can awkwardly fix the problem simply by replacing the offending characters with numbers.\n","pos":5,"type":"cell"}
{"cell_type":"markdown","id":"5a3cb3","input":"## Guided exercise...\n\nWe will load and explore a data set from the UCI Machine Learning Repository...\n\n[https://archive.ics.uci.edu/ml/datasets.html](https://archive.ics.uci.edu/ml/datasets.html)","pos":0,"type":"cell"}
{"cell_type":"markdown","id":"6e95ae","input":"# How now?\n\nNow the naive CSV reader works fine.\n","pos":7,"type":"cell"}
{"cell_type":"markdown","id":"71a884","input":"# Why go boom?\n\nThe problem, as you can see from the cell below, is not that numpy can't handle string.\n\nThe problem is just that the CSV reader isn't very good.  \n\nWe go on to find the characters that are blowing things up.\n","pos":2,"type":"cell"}
{"id":0,"time":1582511591889,"type":"user"}
{"last_load":1582511592119,"type":"file"}