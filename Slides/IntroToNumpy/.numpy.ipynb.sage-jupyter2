{"backend_state":"running","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":83488768},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.9"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"3fde0c","input":"","pos":126,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"d13052","input":"","pos":2,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"e84648","input":"","pos":138,"type":"cell"}
{"cell_type":"code","exec_count":1,"id":"33180a","input":"#height #weight #sex\ndata = [\n[150.701, 62.5,'F'],  #alice\n[173.101, 70.5,'M'],  #bob\n[140.19, 51.5,'F']    #carol\n]\n\ndata[1][0]\ndata[2][0] #Carol's height\ndata[0][2] #Alice's sex\n\n\nfor i,name in enumerate([\"alice\",\"bob\",\"carol\"]):\n    for j,propertyx in enumerate([\"height\",\"weight\",\"sex\"]):\n        print(\"{}'s {} is {}\".format(name,propertyx,data[i][j]))","output":{"0":{"name":"stdout","output_type":"stream","text":"alice's height is 150.701\nalice's weight is 62.5\nalice's sex is F\nbob's height is 173.101\nbob's weight is 70.5\nbob's sex is M\ncarol's height is 140.19\ncarol's weight is 51.5\ncarol's sex is F\n"}},"pos":1,"type":"cell"}
{"cell_type":"code","exec_count":10,"id":"366a37","input":"\n#  Here are 10 values sampled from a standard normal distribution\n\nnp.random.randn(10)","output":{"0":{"data":{"text/plain":"array([-0.46319661,  0.3610036 ,  0.99642048,  0.58504691, -0.77772554,\n        2.03090883,  0.0288338 ,  0.22194282, -0.21106429,  0.3636402 ])"},"exec_count":10,"output_type":"execute_result"}},"pos":14,"type":"cell"}
{"cell_type":"code","exec_count":104,"id":"d5bcf8","input":"B = np.random.randint(-10,10,16).reshape(4,4)\nB\n","output":{"0":{"data":{"text/plain":"array([[  0,  -2,   3,  -2],\n       [  6,  -8,  -8,   1],\n       [  2,  -3, -10,  -1],\n       [  6,   3,  -9,   4]])"},"exec_count":104,"output_type":"execute_result"}},"pos":94,"type":"cell"}
{"cell_type":"code","exec_count":11,"id":"28289f","input":"#  Here are 5 integers sampled uniformly at random between 0 and 10\n\nnp.random.randint(0,2,10)","output":{"0":{"data":{"text/plain":"array([0, 0, 0, 1, 0, 0, 0, 0, 0, 1])"},"exec_count":11,"output_type":"execute_result"}},"pos":15,"type":"cell"}
{"cell_type":"code","exec_count":110,"id":"7c82e3","input":"B/mx","output":{"0":{"data":{"text/plain":"array([[ 0.        , -0.25      ,  0.3       , -0.5       ],\n       [ 1.        , -1.        , -0.8       ,  0.25      ],\n       [ 0.33333333, -0.375     , -1.        , -0.25      ],\n       [ 1.        ,  0.375     , -0.9       ,  1.        ]])"},"exec_count":110,"output_type":"execute_result"}},"pos":96,"type":"cell"}
{"cell_type":"code","exec_count":111,"id":"fdfadc","input":"mx = np.max(np.abs(B),axis=0)\nmx","output":{"0":{"data":{"text/plain":"array([ 6,  8, 10,  4])"},"exec_count":111,"output_type":"execute_result"}},"pos":95,"type":"cell"}
{"cell_type":"code","exec_count":114,"id":"b96cf9","input":"C = np.array([1,-10,11,2,3,0])\nnp.argmax(C), np.argmin(C)","output":{"0":{"data":{"text/plain":"(2, 1)"},"exec_count":114,"output_type":"execute_result"}},"pos":99,"type":"cell"}
{"cell_type":"code","exec_count":115,"id":"39821c","input":"np.argsort(C)","output":{"0":{"data":{"text/plain":"array([1, 5, 0, 3, 4, 2])"},"exec_count":115,"output_type":"execute_result"}},"pos":101,"type":"cell"}
{"cell_type":"code","exec_count":116,"id":"4c49c6","input":"## We can use the argsort to do an actual sort!\n\nC[np.argsort(C)]","output":{"0":{"data":{"text/plain":"array([-10,   0,   1,   2,   3,  11])"},"exec_count":116,"output_type":"execute_result"}},"pos":102,"type":"cell"}
{"cell_type":"code","exec_count":126,"id":"809f2e","input":"import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.arange(-1,1,0.01)\ny = 8*x**2-2*x\nplt.plot(x,np.sin(x))\nplt.plot(x,y)\nplt.legend([r\"$\\sin(x)$\",r\"$8x^2-2x$\"])\nplt.title(\"Sine vs a quadratic\")\nplt.show()","output":{"0":{"data":{"image/png":"97c209d03d5bfb097a80d3bfd8e7907b034b5de4"},"exec_count":126,"metadata":{"image/png":{"height":263,"width":370},"needs_background":"light"},"output_type":"execute_result"}},"pos":127,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":127,"id":"fec295","input":"import matplotlib.pyplot as plt\nimport numpy as np\nN = 4\nx = np.arange(-3,3,0.01)\ny = np.sin(x)\ny2 = x\ny3 = x - x**3/(3*2)\ny4 = x - x**3/3 + x**5/(5*4*3*2)\ny5 = x - x**3/3 + x**5/(5*4*3*2) - x**7/(7*6*5*4*3*2)\nplt.plot(x,y)\nplt.plot(x,y2)\nplt.plot(x,y3)\nplt.plot(x,y4)\nplt.plot(x,y5)\nplt.legend(['sin','one','two','three','four','five'])\nplt.show()","output":{"0":{"data":{"image/png":"f1e2d1fc9dbc4f6e7aceb34016aaef1afa6b9ea9"},"exec_count":127,"metadata":{"image/png":{"height":250,"width":372},"needs_background":"light"},"output_type":"execute_result"}},"pos":129,"type":"cell"}
{"cell_type":"code","exec_count":128,"id":"4325f8","input":"import math\nplt.plot(x,np.sin(x))\nN = 10\ny = np.zeros(len(x))\nfor i in range(N):\n    y += (-1)**(i)*x**(2*i+1)/math.factorial(2*i+1)\n    plt.plot(x,y)\nplt.show()    ","output":{"0":{"data":{"image/png":"15f3f74be0102ce8576c3fd0bdfc3bfbdd590a59"},"exec_count":128,"metadata":{"image/png":{"height":250,"width":372},"needs_background":"light"},"output_type":"execute_result"}},"pos":130,"type":"cell"}
{"cell_type":"code","exec_count":128,"id":"80414f","input":"import pandas as pd\n\ndf = pd.read_csv(\"wdbc.data.txt\",header=None,index_col=0)\ndf.head()","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>1</th>\n      <th>2</th>\n      <th>3</th>\n      <th>4</th>\n      <th>5</th>\n      <th>6</th>\n      <th>7</th>\n      <th>8</th>\n      <th>9</th>\n      <th>10</th>\n      <th>...</th>\n      <th>22</th>\n      <th>23</th>\n      <th>24</th>\n      <th>25</th>\n      <th>26</th>\n      <th>27</th>\n      <th>28</th>\n      <th>29</th>\n      <th>30</th>\n      <th>31</th>\n    </tr>\n    <tr>\n      <th>0</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>842302</th>\n      <td>M</td>\n      <td>17.99</td>\n      <td>10.38</td>\n      <td>122.80</td>\n      <td>1001.0</td>\n      <td>0.11840</td>\n      <td>0.27760</td>\n      <td>0.3001</td>\n      <td>0.14710</td>\n      <td>0.2419</td>\n      <td>...</td>\n      <td>25.38</td>\n      <td>17.33</td>\n      <td>184.60</td>\n      <td>2019.0</td>\n      <td>0.1622</td>\n      <td>0.6656</td>\n      <td>0.7119</td>\n      <td>0.2654</td>\n      <td>0.4601</td>\n      <td>0.11890</td>\n    </tr>\n    <tr>\n      <th>842517</th>\n      <td>M</td>\n      <td>20.57</td>\n      <td>17.77</td>\n      <td>132.90</td>\n      <td>1326.0</td>\n      <td>0.08474</td>\n      <td>0.07864</td>\n      <td>0.0869</td>\n      <td>0.07017</td>\n      <td>0.1812</td>\n      <td>...</td>\n      <td>24.99</td>\n      <td>23.41</td>\n      <td>158.80</td>\n      <td>1956.0</td>\n      <td>0.1238</td>\n      <td>0.1866</td>\n      <td>0.2416</td>\n      <td>0.1860</td>\n      <td>0.2750</td>\n      <td>0.08902</td>\n    </tr>\n    <tr>\n      <th>84300903</th>\n      <td>M</td>\n      <td>19.69</td>\n      <td>21.25</td>\n      <td>130.00</td>\n      <td>1203.0</td>\n      <td>0.10960</td>\n      <td>0.15990</td>\n      <td>0.1974</td>\n      <td>0.12790</td>\n      <td>0.2069</td>\n      <td>...</td>\n      <td>23.57</td>\n      <td>25.53</td>\n      <td>152.50</td>\n      <td>1709.0</td>\n      <td>0.1444</td>\n      <td>0.4245</td>\n      <td>0.4504</td>\n      <td>0.2430</td>\n      <td>0.3613</td>\n      <td>0.08758</td>\n    </tr>\n    <tr>\n      <th>84348301</th>\n      <td>M</td>\n      <td>11.42</td>\n      <td>20.38</td>\n      <td>77.58</td>\n      <td>386.1</td>\n      <td>0.14250</td>\n      <td>0.28390</td>\n      <td>0.2414</td>\n      <td>0.10520</td>\n      <td>0.2597</td>\n      <td>...</td>\n      <td>14.91</td>\n      <td>26.50</td>\n      <td>98.87</td>\n      <td>567.7</td>\n      <td>0.2098</td>\n      <td>0.8663</td>\n      <td>0.6869</td>\n      <td>0.2575</td>\n      <td>0.6638</td>\n      <td>0.17300</td>\n    </tr>\n    <tr>\n      <th>84358402</th>\n      <td>M</td>\n      <td>20.29</td>\n      <td>14.34</td>\n      <td>135.10</td>\n      <td>1297.0</td>\n      <td>0.10030</td>\n      <td>0.13280</td>\n      <td>0.1980</td>\n      <td>0.10430</td>\n      <td>0.1809</td>\n      <td>...</td>\n      <td>22.54</td>\n      <td>16.67</td>\n      <td>152.20</td>\n      <td>1575.0</td>\n      <td>0.1374</td>\n      <td>0.2050</td>\n      <td>0.4000</td>\n      <td>0.1625</td>\n      <td>0.2364</td>\n      <td>0.07678</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 31 columns</p>\n</div>","text/plain":"         1      2      3       4       5        6        7       8        9   \\\n0                                                                              \n842302    M  17.99  10.38  122.80  1001.0  0.11840  0.27760  0.3001  0.14710   \n842517    M  20.57  17.77  132.90  1326.0  0.08474  0.07864  0.0869  0.07017   \n84300903  M  19.69  21.25  130.00  1203.0  0.10960  0.15990  0.1974  0.12790   \n84348301  M  11.42  20.38   77.58   386.1  0.14250  0.28390  0.2414  0.10520   \n84358402  M  20.29  14.34  135.10  1297.0  0.10030  0.13280  0.1980  0.10430   \n\n              10  ...     22     23      24      25      26      27      28  \\\n0                 ...                                                         \n842302    0.2419  ...  25.38  17.33  184.60  2019.0  0.1622  0.6656  0.7119   \n842517    0.1812  ...  24.99  23.41  158.80  1956.0  0.1238  0.1866  0.2416   \n84300903  0.2069  ...  23.57  25.53  152.50  1709.0  0.1444  0.4245  0.4504   \n84348301  0.2597  ...  14.91  26.50   98.87   567.7  0.2098  0.8663  0.6869   \n84358402  0.1809  ...  22.54  16.67  152.20  1575.0  0.1374  0.2050  0.4000   \n\n              29      30       31  \n0                                  \n842302    0.2654  0.4601  0.11890  \n842517    0.1860  0.2750  0.08902  \n84300903  0.2430  0.3613  0.08758  \n84348301  0.2575  0.6638  0.17300  \n84358402  0.1625  0.2364  0.07678  \n\n[5 rows x 31 columns]"},"exec_count":128,"output_type":"execute_result"}},"pos":112,"type":"cell"}
{"cell_type":"code","exec_count":129,"id":"91d64b","input":"import matplotlib.pyplot as plt\n\nx = np.arange(-1,1,0.001)\n\nleg = []\nfor i in range(1,6):\n    plt.plot(x,1/i*x**2)\n    leg.append(r\"$1/{}x^2$\".format(i))\nplt.legend(leg)    \nplt.show()","output":{"0":{"data":{"image/png":"d6904d0aa9717d21f82c137c78b86e78ff669f2c"},"exec_count":129,"metadata":{"image/png":{"height":250,"width":373},"needs_background":"light"},"output_type":"execute_result"}},"pos":131,"type":"cell"}
{"cell_type":"code","exec_count":129,"id":"9c8d51","input":"## numpy doesn't play well with strings, so we replace M and B with 1 and 0\ndf = df.replace('M',1).replace('B',0)\ndf.head()","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>1</th>\n      <th>2</th>\n      <th>3</th>\n      <th>4</th>\n      <th>5</th>\n      <th>6</th>\n      <th>7</th>\n      <th>8</th>\n      <th>9</th>\n      <th>10</th>\n      <th>...</th>\n      <th>22</th>\n      <th>23</th>\n      <th>24</th>\n      <th>25</th>\n      <th>26</th>\n      <th>27</th>\n      <th>28</th>\n      <th>29</th>\n      <th>30</th>\n      <th>31</th>\n    </tr>\n    <tr>\n      <th>0</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>842302</th>\n      <td>1</td>\n      <td>17.99</td>\n      <td>10.38</td>\n      <td>122.80</td>\n      <td>1001.0</td>\n      <td>0.11840</td>\n      <td>0.27760</td>\n      <td>0.3001</td>\n      <td>0.14710</td>\n      <td>0.2419</td>\n      <td>...</td>\n      <td>25.38</td>\n      <td>17.33</td>\n      <td>184.60</td>\n      <td>2019.0</td>\n      <td>0.1622</td>\n      <td>0.6656</td>\n      <td>0.7119</td>\n      <td>0.2654</td>\n      <td>0.4601</td>\n      <td>0.11890</td>\n    </tr>\n    <tr>\n      <th>842517</th>\n      <td>1</td>\n      <td>20.57</td>\n      <td>17.77</td>\n      <td>132.90</td>\n      <td>1326.0</td>\n      <td>0.08474</td>\n      <td>0.07864</td>\n      <td>0.0869</td>\n      <td>0.07017</td>\n      <td>0.1812</td>\n      <td>...</td>\n      <td>24.99</td>\n      <td>23.41</td>\n      <td>158.80</td>\n      <td>1956.0</td>\n      <td>0.1238</td>\n      <td>0.1866</td>\n      <td>0.2416</td>\n      <td>0.1860</td>\n      <td>0.2750</td>\n      <td>0.08902</td>\n    </tr>\n    <tr>\n      <th>84300903</th>\n      <td>1</td>\n      <td>19.69</td>\n      <td>21.25</td>\n      <td>130.00</td>\n      <td>1203.0</td>\n      <td>0.10960</td>\n      <td>0.15990</td>\n      <td>0.1974</td>\n      <td>0.12790</td>\n      <td>0.2069</td>\n      <td>...</td>\n      <td>23.57</td>\n      <td>25.53</td>\n      <td>152.50</td>\n      <td>1709.0</td>\n      <td>0.1444</td>\n      <td>0.4245</td>\n      <td>0.4504</td>\n      <td>0.2430</td>\n      <td>0.3613</td>\n      <td>0.08758</td>\n    </tr>\n    <tr>\n      <th>84348301</th>\n      <td>1</td>\n      <td>11.42</td>\n      <td>20.38</td>\n      <td>77.58</td>\n      <td>386.1</td>\n      <td>0.14250</td>\n      <td>0.28390</td>\n      <td>0.2414</td>\n      <td>0.10520</td>\n      <td>0.2597</td>\n      <td>...</td>\n      <td>14.91</td>\n      <td>26.50</td>\n      <td>98.87</td>\n      <td>567.7</td>\n      <td>0.2098</td>\n      <td>0.8663</td>\n      <td>0.6869</td>\n      <td>0.2575</td>\n      <td>0.6638</td>\n      <td>0.17300</td>\n    </tr>\n    <tr>\n      <th>84358402</th>\n      <td>1</td>\n      <td>20.29</td>\n      <td>14.34</td>\n      <td>135.10</td>\n      <td>1297.0</td>\n      <td>0.10030</td>\n      <td>0.13280</td>\n      <td>0.1980</td>\n      <td>0.10430</td>\n      <td>0.1809</td>\n      <td>...</td>\n      <td>22.54</td>\n      <td>16.67</td>\n      <td>152.20</td>\n      <td>1575.0</td>\n      <td>0.1374</td>\n      <td>0.2050</td>\n      <td>0.4000</td>\n      <td>0.1625</td>\n      <td>0.2364</td>\n      <td>0.07678</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 31 columns</p>\n</div>","text/plain":"          1      2      3       4       5        6        7       8        9   \\\n0                                                                               \n842302     1  17.99  10.38  122.80  1001.0  0.11840  0.27760  0.3001  0.14710   \n842517     1  20.57  17.77  132.90  1326.0  0.08474  0.07864  0.0869  0.07017   \n84300903   1  19.69  21.25  130.00  1203.0  0.10960  0.15990  0.1974  0.12790   \n84348301   1  11.42  20.38   77.58   386.1  0.14250  0.28390  0.2414  0.10520   \n84358402   1  20.29  14.34  135.10  1297.0  0.10030  0.13280  0.1980  0.10430   \n\n              10  ...     22     23      24      25      26      27      28  \\\n0                 ...                                                         \n842302    0.2419  ...  25.38  17.33  184.60  2019.0  0.1622  0.6656  0.7119   \n842517    0.1812  ...  24.99  23.41  158.80  1956.0  0.1238  0.1866  0.2416   \n84300903  0.2069  ...  23.57  25.53  152.50  1709.0  0.1444  0.4245  0.4504   \n84348301  0.2597  ...  14.91  26.50   98.87   567.7  0.2098  0.8663  0.6869   \n84358402  0.1809  ...  22.54  16.67  152.20  1575.0  0.1374  0.2050  0.4000   \n\n              29      30       31  \n0                                  \n842302    0.2654  0.4601  0.11890  \n842517    0.1860  0.2750  0.08902  \n84300903  0.2430  0.3613  0.08758  \n84348301  0.2575  0.6638  0.17300  \n84358402  0.1625  0.2364  0.07678  \n\n[5 rows x 31 columns]"},"exec_count":129,"output_type":"execute_result"}},"pos":113,"type":"cell"}
{"cell_type":"code","exec_count":130,"id":"4325f2","input":"df.shape","output":{"0":{"data":{"text/plain":"(569, 31)"},"exec_count":130,"output_type":"execute_result"}},"pos":114,"type":"cell"}
{"cell_type":"code","exec_count":130,"id":"9fa53b","input":"#one way to do subplots\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig,axes = plt.subplots(nrows=2,ncols=2, figsize=(7,7))\nx = np.arange(-3,3,0.1)\naxes[0,0].plot(x,x)\naxes[0,1].plot(x,np.sin(x))\naxes[1,0].plot(x,np.sin(2*x))\naxes[1,1].plot(x,x**3)\nplt.show()","output":{"0":{"data":{"image/png":"fbaba815f64025fe7a160d77723724f5520b8547"},"exec_count":130,"metadata":{"image/png":{"height":413,"width":438},"needs_background":"light"},"output_type":"execute_result"}},"pos":133,"type":"cell"}
{"cell_type":"code","exec_count":131,"id":"8e6845","input":"#another way to do subplots\n\nx = np.arange(-3,3,0.01)\n\nplt.subplot(3,1,1)\nplt.plot(x,x**2)\n\n\nplt.subplot(3,1,2)\nplt.plot(x,np.ones(len(x))*42,color=\"green\")\n\n\nplt.subplot(3,1,3)\nplt.plot(x,np.tan(x),color=\"blue\")\nplt.show()","output":{"0":{"data":{"image/png":"1e3d39b9461ca40f1dfaf0ff47b28aa2c9440321"},"exec_count":131,"metadata":{"image/png":{"height":250,"width":392},"needs_background":"light"},"output_type":"execute_result"}},"pos":135,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":131,"id":"caca3b","input":"## you can get a numpy array from a pandas dataframe like this\nX0 = df.values\ntype(X0)","output":{"0":{"data":{"text/plain":"numpy.ndarray"},"exec_count":131,"output_type":"execute_result"}},"pos":115,"type":"cell"}
{"cell_type":"code","exec_count":132,"id":"8caee0","input":"x = np.arange(0,2,0.01)\nplt.subplot(2,2,1)\nplt.plot(x,x**2)\n\nplt.subplot(2,2,2)\nplt.plot(x,np.sin(x**3),color=\"red\")\n\nplt.subplot(2,2,3)\nplt.plot(x,x**4,color=\"purple\")\n\nplt.subplot(2,2,4)\nplt.plot(x,x**5,color=\"orange\")\nplt.show()","output":{"0":{"data":{"image/png":"f8a7aa2edf09941b7bbbc70881f1b61a185e01dc"},"exec_count":132,"metadata":{"image/png":{"height":250,"width":370},"needs_background":"light"},"output_type":"execute_result"}},"pos":136,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":133,"id":"173077","input":"import numpy as np\nx = np.arange(0,2,0.01)\n\nimport matplotlib.pyplot as plt\n\ny = np.log(x)\nplt.plot(x,y)\ny = np.sqrt(x)\nplt.plot(x,y)\nplt.legend([r\"$\\ln(x)$\",r\"$\\sqrt{x}$\"])\nplt.title(\"The greatest functions of all time.\")\nplt.show()","output":{"0":{"name":"stderr","output_type":"stream","text":"/ext/anaconda5/lib/python3.6/site-packages/ipykernel/__main__.py:6: RuntimeWarning: divide by zero encountered in log\n"},"1":{"data":{"image/png":"c697191a3c2655e70f7a0acb9007c277a46d00fa"},"exec_count":133,"metadata":{"image/png":{"height":263,"width":372},"needs_background":"light"},"output_type":"execute_result"}},"pos":137,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":133,"id":"9c9b12","input":"# see first 3 rows\nX0[:3]","output":{"0":{"data":{"text/plain":"array([[1.000e+00, 1.799e+01, 1.038e+01, 1.228e+02, 1.001e+03, 1.184e-01,\n        2.776e-01, 3.001e-01, 1.471e-01, 2.419e-01, 7.871e-02, 1.095e+00,\n        9.053e-01, 8.589e+00, 1.534e+02, 6.399e-03, 4.904e-02, 5.373e-02,\n        1.587e-02, 3.003e-02, 6.193e-03, 2.538e+01, 1.733e+01, 1.846e+02,\n        2.019e+03, 1.622e-01, 6.656e-01, 7.119e-01, 2.654e-01, 4.601e-01,\n        1.189e-01],\n       [1.000e+00, 2.057e+01, 1.777e+01, 1.329e+02, 1.326e+03, 8.474e-02,\n        7.864e-02, 8.690e-02, 7.017e-02, 1.812e-01, 5.667e-02, 5.435e-01,\n        7.339e-01, 3.398e+00, 7.408e+01, 5.225e-03, 1.308e-02, 1.860e-02,\n        1.340e-02, 1.389e-02, 3.532e-03, 2.499e+01, 2.341e+01, 1.588e+02,\n        1.956e+03, 1.238e-01, 1.866e-01, 2.416e-01, 1.860e-01, 2.750e-01,\n        8.902e-02],\n       [1.000e+00, 1.969e+01, 2.125e+01, 1.300e+02, 1.203e+03, 1.096e-01,\n        1.599e-01, 1.974e-01, 1.279e-01, 2.069e-01, 5.999e-02, 7.456e-01,\n        7.869e-01, 4.585e+00, 9.403e+01, 6.150e-03, 4.006e-02, 3.832e-02,\n        2.058e-02, 2.250e-02, 4.571e-03, 2.357e+01, 2.553e+01, 1.525e+02,\n        1.709e+03, 1.444e-01, 4.245e-01, 4.504e-01, 2.430e-01, 3.613e-01,\n        8.758e-02]])"},"exec_count":133,"output_type":"execute_result"}},"pos":116,"type":"cell"}
{"cell_type":"code","exec_count":134,"id":"a31d51","input":"X0.shape","output":{"0":{"data":{"text/plain":"(569, 31)"},"exec_count":134,"output_type":"execute_result"}},"pos":117,"type":"cell"}
{"cell_type":"code","exec_count":141,"id":"edb902","input":"## delete the target vector in X0\n## we keep the class labels in y and the data in X\n\nX1 = np.delete(X0,0,1)\nX1[:3]","output":{"0":{"data":{"text/plain":"array([[1.799e+01, 1.038e+01, 1.228e+02, 1.001e+03, 1.184e-01, 2.776e-01,\n        3.001e-01, 1.471e-01, 2.419e-01, 7.871e-02, 1.095e+00, 9.053e-01,\n        8.589e+00, 1.534e+02, 6.399e-03, 4.904e-02, 5.373e-02, 1.587e-02,\n        3.003e-02, 6.193e-03, 2.538e+01, 1.733e+01, 1.846e+02, 2.019e+03,\n        1.622e-01, 6.656e-01, 7.119e-01, 2.654e-01, 4.601e-01, 1.189e-01],\n       [2.057e+01, 1.777e+01, 1.329e+02, 1.326e+03, 8.474e-02, 7.864e-02,\n        8.690e-02, 7.017e-02, 1.812e-01, 5.667e-02, 5.435e-01, 7.339e-01,\n        3.398e+00, 7.408e+01, 5.225e-03, 1.308e-02, 1.860e-02, 1.340e-02,\n        1.389e-02, 3.532e-03, 2.499e+01, 2.341e+01, 1.588e+02, 1.956e+03,\n        1.238e-01, 1.866e-01, 2.416e-01, 1.860e-01, 2.750e-01, 8.902e-02],\n       [1.969e+01, 2.125e+01, 1.300e+02, 1.203e+03, 1.096e-01, 1.599e-01,\n        1.974e-01, 1.279e-01, 2.069e-01, 5.999e-02, 7.456e-01, 7.869e-01,\n        4.585e+00, 9.403e+01, 6.150e-03, 4.006e-02, 3.832e-02, 2.058e-02,\n        2.250e-02, 4.571e-03, 2.357e+01, 2.553e+01, 1.525e+02, 1.709e+03,\n        1.444e-01, 4.245e-01, 4.504e-01, 2.430e-01, 3.613e-01, 8.758e-02]])"},"exec_count":141,"output_type":"execute_result"}},"pos":119,"type":"cell"}
{"cell_type":"code","exec_count":15,"id":"42e7d8","input":"A = np.linspace(0,1,16)\nA","output":{"0":{"data":{"text/plain":"array([0.        , 0.06666667, 0.13333333, 0.2       , 0.26666667,\n       0.33333333, 0.4       , 0.46666667, 0.53333333, 0.6       ,\n       0.66666667, 0.73333333, 0.8       , 0.86666667, 0.93333333,\n       1.        ])"},"exec_count":15,"output_type":"execute_result"}},"pos":17,"type":"cell"}
{"cell_type":"code","exec_count":15,"id":"45e843","input":"A.reshape(2,8)","output":{"0":{"data":{"text/plain":"array([[0.        , 0.06666667, 0.13333333, 0.2       , 0.26666667,\n        0.33333333, 0.4       , 0.46666667],\n       [0.53333333, 0.6       , 0.66666667, 0.73333333, 0.8       ,\n        0.86666667, 0.93333333, 1.        ]])"},"exec_count":15,"output_type":"execute_result"}},"pos":20,"type":"cell"}
{"cell_type":"code","exec_count":151,"id":"35da61","input":"\nmal = (y==1)  ## boolean vector\n\nben = (y==0)\n\nX_ben = X[ben]\nX_mal = X[mal]\n\ny_ben = y[ben]\ny_mal = y[mal]\n\n","pos":123,"type":"cell"}
{"cell_type":"code","exec_count":158,"id":"6fe864","input":"## Now make a picture!\n\nf1,f2 = 16,7  ## you can only make 2d (or 3d) plots. We select a couple of features.\n\nxdim1b = X_ben[:,f1]\nxdim2b = X_ben[:,f2]\n\nxdim1m = X_mal[:,f1]\nxdim2m = X_mal[:,f2]\n\nimport matplotlib.pyplot as plt\n\nplt.scatter(xdim1b,xdim2b,color='b',alpha=0.4,label=\"benign\")\nplt.scatter(xdim1m,xdim2m,color='r',alpha=0.4,label=\"malignant\")\nplt.legend()\nplt.show()","output":{"0":{"data":{"image/png":"9558049539d6c601111b835cd0d8519f65329527","text/plain":"<Figure size 432x288 with 1 Axes>"},"exec_count":158,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":124,"type":"cell"}
{"cell_type":"code","exec_count":159,"id":"370e1f","input":"## define a target vector  (the labels Malignant/Benign)\n\ny = np.copy(X0[:,0])  #deep copy\ny[:4],y[-4:]","output":{"0":{"data":{"text/plain":"(array([1., 1., 1., 1.]), array([1., 1., 1., 0.]))"},"exec_count":159,"output_type":"execute_result"}},"pos":118,"type":"cell"}
{"cell_type":"code","exec_count":16,"id":"91823b","input":"A.reshape(8,2)","output":{"0":{"data":{"text/plain":"array([[0.        , 0.06666667],\n       [0.13333333, 0.2       ],\n       [0.26666667, 0.33333333],\n       [0.4       , 0.46666667],\n       [0.53333333, 0.6       ],\n       [0.66666667, 0.73333333],\n       [0.8       , 0.86666667],\n       [0.93333333, 1.        ]])"},"exec_count":16,"output_type":"execute_result"}},"pos":21,"type":"cell"}
{"cell_type":"code","exec_count":16,"id":"e947cd","input":"B = A.reshape(4,4)\nB","output":{"0":{"data":{"text/plain":"array([[0.        , 0.06666667, 0.13333333, 0.2       ],\n       [0.26666667, 0.33333333, 0.4       , 0.46666667],\n       [0.53333333, 0.6       , 0.66666667, 0.73333333],\n       [0.8       , 0.86666667, 0.93333333, 1.        ]])"},"exec_count":16,"output_type":"execute_result"}},"pos":18,"type":"cell"}
{"cell_type":"code","exec_count":160,"id":"a9b108","input":"#add a bias column of all 1's\n\nbias = np.ones((X1.shape[0],1))\nX=np.hstack((bias,X1))\n\n## Now X is what we would use for real ML\n\nX[:3]","output":{"0":{"data":{"text/plain":"array([[1.000e+00, 1.799e+01, 1.038e+01, 1.228e+02, 1.001e+03, 1.184e-01,\n        2.776e-01, 3.001e-01, 1.471e-01, 2.419e-01, 7.871e-02, 1.095e+00,\n        9.053e-01, 8.589e+00, 1.534e+02, 6.399e-03, 4.904e-02, 5.373e-02,\n        1.587e-02, 3.003e-02, 6.193e-03, 2.538e+01, 1.733e+01, 1.846e+02,\n        2.019e+03, 1.622e-01, 6.656e-01, 7.119e-01, 2.654e-01, 4.601e-01,\n        1.189e-01],\n       [1.000e+00, 2.057e+01, 1.777e+01, 1.329e+02, 1.326e+03, 8.474e-02,\n        7.864e-02, 8.690e-02, 7.017e-02, 1.812e-01, 5.667e-02, 5.435e-01,\n        7.339e-01, 3.398e+00, 7.408e+01, 5.225e-03, 1.308e-02, 1.860e-02,\n        1.340e-02, 1.389e-02, 3.532e-03, 2.499e+01, 2.341e+01, 1.588e+02,\n        1.956e+03, 1.238e-01, 1.866e-01, 2.416e-01, 1.860e-01, 2.750e-01,\n        8.902e-02],\n       [1.000e+00, 1.969e+01, 2.125e+01, 1.300e+02, 1.203e+03, 1.096e-01,\n        1.599e-01, 1.974e-01, 1.279e-01, 2.069e-01, 5.999e-02, 7.456e-01,\n        7.869e-01, 4.585e+00, 9.403e+01, 6.150e-03, 4.006e-02, 3.832e-02,\n        2.058e-02, 2.250e-02, 4.571e-03, 2.357e+01, 2.553e+01, 1.525e+02,\n        1.709e+03, 1.444e-01, 4.245e-01, 4.504e-01, 2.430e-01, 3.613e-01,\n        8.758e-02]])"},"exec_count":160,"output_type":"execute_result"}},"pos":121,"type":"cell"}
{"cell_type":"code","exec_count":19,"id":"15131d","input":"np.diff(np.array([1,2,4,7]))\n","output":{"0":{"data":{"text/plain":"array([1, 2, 3])"},"exec_count":19,"output_type":"execute_result"}},"pos":134,"type":"cell"}
{"cell_type":"code","exec_count":19,"id":"32d381","input":"## Accessing an element of B\n## Either notation works.  Probably B[1,2] is faster?\n\nB[1,2],B[1][2]","output":{"0":{"data":{"text/plain":"(0.4, 0.4)"},"exec_count":19,"output_type":"execute_result"}},"pos":19,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"2f8216","input":"## Accessing Bob's sex\n\ndata[1][2]","output":{"0":{"data":{"text/plain":"'M'"},"exec_count":2,"output_type":"execute_result"}},"pos":4,"type":"cell"}
{"cell_type":"code","exec_count":20,"id":"ed7acc","input":"Am = np.matrix(A)\nBm = np.matrix(B)\nAm*Bm","output":{"0":{"data":{"text/plain":"matrix([[171,  58, 117],\n        [ 70,  10,  65],\n        [ 97,  40,  59]])"},"exec_count":20,"output_type":"execute_result"}},"pos":31,"type":"cell"}
{"cell_type":"code","exec_count":21,"id":"64ae4f","input":"cube = np.ones((3,3,3))\ncube","output":{"0":{"data":{"text/plain":"array([[[1., 1., 1.],\n        [1., 1., 1.],\n        [1., 1., 1.]],\n\n       [[1., 1., 1.],\n        [1., 1., 1.],\n        [1., 1., 1.]],\n\n       [[1., 1., 1.],\n        [1., 1., 1.],\n        [1., 1., 1.]]])"},"exec_count":21,"output_type":"execute_result"}},"pos":23,"type":"cell"}
{"cell_type":"code","exec_count":21,"id":"7508bc","input":"A.dot(B)","output":{"0":{"data":{"text/plain":"array([[171,  58, 117],\n       [ 70,  10,  65],\n       [ 97,  40,  59]])"},"exec_count":21,"output_type":"execute_result"}},"pos":33,"type":"cell"}
{"cell_type":"code","exec_count":22,"id":"26eb69","input":"#The inverse \n\nnp.linalg.inv(A)\n","output":{"0":{"data":{"text/plain":"array([[ 0.8 , -0.44, -1.  ],\n       [-0.8 ,  0.64,  1.  ],\n       [ 0.2 , -0.36, -0.  ]])"},"exec_count":22,"output_type":"execute_result"}},"pos":35,"type":"cell"}
{"cell_type":"code","exec_count":23,"id":"34ba9b","input":"# Everything is numerical, so it can be a little sloppy.\n# Here's A*A^(-1)\nA.dot(np.linalg.inv(A))","output":{"0":{"data":{"text/plain":"array([[ 1.00000000e+00,  1.11022302e-16,  0.00000000e+00],\n       [-6.66133815e-16,  1.00000000e+00,  0.00000000e+00],\n       [-4.44089210e-16,  0.00000000e+00,  1.00000000e+00]])"},"exec_count":23,"output_type":"execute_result"}},"pos":36,"type":"cell"}
{"cell_type":"code","exec_count":23,"id":"751e39","input":"hypercube = np.ones((3,3,3,3))\nhypercube","output":{"0":{"data":{"text/plain":"array([[[[1., 1., 1.],\n         [1., 1., 1.],\n         [1., 1., 1.]],\n\n        [[1., 1., 1.],\n         [1., 1., 1.],\n         [1., 1., 1.]],\n\n        [[1., 1., 1.],\n         [1., 1., 1.],\n         [1., 1., 1.]]],\n\n\n       [[[1., 1., 1.],\n         [1., 1., 1.],\n         [1., 1., 1.]],\n\n        [[1., 1., 1.],\n         [1., 1., 1.],\n         [1., 1., 1.]],\n\n        [[1., 1., 1.],\n         [1., 1., 1.],\n         [1., 1., 1.]]],\n\n\n       [[[1., 1., 1.],\n         [1., 1., 1.],\n         [1., 1., 1.]],\n\n        [[1., 1., 1.],\n         [1., 1., 1.],\n         [1., 1., 1.]],\n\n        [[1., 1., 1.],\n         [1., 1., 1.],\n         [1., 1., 1.]]]])"},"exec_count":23,"output_type":"execute_result"}},"pos":24,"type":"cell"}
{"cell_type":"code","exec_count":24,"id":"9902d0","input":"# The transpose\n\nA.T","output":{"0":{"data":{"text/plain":"array([[9, 5, 4],\n       [9, 5, 5],\n       [5, 0, 4]])"},"exec_count":24,"output_type":"execute_result"}},"pos":37,"type":"cell"}
{"cell_type":"code","exec_count":25,"id":"73946a","input":"#  The pseudo-inverse\n#https://en.wikipedia.org/wiki/Moore%E2%80%93Penrose_inverse#Definition\n#  (we'll explain this later)\n# For a square matrix, the pseudo-inverse is just the inverse\n\nnp.linalg.pinv(A)","output":{"0":{"data":{"text/plain":"array([[ 8.00000000e-01, -4.40000000e-01, -1.00000000e+00],\n       [-8.00000000e-01,  6.40000000e-01,  1.00000000e+00],\n       [ 2.00000000e-01, -3.60000000e-01, -2.46619038e-16]])"},"exec_count":25,"output_type":"execute_result"}},"pos":38,"type":"cell"}
{"cell_type":"code","exec_count":25,"id":"b4ae0a","input":"import numpy as np\n\nA = np.random.randint(0,10,9).reshape(3,3)\nB = np.random.randint(0,10,9).reshape(3,3)\nA","output":{"0":{"data":{"text/plain":"array([[0, 3, 2],\n       [9, 1, 4],\n       [2, 6, 1]])"},"exec_count":25,"output_type":"execute_result"}},"pos":26,"type":"cell"}
{"cell_type":"code","exec_count":26,"id":"3b1560","input":"B","output":{"0":{"data":{"text/plain":"array([[1, 4, 8],\n       [8, 5, 1],\n       [9, 6, 3]])"},"exec_count":26,"output_type":"execute_result"}},"pos":27,"type":"cell"}
{"cell_type":"code","exec_count":26,"id":"c279b5","input":"#  But for rectangular matrices the pseudo-inverse is also defined (where the regular inverse is not)\n\nC = np.random.randn(8).reshape(4,2)\nC","output":{"0":{"data":{"text/plain":"array([[ 0.25587711, -0.71628719],\n       [ 0.16266398,  1.2845162 ],\n       [ 0.9160569 , -0.84234591],\n       [ 0.34369591,  0.95184919]])"},"exec_count":26,"output_type":"execute_result"}},"pos":39,"type":"cell"}
{"cell_type":"code","exec_count":27,"id":"3923b1","input":"C_pinv = np.linalg.pinv(C)\nC_pinv.shape","output":{"0":{"data":{"text/plain":"(2, 4)"},"exec_count":27,"output_type":"execute_result"}},"pos":40,"type":"cell"}
{"cell_type":"code","exec_count":27,"id":"6efb78","input":"## Element by element multiplication\nA*B","output":{"0":{"data":{"text/plain":"array([[ 0, 12, 16],\n       [72,  5,  4],\n       [18, 36,  3]])"},"exec_count":27,"output_type":"execute_result"}},"pos":28,"type":"cell"}
{"cell_type":"code","exec_count":28,"id":"754d12","input":"## Each element squared, respectively\nA**2","output":{"0":{"data":{"text/plain":"array([[ 0,  9,  4],\n       [81,  1, 16],\n       [ 4, 36,  1]])"},"exec_count":28,"output_type":"execute_result"}},"pos":29,"type":"cell"}
{"cell_type":"code","exec_count":28,"id":"f5e9f6","input":"C_pinv","output":{"0":{"data":{"text/plain":"array([[ 0.17599064,  0.30419104,  0.82039589,  0.44794767],\n       [-0.17005647,  0.37366085, -0.13199074,  0.3015556 ]])"},"exec_count":28,"output_type":"execute_result"}},"pos":41,"type":"cell"}
{"cell_type":"code","exec_count":29,"id":"8a3f9f","input":"A = np.array(data)\nA","output":{"0":{"data":{"text/plain":"array([['150.701', '62.5', 'F'],\n       ['173.101', '70.5', 'M'],\n       ['140.19', '51.5', 'F']], dtype='<U32')"},"exec_count":29,"output_type":"execute_result"}},"pos":55,"type":"cell"}
{"cell_type":"code","exec_count":29,"id":"95813f","input":"C_Cpinv_prod = C.dot(C_pinv)\nC_Cpinv_prod.shape","output":{"0":{"data":{"text/plain":"(4, 4)"},"exec_count":29,"output_type":"execute_result"}},"pos":42,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"3c80c8","input":"# Conversion from python arrays...\n\nimport numpy as np\n\nL = [1,2,3,4,5]\n\nLnp = np.array(L)\n\nLnp, Lnp.dtype","output":{"0":{"data":{"text/plain":"(array([1, 2, 3, 4, 5]), dtype('int64'))"},"exec_count":3,"output_type":"execute_result"}},"pos":7,"type":"cell"}
{"cell_type":"code","exec_count":30,"id":"3e5ea5","input":"# Numpy arrays can be sliced multidimensionally, similarly to the way 1D Python\n\n# All rows, third column\nA[:,2]","output":{"0":{"data":{"text/plain":"array(['F', 'M', 'F'], dtype='<U32')"},"exec_count":30,"output_type":"execute_result"}},"pos":56,"type":"cell"}
{"cell_type":"code","exec_count":30,"id":"aa353e","input":"C_Cpinv_prod","output":{"0":{"data":{"text/plain":"array([[ 0.16684125, -0.18981295,  0.30446381, -0.10138085],\n       [-0.18981295,  0.52945434, -0.03609539,  0.460218  ],\n       [ 0.30446381, -0.03609539,  0.86271117,  0.15633144],\n       [-0.10138085,  0.460218  ,  0.15633144,  0.44099324]])"},"exec_count":30,"output_type":"execute_result"}},"pos":43,"type":"cell"}
{"cell_type":"code","exec_count":31,"id":"0039c7","input":"## Slicing works with assignment\nA[:,2] = np.array([1,0,1])\nA","output":{"0":{"data":{"text/plain":"array([['150.701', '62.5', '1'],\n       ['173.101', '70.5', '0'],\n       ['140.19', '51.5', '1']], dtype='<U32')"},"exec_count":31,"output_type":"execute_result"}},"pos":57,"type":"cell"}
{"cell_type":"code","exec_count":31,"id":"d896d6","input":"Cpinv_C_prod = C_pinv.dot(C)\nCpinv_C_prod.shape","output":{"0":{"data":{"text/plain":"(2, 2)"},"exec_count":31,"output_type":"execute_result"}},"pos":44,"type":"cell"}
{"cell_type":"code","exec_count":32,"id":"6bb0d2","input":"Cpinv_C_prod","output":{"0":{"data":{"text/plain":"array([[ 1.00000000e+00, -1.38578474e-16],\n       [ 2.00721949e-17,  1.00000000e+00]])"},"exec_count":32,"output_type":"execute_result"}},"pos":45,"type":"cell"}
{"cell_type":"code","exec_count":32,"id":"b68a98","input":"## Now we can convert to a numerical array...\n\nA = A.astype(float)\nA","output":{"0":{"data":{"text/plain":"array([[150.701,  62.5  ,   1.   ],\n       [173.101,  70.5  ,   0.   ],\n       [140.19 ,  51.5  ,   1.   ]])"},"exec_count":32,"output_type":"execute_result"}},"pos":58,"type":"cell"}
{"cell_type":"code","exec_count":33,"id":"251060","input":"np.eye(5)  # The multiplicative identity","output":{"0":{"data":{"text/plain":"array([[1., 0., 0., 0., 0.],\n       [0., 1., 0., 0., 0.],\n       [0., 0., 1., 0., 0.],\n       [0., 0., 0., 1., 0.],\n       [0., 0., 0., 0., 1.]])"},"exec_count":33,"output_type":"execute_result"}},"pos":47,"type":"cell"}
{"cell_type":"code","exec_count":33,"id":"50135f","input":"# All rows, all columns\n\nA[:,:]","output":{"0":{"data":{"text/plain":"array([[150.701,  62.5  ,   1.   ],\n       [173.101,  70.5  ,   0.   ],\n       [140.19 ,  51.5  ,   1.   ]])"},"exec_count":33,"output_type":"execute_result"}},"pos":59,"type":"cell"}
{"cell_type":"code","exec_count":34,"id":"9e3285","input":"Cpinv_C_prod == np.eye(2)","output":{"0":{"data":{"text/plain":"array([[False, False],\n       [False, False]])"},"exec_count":34,"output_type":"execute_result"}},"pos":49,"type":"cell"}
{"cell_type":"code","exec_count":34,"id":"eda89c","input":"# Second row, all columns\nA[1,:]","output":{"0":{"data":{"text/plain":"array([173.101,  70.5  ,   0.   ])"},"exec_count":34,"output_type":"execute_result"}},"pos":60,"type":"cell"}
{"cell_type":"code","exec_count":35,"id":"391984","input":"# Second row, columns 0,1\nA[1,0:2]","output":{"0":{"data":{"text/plain":"array([173.101,  70.5  ])"},"exec_count":35,"output_type":"execute_result"}},"pos":61,"type":"cell"}
{"cell_type":"code","exec_count":35,"id":"a71538","input":"np.equal(Cpinv_C_prod,np.eye(2))","output":{"0":{"data":{"text/plain":"array([[False, False],\n       [False, False]])"},"exec_count":35,"output_type":"execute_result"}},"pos":50,"type":"cell"}
{"cell_type":"code","exec_count":36,"id":"e8f78e","input":"#Exercise:\n\n#  What is this?\n\nA[0:2,1:]","output":{"0":{"data":{"text/plain":"array([[62.5,  1. ],\n       [70.5,  0. ]])"},"exec_count":36,"output_type":"execute_result"}},"pos":62,"type":"cell"}
{"cell_type":"code","exec_count":38,"id":"2dedfe","input":"np.isclose(Cpinv_C_prod,np.eye(2))","output":{"0":{"data":{"text/plain":"array([[ True,  True],\n       [ True,  True]])"},"exec_count":38,"output_type":"execute_result"}},"pos":52,"type":"cell"}
{"cell_type":"code","exec_count":39,"id":"53d5c1","input":"## Slicing a matrix\nM = np.matrix(A)\nM","output":{"0":{"data":{"text/plain":"matrix([[150.701,  62.5  ,   1.   ],\n        [173.101,  70.5  ,   0.   ],\n        [140.19 ,  51.5  ,   1.   ]])"},"exec_count":39,"output_type":"execute_result"}},"pos":63,"type":"cell"}
{"cell_type":"code","exec_count":39,"id":"a83bb7","input":"## The final solution!\n\nnp.allclose(Cpinv_C_prod,np.eye(2))","output":{"0":{"data":{"text/plain":"True"},"exec_count":39,"output_type":"execute_result"}},"pos":53,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"9145cb","input":"# Unlike a python array, in a numpy array all elements are the same type\n# If any string is included, then everything must be a string\n\nL = [1,2,3,4,5,'a']\n\n\nLnp = np.array(L)\n\nLnp,Lnp.dtype","output":{"0":{"data":{"text/plain":"(array(['1', '2', '3', '4', '5', 'a'], dtype='<U21'), dtype('<U21'))"},"exec_count":4,"output_type":"execute_result"}},"pos":8,"type":"cell"}
{"cell_type":"code","exec_count":41,"id":"89948e","input":"## Matrix slices try to retain whether the slice is a row or a column.\n## Array slices don't care\n\nM[:,1], A[:,1]","output":{"0":{"data":{"text/plain":"(matrix([[62.5],\n         [70.5],\n         [51.5]]), array([62.5, 70.5, 51.5]))"},"exec_count":41,"output_type":"execute_result"}},"pos":64,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"fd3ca3","input":"# arange\n\n# This method gives you an \"interval\" of values.\n# You specify a start, a stop, and a step\n\nnp.arange(0,1,0.5)","output":{"0":{"data":{"text/plain":"array([0. , 0.5])"},"exec_count":5,"output_type":"execute_result"}},"pos":9,"type":"cell"}
{"cell_type":"code","exec_count":58,"id":"2f8d3f","input":"sex_col = A[:,-1]\nA_females = A[sex_col == 1,:]\nA_females","output":{"0":{"data":{"text/plain":"array([[150.701,  62.5  ,   1.   ],\n       [140.19 ,  51.5  ,   1.   ]])"},"exec_count":58,"output_type":"execute_result"}},"pos":66,"type":"cell"}
{"cell_type":"code","exec_count":58,"id":"5b7985","input":"flips = np.random.randint(0,2,100*10).reshape(10,100)","pos":105,"type":"cell"}
{"cell_type":"code","exec_count":59,"id":"a6bc45","input":"sex_col","output":{"0":{"data":{"text/plain":"array([1., 0., 1.])"},"exec_count":59,"output_type":"execute_result"}},"pos":68,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"f2560b","input":"# linspace\n\n# This is similar to arange, but you give a start, a stop, and the _number_ of points.\n\nnp.linspace(0,1,10)","output":{"0":{"data":{"text/plain":"array([0.        , 0.11111111, 0.22222222, 0.33333333, 0.44444444,\n       0.55555556, 0.66666667, 0.77777778, 0.88888889, 1.        ])"},"exec_count":6,"output_type":"execute_result"}},"pos":10,"type":"cell"}
{"cell_type":"code","exec_count":60,"id":"b9567c","input":"mu = np.mean(flips,axis=0)\nmu","output":{"0":{"data":{"text/plain":"array([0.4, 0.5, 0.4, 0.7, 0.2, 0.7, 0.8, 0.5, 0.7, 0.3, 0.2, 0.4, 0.5,\n       0.5, 0.7, 0.8, 0.5, 0.6, 0.3, 0.6, 0.7, 0.4, 0.3, 0.4, 0.4, 0.7,\n       0.6, 0.5, 0.5, 0.7, 0.8, 0.3, 0.8, 0.7, 0.6, 0.3, 0.6, 0.7, 0.5,\n       0.6, 0.4, 0.6, 0.8, 0.2, 0.6, 0.3, 0.4, 0.7, 0.4, 0.3, 0.2, 0.6,\n       0.7, 0.6, 0.7, 0.6, 0.3, 0.5, 0.5, 0.4, 0.5, 0.7, 0.5, 0.7, 0.6,\n       0.4, 0.7, 0.9, 0.5, 0.6, 0.8, 0.4, 0.8, 0.5, 0.3, 0.7, 0.5, 0.5,\n       0.6, 0.4, 0.6, 0.3, 0.7, 0.3, 0.7, 0.4, 0.5, 0.6, 0.3, 0.7, 0.7,\n       0.4, 0.6, 0.3, 0.4, 0.3, 0.6, 0.6, 0.5, 0.6])"},"exec_count":60,"output_type":"execute_result"}},"pos":106,"type":"cell"}
{"cell_type":"code","exec_count":61,"id":"e4afd6","input":"best_person = np.argmax(mu)\nbest_person, mu[best_person]","output":{"0":{"data":{"text/plain":"(67, 0.9)"},"exec_count":61,"output_type":"execute_result"}},"pos":107,"type":"cell"}
{"cell_type":"code","exec_count":61,"id":"f5776e","input":"bv = (sex_col == 1)\nbv","output":{"0":{"data":{"text/plain":"array([ True, False,  True])"},"exec_count":61,"output_type":"execute_result"}},"pos":70,"type":"cell"}
{"cell_type":"code","exec_count":63,"id":"52215f","input":"## Female data\n\nA[bv]","output":{"0":{"data":{"text/plain":"array([[150.701,  62.5  ,   1.   ],\n       [140.19 ,  51.5  ,   1.   ]])"},"exec_count":63,"output_type":"execute_result"}},"pos":72,"type":"cell"}
{"cell_type":"code","exec_count":64,"id":"ebee16","input":"A = np.array(range(11))\nA","output":{"0":{"data":{"text/plain":"array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10])"},"exec_count":64,"output_type":"execute_result"}},"pos":76,"type":"cell"}
{"cell_type":"code","exec_count":65,"id":"435ca2","input":"A + 1","output":{"0":{"data":{"text/plain":"array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11])"},"exec_count":65,"output_type":"execute_result"}},"pos":77,"type":"cell"}
{"cell_type":"code","exec_count":66,"id":"a7dd19","input":"A*1/2","output":{"0":{"data":{"text/plain":"array([0. , 0.5, 1. , 1.5, 2. , 2.5, 3. , 3.5, 4. , 4.5, 5. ])"},"exec_count":66,"output_type":"execute_result"}},"pos":78,"type":"cell"}
{"cell_type":"code","exec_count":67,"id":"19a425","input":"conditions  = A > 4\nconditions","output":{"0":{"data":{"text/plain":"array([False, False, False, False, False,  True,  True,  True,  True,\n        True,  True])"},"exec_count":67,"output_type":"execute_result"}},"pos":79,"type":"cell"}
{"cell_type":"code","exec_count":67,"id":"f81125","input":"flips = np.random.randint(0,2,100*10).reshape(10,100)\nmu = np.mean(flips,axis=0)\nmu[best_person]","output":{"0":{"data":{"text/plain":"0.4"},"exec_count":67,"output_type":"execute_result"}},"pos":109,"type":"cell"}
{"cell_type":"code","exec_count":68,"id":"0582c2","input":"A[conditions]","output":{"0":{"data":{"text/plain":"array([ 5,  6,  7,  8,  9, 10])"},"exec_count":68,"output_type":"execute_result"}},"pos":80,"type":"cell"}
{"cell_type":"code","exec_count":69,"id":"455ccd","input":"A**3 - 14*A**2+np.sqrt(A)-10","output":{"0":{"data":{"text/plain":"array([ -10.        ,  -22.        ,  -56.58578644, -107.26794919,\n       -168.        , -232.76393202, -295.55051026, -350.35424869,\n       -391.17157288, -412.        , -406.83772234])"},"exec_count":69,"output_type":"execute_result"}},"pos":81,"type":"cell"}
{"cell_type":"code","exec_count":69,"id":"ef078c","input":"np.log(np.e)==1\n","output":{"0":{"data":{"text/plain":"True"},"exec_count":69,"output_type":"execute_result"}},"pos":132,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"2acc67","input":"# logspace\n\n# Similar to linspace, but now the points are separated by geometrically increasing amounts.\n# There is an implicit base b (10 by default)\n# It starts at b**start and stops at b**stop\n\nnp.logspace(1,5,num=10)","output":{"0":{"data":{"text/plain":"array([1.00000000e+01, 2.78255940e+01, 7.74263683e+01, 2.15443469e+02,\n       5.99484250e+02, 1.66810054e+03, 4.64158883e+03, 1.29154967e+04,\n       3.59381366e+04, 1.00000000e+05])"},"exec_count":7,"output_type":"execute_result"}},"pos":11,"type":"cell"}
{"cell_type":"code","exec_count":70,"id":"f41dca","input":"B = np.ones(len(A))\nB","output":{"0":{"data":{"text/plain":"array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])"},"exec_count":70,"output_type":"execute_result"}},"pos":82,"type":"cell"}
{"cell_type":"code","exec_count":71,"id":"b1dd99","input":"B+A","output":{"0":{"data":{"text/plain":"array([ 1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,  9., 10., 11.])"},"exec_count":71,"output_type":"execute_result"}},"pos":83,"type":"cell"}
{"cell_type":"code","exec_count":72,"id":"82a9bf","input":"# This is the dot product, from linear algebra.\n\nB.dot(A) == np.sum(B*A)","output":{"0":{"data":{"text/plain":"True"},"exec_count":72,"output_type":"execute_result"}},"pos":84,"type":"cell"}
{"cell_type":"code","exec_count":73,"id":"8a866d","input":"# This is item-wise multiplication\n\nB*A","output":{"0":{"data":{"text/plain":"array([ 0.,  1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,  9., 10.])"},"exec_count":73,"output_type":"execute_result"}},"pos":85,"type":"cell"}
{"cell_type":"code","exec_count":74,"id":"72add5","input":"#Exercise:\n\n#  Create a 2D numpy array of dimensions 4x7\n","pos":74,"type":"cell"}
{"cell_type":"code","exec_count":79,"id":"77a715","input":"A = np.array(range(16)).reshape(4,4)\nA","output":{"0":{"data":{"text/plain":"array([[ 0,  1,  2,  3],\n       [ 4,  5,  6,  7],\n       [ 8,  9, 10, 11],\n       [12, 13, 14, 15]])"},"exec_count":79,"output_type":"execute_result"}},"pos":88,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"904622","input":"# zeros\n\n# Often you just want an array of zeros.\n\nnp.zeros(10)","output":{"0":{"data":{"text/plain":"array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])"},"exec_count":8,"output_type":"execute_result"}},"pos":12,"type":"cell"}
{"cell_type":"code","exec_count":81,"id":"b2e287","input":"# Numpy has some built-in vectorized functions like sine, cosine, exp, log, etc.\n\nnp.sin(A) + np.cos(A)\n","output":{"0":{"data":{"text/plain":"array([ 1.        ,  1.38177329,  0.49315059, -0.84887249, -1.41044612,\n       -0.67526209,  0.68075479,  1.41088885,  0.84385821, -0.49901178,\n       -1.38309264])"},"exec_count":81,"output_type":"execute_result"}},"pos":86,"type":"cell"}
{"cell_type":"code","exec_count":86,"id":"6248d6","input":"# column by column\n\nnp.var(A,axis=0)","output":{"0":{"data":{"text/plain":"array([20., 20., 20., 20.])"},"exec_count":86,"output_type":"execute_result"}},"pos":89,"type":"cell"}
{"cell_type":"code","exec_count":87,"id":"e75aa5","input":"# row by row\n\nnp.var(A,axis=1)","output":{"0":{"data":{"text/plain":"array([1.25, 1.25, 1.25, 1.25])"},"exec_count":87,"output_type":"execute_result"}},"pos":90,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"b31c64","input":"\n# Or an array of ones\n\nnp.ones(10)","output":{"0":{"data":{"text/plain":"array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])"},"exec_count":9,"output_type":"execute_result"}},"pos":13,"type":"cell"}
{"cell_type":"code","exec_count":93,"id":"2ed6aa","input":"# every number in the matrix \n\nnp.var(A)","output":{"0":{"data":{"text/plain":"21.25"},"exec_count":93,"output_type":"execute_result"}},"pos":91,"type":"cell"}
{"cell_type":"code","exec_count":97,"id":"870423","input":"mu = np.mean(A,axis=0)\nmu","output":{"0":{"data":{"text/plain":"array([6., 7., 8., 9.])"},"exec_count":97,"output_type":"execute_result"}},"pos":92,"type":"cell"}
{"cell_type":"markdown","id":"0d6e0d","input":"### Uh oh, must have been the pressure?\n\nObviously no one is really any better than anyone else at flipping coins.\n\nThe best person's performance was all luck and no skill.\n\nWhen we tested the person on fresh data the luck vanished and only the skill remained.\n\nWith only skill and no luck to rely on, performance decreased.\n\nThis is called **regression to the mean**.\n\nWe have to be very careful about this in ML when evaluating model performance.","pos":110,"type":"cell"}
{"cell_type":"markdown","id":"13d199","input":"## Slicing\n\nNow we practice doing 2D array slicing.\n\nYou may want to review 1D array slicing if you're still not sure how that works.\n\nhttps://stackoverflow.com/questions/509211/understanding-pythons-slice-notation\n\nThe basic form of a 2D slice is \n\n```\nA[<slice of rows>,<slice of columns>]\n```\n\nHere are some examples.\n","pos":54,"type":"cell"}
{"cell_type":"markdown","id":"1a43a4","input":"### Wow, what a performance!\n\nSomeone has a real tendency to flip heads.\n\nOr do they?\n\nDo you think their luck will hold up in ten more flips?\n","pos":108,"type":"cell"}
{"cell_type":"markdown","id":"1ea94b","input":"### Argsort\n\nArgsort gives the indexes of a collection in order of the value of the corresponding element!\n","pos":100,"type":"cell"}
{"cell_type":"markdown","id":"22f3bc","input":"### isclose\n\nThe built-in `isclose` solves the problem of approximate equality, but not the element by element issue:","pos":51,"type":"cell"}
{"cell_type":"markdown","id":"26f0b6","input":"### Application: Luck vs skill\n\nEntities that are exceptional are exceptional for two reasons: luck and skill.\n\nSkill persists but luck does not.  \n\nConsider 100 people, each of whom flip a fair coin ten times.\n\nWe simulate this below.  Each column is a \"person\".\n\nThe row corresponding to a person is their flipping record.\n","pos":104,"type":"cell"}
{"cell_type":"markdown","id":"2bcea7","input":"###  Combining slicing with selection\n\nBelow we select out the rows corresponding to females","pos":65,"type":"cell"}
{"cell_type":"markdown","id":"2bd0e6","input":"###  Selecting rows with a boolean vector\n\nYou can see below that when we specified the columns above it was unnecessary.\n\nBy default boolean relations apply to rows.\n","pos":71,"type":"cell"}
{"cell_type":"markdown","id":"3be140","input":"## Data\n\nIn machine learning, statistics and other applications, we need to represent data.  \n\nOften we represent data in _vectors_ which are just ordered lists of numbers or words.  \n\nFor instance if we have data about people, which records their _height (cm)_, _weight (kg)_, and _sex_, data about a particular person might be represented as a vector like this one:\n\n```\n[173.101, 70.5,'M']\n```\nThis vector says that the person in question is 173.101 cm tall, weighs 70.5 kg, and is a male.  \n\nIf we have data about several people, then we have many vectors of information.  Typically these are stacked to form a _matrix_.\n\nFor instance if we have three people, Alice, Bob, and Carol, then their data might together make a 3 by 3 matrix like this one:\n\n```\n[\n[150.701, 62.5,'F'],\n[173.101, 70.5,'M'],\n[140.19, 51.5,'F']\n]\n```\nI have written this as a list of lists.\n","pos":0,"type":"cell"}
{"cell_type":"markdown","id":"3c92f1","input":"### Matrix product\n\nIf you want to get the matrix product then you have two options.\n\nOne is to conver to the numpy \"matrix\" type.\n","pos":30,"type":"cell"}
{"cell_type":"markdown","id":"46004a","input":"#### Linear algebra operations\n\nOften we want to do matrix arithmetic on numpy arrays.  \nBy default when you \"multiply\" numpy arrays you don't get the matrix product, you get respective elements multiplied together.\n\n","pos":25,"type":"cell"}
{"cell_type":"markdown","id":"520cd3","input":"### Exercise:\n\nImplement these scaling algorithms:\n\nhttps://en.wikipedia.org/wiki/Feature_scaling#Rescaling_(min-max_normalization)\n\n","pos":97,"type":"cell"}
{"cell_type":"markdown","id":"59c5e6","input":"## Axes\n\nOften you want to compute things column by column (or row by row).\n\nFor example you might want to compute the variance of each column.\n\nThe way you specify whether you want to execute a command \"downwards\" (column by column) or \"across\" (row by row) is captured in numpy by the idea of an \"axis\".\n\nBasically, axis=0 means column by column and axis=1 means row by row. \n","pos":87,"type":"cell"}
{"cell_type":"markdown","id":"5aa7b6","input":"## Vectorization\n\nOperations on numpy arrays are _vectorized_.  That means that most operations happen to all the elements at once. These operations are parallelized at the processor level and go super fast.\n\nHere are some examples.\n\n","pos":75,"type":"cell"}
{"cell_type":"markdown","id":"613384","input":"### Numpy 2-D arrays\n\nThe way to create a 2-D array in numpy is usually to reshape a 1-D array. \n\nBelow are examples of using the reshape command.\n","pos":16,"type":"cell"}
{"cell_type":"markdown","id":"672a25","input":"### Equality of matrices\n\nNotice that the two most obvious methods for checking equality of matrices doesn't work.\n\nThere are two problems:\n\n1. It checks for equality entry by entry\n2. If two floats are close, like $10^{-17}$ and $0.0$, we want them to be considered equal.\n\nNote that it really is (theoretically) true that $C^+C = I$.\n","pos":48,"type":"cell"}
{"cell_type":"markdown","id":"7202cd","input":"###  Scaling\n\nWe'll put the above to a practical purpose.\n\nNamely we'll normalize each column so that the values are between $\\pm 1$.\n\nNotice that the columns of B are each divided by the max from that respective column...\n\n","pos":93,"type":"cell"}
{"cell_type":"markdown","id":"8804f9","input":"### Argstuff\n\nFreqently in CS (and especially ML) the idea of the *argmax* (or argmin) arises.\n\nThe **argmax** of a function $f(x)$ is the $x$ that maximizes $f$.\n\nThe **argmax** of an indexed set is the index of the maximum element. \n\nThese are the same concept if you think of an indexed set as a function from the index set to a collection of elements.  (I'll explain this on the board). \n","pos":98,"type":"cell"}
{"cell_type":"markdown","id":"98062a","input":"### A practical example\n\nBelow we'll import and process a real dataset, the Wisconsin Breast Cancer Dataset, using the techniques we've discussed.\n\n","pos":111,"type":"cell"}
{"cell_type":"markdown","id":"9aeae4","input":"### Boolean vector\n\nThen we got a vector of boolean values, corresponding to the sex being 1 (female):\n","pos":69,"type":"cell"}
{"cell_type":"markdown","id":"9e18bf","input":"### $n$ dimensional arrays\n\nWe will work exclusively with 2-d arrays, but numpy does support arrays of any dimension.  These might be used for a simulation, for instance. \n\nHigher dimensional arrays are printed out as 2d slices.\n","pos":22,"type":"cell"}
{"cell_type":"markdown","id":"ad27fd","input":"#### Other matrix operations\n\nOften we want the inverse, the transpose, or the \"pseudo-inverse\".\n\nHere is how to get each of these.\n","pos":34,"type":"cell"}
{"cell_type":"markdown","id":"b42382","input":"### Slow motion replay....\n\nHow did that work?  Let's revisit.  \n\nFirst we had the sex column.","pos":67,"type":"cell"}
{"cell_type":"markdown","id":"c10021","input":"### Random tasks with matplotlib\n\nBelow is a series of matplotlib examples.\n\nI don't plan to talk about them, but you might find it useful to look them over.\n\n","pos":125,"type":"cell"}
{"cell_type":"markdown","id":"c395c0","input":"## Numpy arrays\n\nNumpy (numerical python) supports $n$-dimensional arrays.\n\nThey call these `ndarray` [types](https://docs.scipy.org/doc/numpy-1.15.0/reference/generated/numpy.ndarray.html).  \n\nWe will only use 1-dimensional and 2-dimensional arrays.  \n\nLet's first go over some ways to generate 1-dimensional arrays of numbers in numpy.\n\nWe'll discuss\n\n1. conversion from python arrays\n1. arange\n1. linspace\n1. logspace\n1. zeros\n1. ones\n1. random\n","pos":6,"type":"cell"}
{"cell_type":"markdown","id":"ccb009","input":"## Exercise:\n\n#A = np.array(data)\n\n\n## Slice out these:\n\n# 1)  The 3rd column\n\n# 2)  The last row\n# 3)  The last 2 columns\n","pos":73,"type":"cell"}
{"cell_type":"markdown","id":"d298a7","input":"# Exercise:\n\nIn the same window, plot all of the following\n\n    1. y = sin(x)\n    2. y = x\n    3. y = x - x**3/(3*2)\n    4. y = x - x**3/3 + x**5/(5*4*3*2)\n    5. y = x - x**3/3 + x**5/(5*4*3*2) - x**7/(7*6*5*4*3*2)\n","pos":128,"type":"cell"}
{"cell_type":"markdown","id":"d90b12","input":"## Lists of lists\n\nSometimes lists of lists are called 2-dimensional arrays.  \n\nEvery element in a 2D array can be specified by its row and column.\n\nFor instance Bob's sex is in the second row and , third column of the matrix `data`.\n\n\n\n","pos":3,"type":"cell"}
{"cell_type":"markdown","id":"df5ade","input":"### Add a bias column of all 1's\n\nOften for technical reasons you want your data matrix to begin with a column of 1's.\n\nThis is called the *bias* column.","pos":120,"type":"cell"}
{"cell_type":"markdown","id":"e989ac","input":"Notice that we first specify the row `data[1]`.  So `data[1]` is itself a list.  Then we get the third column by accessing the third element of that list:\n\n```\ndata[1][2]\n```\n","pos":5,"type":"cell"}
{"cell_type":"markdown","id":"eb9470","input":"### Get the positive and negative examples\n\nYou might want to separate the positive instances from the negative.\n\nWe do this all the time to make pictures.\n\nWe're just playing around and making a plot here.\n\n","pos":122,"type":"cell"}
{"cell_type":"markdown","id":"ebf91f","input":"### The identity matrix and checking equality\n\nThe *identity matrix* of dimension $n$ is the $n\\times n$ matrix with ones on the diagonal and zeros at all other locations.  \n\nBelow we show how to use the identity in numpy.\n\nWe also cover determining equality of matrixes.\n","pos":46,"type":"cell"}
{"cell_type":"markdown","id":"ece18d","input":"Another method is to use the \"dot\" method.\n\nThis is uglier, but I recommend it, because slices of \"matrix\" types can be weird (see \"slicing\" below).\n","pos":32,"type":"cell"}
{"cell_type":"markdown","id":"fa4197","input":"# And more...\n\nHere is a nice tutorial showing you how to do more things...\n\n[http://cs231n.github.io/python-numpy-tutorial/](http://cs231n.github.io/python-numpy-tutorial/)\n    ","pos":103,"type":"cell"}
{"id":0,"time":1586191701285,"type":"user"}
{"last_load":1586191703897,"type":"file"}