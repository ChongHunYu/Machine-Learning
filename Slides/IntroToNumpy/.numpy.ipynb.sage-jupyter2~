{"backend_state":"running","kernel":"anaconda5","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":61001728},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.5"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1549378964136,"exec_count":19,"id":"d13052","input":"#height #weight #sex\ndata = [\n[150.701, 62.5,'F'],  #alice\n[173.101, 70.5,'M'],  #bob\n[140.19, 51.5,'F']    #carol\n]\n\ndata[1][0]\ndata[2][0] #Carol's height\ndata[0][2] #Alice's sex\n\n\nfor i,name in enumerate([\"alice\",\"bob\",\"carol\"]):\n    for j,propertyx in enumerate([\"height\",\"weight\",\"sex\"]):\n        print(\"{}'s {} is {}\".format(name,propertyx,data[i][j]))","kernel":"anaconda5","output":{"0":{"name":"stdout","text":"alice's height is 150.701\nalice's weight is 62.5\nalice's sex is F\nbob's height is 173.101\nbob's weight is 70.5\nbob's sex is M\ncarol's height is 140.19\ncarol's weight is 51.5\ncarol's sex is F\n"}},"pos":2,"start":1549378964121,"state":"done","type":"cell"}
{"cell_type":"code","end":1549379378840,"exec_count":39,"id":"45e843","input":"A.reshape(2,8)","kernel":"anaconda5","output":{"0":{"data":{"text/plain":"array([[0.        , 0.06666667, 0.13333333, 0.2       , 0.26666667,\n        0.33333333, 0.4       , 0.46666667],\n       [0.53333333, 0.6       , 0.66666667, 0.73333333, 0.8       ,\n        0.86666667, 0.93333333, 1.        ]])"},"exec_count":39}},"pos":12,"start":1549379378829,"state":"done","type":"cell"}
{"cell_type":"code","end":1549379900159,"exec_count":55,"id":"46004a","input":"B","kernel":"anaconda5","output":{"0":{"data":{"text/plain":"array([[6, 1, 7],\n       [2, 3, 2],\n       [2, 0, 9]])"},"exec_count":55}},"pos":15,"start":1549379900148,"state":"done","type":"cell"}
{"cell_type":"code","end":1549379903955,"exec_count":56,"id":"b4ae0a","input":"A*B","kernel":"anaconda5","output":{"0":{"data":{"text/plain":"array([[42,  1, 49],\n       [ 0, 27, 18],\n       [ 8,  0, 18]])"},"exec_count":56}},"pos":16,"start":1549379903940,"state":"done","type":"cell"}
{"cell_type":"code","end":1549379975654,"exec_count":57,"id":"6efb78","input":"Am = np.matrix(A)\nBm = np.matrix(B)\nAm*Bm","kernel":"anaconda5","output":{"0":{"data":{"text/plain":"matrix([[ 58,  10, 114],\n        [ 36,  27,  99],\n        [ 28,   4,  46]])"},"exec_count":57}},"pos":18,"start":1549379975637,"state":"done","type":"cell"}
{"cell_type":"code","end":1549380478850,"exec_count":72,"id":"a83bb7","input":"B.flatten()","kernel":"anaconda5","output":{"0":{"data":{"text/plain":"array([ 0.82231058,  0.97975016,  0.42898614,  1.07242233, -1.00640184,\n       -1.04577882, -0.38708494,  1.97851304, -1.28083628,  1.48228689,\n        0.37813029,  0.30997016, -0.50344834,  1.83635373,  0.68876621,\n       -0.12174403,  1.46998238, -0.4915397 ,  1.12176541, -0.76528718,\n       -1.30419748,  1.19987133,  2.14436563,  1.17276708, -0.11806334])"},"exec_count":72}},"pos":31,"start":1549380478834,"state":"done","type":"cell"}
{"cell_type":"code","end":1549380590343,"exec_count":74,"id":"2f8d3f","input":"#Exercise:\n\n#  Create a 2D numpy array of dimensions 4x7\n","kernel":"anaconda5","pos":44,"start":1549380590328,"state":"done","type":"cell"}
{"cell_type":"code","end":1549380616643,"exec_count":76,"id":"9aeae4","input":"A + 1","kernel":"anaconda5","output":{"0":{"data":{"text/plain":"array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11])"},"exec_count":76}},"pos":47,"start":1549380616636,"state":"done","type":"cell"}
{"cell_type":"code","end":1549380617229,"exec_count":77,"id":"f5776e","input":"A*1/2","kernel":"anaconda5","output":{"0":{"data":{"text/plain":"array([0. , 0.5, 1. , 1.5, 2. , 2.5, 3. , 3.5, 4. , 4.5, 5. ])"},"exec_count":77}},"pos":48,"start":1549380617213,"state":"done","type":"cell"}
{"cell_type":"code","end":1549380652161,"exec_count":81,"id":"a7dd19","input":"# Numpy has some built-in vectorized functions like sine, cosine, exp, log, etc.\n\nnp.sin(A) + np.cos(A)\n","kernel":"anaconda5","output":{"0":{"data":{"text/plain":"array([ 1.        ,  1.38177329,  0.49315059, -0.84887249, -1.41044612,\n       -0.67526209,  0.68075479,  1.41088885,  0.84385821, -0.49901178,\n       -1.38309264])"},"exec_count":81}},"pos":55,"start":1549380652148,"state":"done","type":"cell"}
{"cell_type":"code","end":1549384650447,"exec_count":84,"id":"9145cb","input":"# Conversion from python arrays...\n\nimport numpy as np\n\nL = [1,2,3,4,5]\n\nLnp = np.array(L)\n\nLnp, Lnp.dtype","kernel":"anaconda5","output":{"0":{"data":{"text/plain":"(array([1, 2, 3, 4, 5]), dtype('int64'))"},"exec_count":84}},"pos":8,"start":1549384650411,"state":"done","type":"cell"}
{"cell_type":"code","end":1549385124774,"exec_count":94,"id":"e947cd","input":"A = np.linspace(0,1,16)\nA","kernel":"anaconda5","output":{"0":{"data":{"text/plain":"array([0.        , 0.06666667, 0.13333333, 0.2       , 0.26666667,\n       0.33333333, 0.4       , 0.46666667, 0.53333333, 0.6       ,\n       0.66666667, 0.73333333, 0.8       , 0.86666667, 0.93333333,\n       1.        ])"},"exec_count":94}},"pos":10,"start":1549385124764,"state":"done","type":"cell"}
{"cell_type":"code","end":1549385134782,"exec_count":97,"id":"32d381","input":"B = A.reshape(4,4)\nB","kernel":"anaconda5","output":{"0":{"data":{"text/plain":"array([[0.        , 0.06666667, 0.13333333, 0.2       ],\n       [0.26666667, 0.33333333, 0.4       , 0.46666667],\n       [0.53333333, 0.6       , 0.66666667, 0.73333333],\n       [0.8       , 0.86666667, 0.93333333, 1.        ]])"},"exec_count":97}},"pos":11,"start":1549385134773,"state":"done","type":"cell"}
{"cell_type":"code","end":1549556165237,"exec_count":99,"id":"3923b1","input":"# Numpy arrays can be sliced multidimensionally, similarly to the way 1D Python\n\n# All rows, third column\nA[:,2]","kernel":"anaconda5","output":{"0":{"data":{"text/plain":"array(['F', 'M', 'F'], dtype='<U32')"},"exec_count":99}},"pos":20,"start":1549556165217,"state":"done","type":"cell"}
{"cell_type":"code","end":1549556166629,"exec_count":100,"id":"f5e9f6","input":"# All rows, all columns\n\nA[:,:]","kernel":"anaconda5","output":{"0":{"data":{"text/plain":"array([['150.701', '62.5', 'F'],\n       ['173.101', '70.5', 'M'],\n       ['140.19', '51.5', 'F']], dtype='<U32')"},"exec_count":100}},"pos":21,"start":1549556166620,"state":"done","type":"cell"}
{"cell_type":"code","end":1549556625534,"exec_count":107,"id":"251060","input":"A = np.arange(1,17).reshape(4,4)\nA1 = A[:,1]\nA2 = A[1:3,2:]\nA2","kernel":"anaconda5","output":{"0":{"data":{"text/plain":"array([[ 7,  8],\n       [11, 12]])"},"exec_count":107}},"pos":27,"start":1549556625524,"state":"done","type":"cell"}
{"cell_type":"code","end":1549556700834,"exec_count":108,"id":"a71538","input":"B = np.random.randn(25).reshape(5,5)\nB","kernel":"anaconda5","output":{"0":{"data":{"text/plain":"array([[ 0.97779373, -3.04802769, -0.15148783,  0.08931792,  0.19045887],\n       [ 0.76807583,  0.21459417,  0.70670827, -0.36782307, -0.74429373],\n       [ 0.03957627, -0.82168196,  1.16286656,  0.72451834, -0.90320788],\n       [ 0.69169423, -0.03261625,  1.35880688,  0.0270561 ,  0.14249623],\n       [-1.22481217,  0.53368331,  0.62476067,  0.7866616 , -0.61216697]])"},"exec_count":108}},"pos":30,"start":1549556700821,"state":"done","type":"cell"}
{"cell_type":"code","end":1549557016833,"exec_count":114,"id":"2bd0e6","input":"conditions  = A > 4\nconditions","kernel":"anaconda5","output":{"0":{"data":{"text/plain":"array([False, False, False, False, False,  True,  True,  True,  True,\n        True,  True])"},"exec_count":114}},"pos":49,"start":1549557016823,"state":"done","type":"cell"}
{"cell_type":"code","end":1549557074553,"exec_count":116,"id":"e8f78e","input":"A = np.array( range(12))\nC = A.reshape(4,3).T\nC","kernel":"anaconda5","output":{"0":{"data":{"text/plain":"array([[ 0,  3,  6,  9],\n       [ 1,  4,  7, 10],\n       [ 2,  5,  8, 11]])"},"exec_count":116}},"pos":40,"start":1549557074539,"state":"done","type":"cell"}
{"cell_type":"code","end":1549557100846,"exec_count":118,"id":"53d5c1","input":"C%2 == 0\nC[C%2==0]","kernel":"anaconda5","output":{"0":{"data":{"text/plain":"array([ 0,  6,  4, 10,  2,  8])"},"exec_count":118}},"pos":41,"start":1549557100834,"state":"done","type":"cell"}
{"cell_type":"code","end":1549557121045,"exec_count":119,"id":"a6bc45","input":"A = np.array(range(11))\nA","kernel":"anaconda5","output":{"0":{"data":{"text/plain":"array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10])"},"exec_count":119}},"pos":46,"start":1549557121024,"state":"done","type":"cell"}
{"cell_type":"code","end":1549557151850,"exec_count":120,"id":"ccb009","input":"A**3 - 14*A**2+np.sqrt(A)-10","kernel":"anaconda5","output":{"0":{"data":{"text/plain":"array([ -10.        ,  -22.        ,  -56.58578644, -107.26794919,\n       -168.        , -232.76393202, -295.55051026, -350.35424869,\n       -391.17157288, -412.        , -406.83772234])"},"exec_count":120}},"pos":50,"start":1549557151826,"state":"done","type":"cell"}
{"cell_type":"code","end":1549557165230,"exec_count":122,"id":"72add5","input":"B = np.ones(len(A))\nB","kernel":"anaconda5","output":{"0":{"data":{"text/plain":"array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])"},"exec_count":122}},"pos":51,"start":1549557165214,"state":"done","type":"cell"}
{"cell_type":"code","end":1549557165452,"exec_count":123,"id":"5aa7b6","input":"B+A","kernel":"anaconda5","output":{"0":{"data":{"text/plain":"array([ 1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,  9., 10., 11.])"},"exec_count":123}},"pos":52,"start":1549557165440,"state":"done","type":"cell"}
{"cell_type":"code","end":1549557424250,"exec_count":126,"id":"b1dd99","input":"import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.arange(-1,1,0.01)\ny = 8*x**2-2*x\nplt.plot(x,np.sin(x))\nplt.plot(x,y)\nplt.legend([r\"$\\sin(x)$\",r\"$8x^2-2x$\"])\nplt.title(\"Sine vs a quadratic\")\nplt.show()","kernel":"anaconda5","output":{"0":{"data":{"image/png":"97c209d03d5bfb097a80d3bfd8e7907b034b5de4"},"metadata":{"image/png":{"height":263,"width":370},"needs_background":"light"}}},"pos":60,"scrolled":true,"start":1549557423627,"state":"done","type":"cell"}
{"cell_type":"code","end":1549557473510,"exec_count":127,"id":"8a866d","input":"import matplotlib.pyplot as plt\nimport numpy as np\nN = 4\nx = np.arange(-3,3,0.01)\ny = np.sin(x)\ny2 = x\ny3 = x - x**3/(3*2)\ny4 = x - x**3/3 + x**5/(5*4*3*2)\ny5 = x - x**3/3 + x**5/(5*4*3*2) - x**7/(7*6*5*4*3*2)\nplt.plot(x,y)\nplt.plot(x,y2)\nplt.plot(x,y3)\nplt.plot(x,y4)\nplt.plot(x,y5)\nplt.legend(['sin','one','two','three','four','five'])\nplt.show()","kernel":"anaconda5","output":{"0":{"data":{"image/png":"f1e2d1fc9dbc4f6e7aceb34016aaef1afa6b9ea9"},"metadata":{"image/png":{"height":250,"width":372},"needs_background":"light"}}},"pos":62,"start":1549557472833,"state":"done","type":"cell"}
{"cell_type":"code","end":1549557496499,"exec_count":128,"id":"b2e287","input":"import math\nplt.plot(x,np.sin(x))\nN = 10\ny = np.zeros(len(x))\nfor i in range(N):\n    y += (-1)**(i)*x**(2*i+1)/math.factorial(2*i+1)\n    plt.plot(x,y)\nplt.show()    ","kernel":"anaconda5","output":{"0":{"data":{"image/png":"15f3f74be0102ce8576c3fd0bdfc3bfbdd590a59"},"metadata":{"image/png":{"height":250,"width":372},"needs_background":"light"}}},"pos":63,"start":1549557495917,"state":"done","type":"cell"}
{"cell_type":"code","end":1549557502004,"exec_count":129,"id":"59c5e6","input":"import matplotlib.pyplot as plt\n\nx = np.arange(-1,1,0.001)\n\nleg = []\nfor i in range(1,6):\n    plt.plot(x,1/i*x**2)\n    leg.append(r\"$1/{}x^2$\".format(i))\nplt.legend(leg)    \nplt.show()","kernel":"anaconda5","output":{"0":{"data":{"image/png":"d6904d0aa9717d21f82c137c78b86e78ff669f2c"},"metadata":{"image/png":{"height":250,"width":373},"needs_background":"light"}}},"pos":64,"start":1549557501318,"state":"done","type":"cell"}
{"cell_type":"code","end":1549557517891,"exec_count":130,"id":"6248d6","input":"#one way to do subplots\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig,axes = plt.subplots(nrows=2,ncols=2, figsize=(7,7))\nx = np.arange(-3,3,0.1)\naxes[0,0].plot(x,x)\naxes[0,1].plot(x,np.sin(x))\naxes[1,0].plot(x,np.sin(2*x))\naxes[1,1].plot(x,x**3)\nplt.show()","kernel":"anaconda5","output":{"0":{"data":{"image/png":"fbaba815f64025fe7a160d77723724f5520b8547"},"metadata":{"image/png":{"height":413,"width":438},"needs_background":"light"}}},"pos":66,"start":1549557516625,"state":"done","type":"cell"}
{"cell_type":"code","end":1549557556290,"exec_count":131,"id":"2ed6aa","input":"#another way to do subplots\n\nx = np.arange(-3,3,0.01)\n\nplt.subplot(3,1,1)\nplt.plot(x,x**2)\n\n\nplt.subplot(3,1,2)\nplt.plot(x,np.ones(len(x))*42,color=\"green\")\n\n\nplt.subplot(3,1,3)\nplt.plot(x,np.tan(x),color=\"blue\")\nplt.show()","kernel":"anaconda5","output":{"0":{"data":{"image/png":"1e3d39b9461ca40f1dfaf0ff47b28aa2c9440321"},"metadata":{"image/png":{"height":250,"width":392},"needs_background":"light"}}},"pos":68,"start":1549557555433,"state":"done","type":"cell"}
{"cell_type":"code","end":1549557571110,"exec_count":132,"id":"870423","input":"x = np.arange(0,2,0.01)\nplt.subplot(2,2,1)\nplt.plot(x,x**2)\n\nplt.subplot(2,2,2)\nplt.plot(x,np.sin(x**3),color=\"red\")\n\nplt.subplot(2,2,3)\nplt.plot(x,x**4,color=\"purple\")\n\nplt.subplot(2,2,4)\nplt.plot(x,x**5,color=\"orange\")\nplt.show()","kernel":"anaconda5","output":{"0":{"data":{"image/png":"f8a7aa2edf09941b7bbbc70881f1b61a185e01dc"},"metadata":{"image/png":{"height":250,"width":370},"needs_background":"light"}}},"pos":69,"start":1549557570027,"state":"done","type":"cell"}
{"cell_type":"code","end":1549557584642,"exec_count":133,"id":"7202cd","input":"import numpy as np\nx = np.arange(0,2,0.01)\n\nimport matplotlib.pyplot as plt\n\ny = np.log(x)\nplt.plot(x,y)\ny = np.sqrt(x)\nplt.plot(x,y)\nplt.legend([r\"$\\ln(x)$\",r\"$\\sqrt{x}$\"])\nplt.title(\"The greatest functions of all time.\")\nplt.show()","kernel":"anaconda5","output":{"0":{"name":"stderr","text":"/ext/anaconda5/lib/python3.6/site-packages/ipykernel/__main__.py:6: RuntimeWarning: divide by zero encountered in log\n"},"1":{"data":{"image/png":"c697191a3c2655e70f7a0acb9007c277a46d00fa"},"metadata":{"image/png":{"height":263,"width":372},"needs_background":"light"}}},"pos":70,"start":1549557584016,"state":"done","type":"cell"}
{"cell_type":"code","end":1549557635035,"exec_count":135,"id":"fdfadc","input":"A = np.array(range(16)).reshape(4,4)\nA","kernel":"anaconda5","output":{"0":{"data":{"text/plain":"array([[ 0,  1,  2,  3],\n       [ 4,  5,  6,  7],\n       [ 8,  9, 10, 11],\n       [12, 13, 14, 15]])"},"exec_count":135}},"pos":72,"start":1549557635013,"state":"done","type":"cell"}
{"cell_type":"code","end":1549557702942,"exec_count":138,"id":"520cd3","input":"np.sum(A,axis=1)","kernel":"anaconda5","output":{"0":{"data":{"text/plain":"array([ 6, 22, 38, 54])"},"exec_count":138}},"pos":73,"start":1549557702921,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"2bcea7","input":"","pos":43,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"9c9b12","input":"","pos":90,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"a31d51","input":"","pos":91,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"caca3b","input":"","pos":89,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"d90b12","input":"","pos":3,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":11,"id":"aa353e","input":"# Second row, columns 0,1\nA[1,0:2]","output":{"0":{"data":{"text/plain":"array(['173.101', '70.5'], dtype='<U32')"},"exec_count":11,"output_type":"execute_result"}},"pos":23,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":14,"id":"d896d6","input":"#Exercise:\n\n#  What is this?\n\nA[0:2,1:]","output":{"0":{"data":{"text/plain":"array([['62.5', 'F'],\n       ['70.5', 'M']], dtype='<U32')"},"exec_count":14,"output_type":"execute_result"}},"pos":24,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":19,"id":"e75aa5","input":"np.diff(np.array([1,2,4,7]))\n","output":{"0":{"data":{"text/plain":"array([1, 2, 3])"},"exec_count":19,"output_type":"execute_result"}},"pos":67,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":2,"id":"e989ac","input":"## Accessing Bob's sex\n\ndata[1][2]","output":{"0":{"data":{"text/plain":"'M'"},"exec_count":2,"output_type":"execute_result"}},"pos":5,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":20,"id":"e4afd6","input":"B = np.array([ np.random.random() for i in range(12)]).reshape(3,4)\nB","output":{"0":{"data":{"text/plain":"array([[0.79428538, 0.38188804, 0.66323077, 0.83878719],\n       [0.69391367, 0.71631395, 0.98692463, 0.15381442],\n       [0.97299405, 0.49236495, 0.53853741, 0.99318735]])"},"exec_count":20,"output_type":"execute_result"}},"pos":82,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":26,"id":"f81125","input":"maxes = np.argmax(B,axis=0)\nmaxes\nB.T[[0,1,2,3],maxes]","output":{"0":{"data":{"text/plain":"array([0.97299405, 0.71631395, 0.98692463, 0.99318735])"},"exec_count":26,"output_type":"execute_result"}},"pos":84,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":38,"id":"1a43a4","input":"#Exercise\n#Find the index (row and column) and the value of the biggest entry in B\nnp.argmax(B)\nB.flatten()[11]","output":{"0":{"data":{"text/plain":"0.9931873525764595"},"exec_count":38,"output_type":"execute_result"}},"pos":83,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":38,"id":"ebf91f","input":"sex_col = A[:,-1]\nprint(sex_col)\nA[sex_col == 'F',:]","output":{"0":{"name":"stdout","output_type":"stream","text":"['F' 'M' 'F']\n"},"1":{"data":{"text/plain":"array([['150.701', '62.5', 'F'],\n       ['140.19', '51.5', 'F']], dtype='<U32')"},"exec_count":38,"output_type":"execute_result"}},"pos":26,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":39,"id":"435ca2","input":"# This is item-wise multiplication\n\nB*A","output":{"0":{"data":{"text/plain":"array([ 0,  9, 16, 21, 24, 25, 24, 21, 16,  9,  0])"},"exec_count":39,"output_type":"execute_result"}},"pos":54,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":41,"id":"0582c2","input":"np.exp(A)","output":{"0":{"data":{"text/plain":"array([1.00000000e+00, 2.71828183e+00, 7.38905610e+00, 2.00855369e+01,\n       5.45981500e+01, 1.48413159e+02, 4.03428793e+02, 1.09663316e+03,\n       2.98095799e+03, 8.10308393e+03, 2.20264658e+04])"},"exec_count":41,"output_type":"execute_result"}},"pos":57,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":41,"id":"0d6e0d","input":"np.median(B,axis=0)","output":{"0":{"data":{"text/plain":"array([0.79428538, 0.49236495, 0.66323077, 0.83878719])"},"exec_count":41,"output_type":"execute_result"}},"pos":85,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":47,"id":"33180a","input":"# Review of enumeration.....\n\nL = list(\"ABC\")\nL\nfor letter in L:\n    print(letter)\nfor index,letter in enumerate(L):\n    print(index,letter)","output":{"0":{"name":"stdout","output_type":"stream","text":"A\nB\nC\n0 A\n1 B\n2 C\n"}},"pos":1,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":47,"id":"b96cf9","input":"np.sum(A,axis=0)","output":{"0":{"data":{"text/plain":"array([24, 28, 32, 36])"},"exec_count":47,"output_type":"execute_result"}},"pos":75,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":50,"id":"1ea94b","input":"np.sum(A,axis=1)","output":{"0":{"data":{"text/plain":"array([ 6, 22, 38, 54])"},"exec_count":50,"output_type":"execute_result"}},"pos":76,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":50,"id":"ebee16","input":"# This is the dot product, from linear algebra.\n\nB.dot(A) == sum(B*A)","output":{"0":{"data":{"text/plain":"True"},"exec_count":50,"output_type":"execute_result"}},"pos":53,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":51,"id":"4c49c6","input":"np.sum(A)","output":{"0":{"data":{"text/plain":"120"},"exec_count":51,"output_type":"execute_result"}},"pos":78,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":55,"id":"26f0b6","input":"np.argmax(A,axis=0)","output":{"0":{"data":{"text/plain":"array([3, 3, 3, 3])"},"exec_count":55,"output_type":"execute_result"}},"pos":80,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":57,"id":"f41dca","input":"start  = 0\nstop = 2\nincrement = 0.01\nx = np.arange(start,stop,increment)\nx","output":{"0":{"data":{"text/plain":"array([0.  , 0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1 ,\n       0.11, 0.12, 0.13, 0.14, 0.15, 0.16, 0.17, 0.18, 0.19, 0.2 , 0.21,\n       0.22, 0.23, 0.24, 0.25, 0.26, 0.27, 0.28, 0.29, 0.3 , 0.31, 0.32,\n       0.33, 0.34, 0.35, 0.36, 0.37, 0.38, 0.39, 0.4 , 0.41, 0.42, 0.43,\n       0.44, 0.45, 0.46, 0.47, 0.48, 0.49, 0.5 , 0.51, 0.52, 0.53, 0.54,\n       0.55, 0.56, 0.57, 0.58, 0.59, 0.6 , 0.61, 0.62, 0.63, 0.64, 0.65,\n       0.66, 0.67, 0.68, 0.69, 0.7 , 0.71, 0.72, 0.73, 0.74, 0.75, 0.76,\n       0.77, 0.78, 0.79, 0.8 , 0.81, 0.82, 0.83, 0.84, 0.85, 0.86, 0.87,\n       0.88, 0.89, 0.9 , 0.91, 0.92, 0.93, 0.94, 0.95, 0.96, 0.97, 0.98,\n       0.99, 1.  , 1.01, 1.02, 1.03, 1.04, 1.05, 1.06, 1.07, 1.08, 1.09,\n       1.1 , 1.11, 1.12, 1.13, 1.14, 1.15, 1.16, 1.17, 1.18, 1.19, 1.2 ,\n       1.21, 1.22, 1.23, 1.24, 1.25, 1.26, 1.27, 1.28, 1.29, 1.3 , 1.31,\n       1.32, 1.33, 1.34, 1.35, 1.36, 1.37, 1.38, 1.39, 1.4 , 1.41, 1.42,\n       1.43, 1.44, 1.45, 1.46, 1.47, 1.48, 1.49, 1.5 , 1.51, 1.52, 1.53,\n       1.54, 1.55, 1.56, 1.57, 1.58, 1.59, 1.6 , 1.61, 1.62, 1.63, 1.64,\n       1.65, 1.66, 1.67, 1.68, 1.69, 1.7 , 1.71, 1.72, 1.73, 1.74, 1.75,\n       1.76, 1.77, 1.78, 1.79, 1.8 , 1.81, 1.82, 1.83, 1.84, 1.85, 1.86,\n       1.87, 1.88, 1.89, 1.9 , 1.91, 1.92, 1.93, 1.94, 1.95, 1.96, 1.97,\n       1.98, 1.99])"},"exec_count":57,"output_type":"execute_result"}},"pos":59,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":59,"id":"455ccd","input":"number_of_numbers = 70\nnp.linspace(start,stop,number_of_numbers)","output":{"0":{"data":{"text/plain":"array([0.        , 0.02898551, 0.05797101, 0.08695652, 0.11594203,\n       0.14492754, 0.17391304, 0.20289855, 0.23188406, 0.26086957,\n       0.28985507, 0.31884058, 0.34782609, 0.37681159, 0.4057971 ,\n       0.43478261, 0.46376812, 0.49275362, 0.52173913, 0.55072464,\n       0.57971014, 0.60869565, 0.63768116, 0.66666667, 0.69565217,\n       0.72463768, 0.75362319, 0.7826087 , 0.8115942 , 0.84057971,\n       0.86956522, 0.89855072, 0.92753623, 0.95652174, 0.98550725,\n       1.01449275, 1.04347826, 1.07246377, 1.10144928, 1.13043478,\n       1.15942029, 1.1884058 , 1.2173913 , 1.24637681, 1.27536232,\n       1.30434783, 1.33333333, 1.36231884, 1.39130435, 1.42028986,\n       1.44927536, 1.47826087, 1.50724638, 1.53623188, 1.56521739,\n       1.5942029 , 1.62318841, 1.65217391, 1.68115942, 1.71014493,\n       1.73913043, 1.76811594, 1.79710145, 1.82608696, 1.85507246,\n       1.88405797, 1.91304348, 1.94202899, 1.97101449, 2.        ])"},"exec_count":59,"output_type":"execute_result"}},"pos":58,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":62,"id":"98062a","input":"np.argmax(B,axis=1)","output":{"0":{"data":{"text/plain":"array([3, 1, 0])"},"exec_count":62,"output_type":"execute_result"}},"pos":86,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":64,"id":"80414f","input":"# Exercise:\n\n# Find the argmin for B on both axes and interpret the result\n\n# Do the same thing for the mean and median.\n","pos":87,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":69,"id":"77a715","input":"np.log(np.e)==1\n","output":{"0":{"data":{"text/plain":"True"},"exec_count":69,"output_type":"execute_result"}},"pos":65,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":72,"id":"6bb0d2","input":"A","output":{"0":{"data":{"text/plain":"array([['150.701', '62.5', 'F'],\n       ['173.101', '70.5', 'M'],\n       ['140.19', '51.5', 'F']], dtype='<U32')"},"exec_count":72,"output_type":"execute_result"}},"pos":25,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":78,"id":"13d199","input":"np.zeros(10).reshape(2,5)","output":{"0":{"data":{"text/plain":"array([[0., 0., 0., 0., 0.],\n       [0., 0., 0., 0., 0.]])"},"exec_count":78,"output_type":"execute_result"}},"pos":32,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":79,"id":"8a3f9f","input":"np.eye(5)  # The multiplicative identity","output":{"0":{"data":{"text/plain":"array([[1., 0., 0., 0., 0.],\n       [0., 1., 0., 0., 0.],\n       [0., 0., 1., 0., 0.],\n       [0., 0., 0., 1., 0.],\n       [0., 0., 0., 0., 1.]])"},"exec_count":79,"output_type":"execute_result"}},"pos":33,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":85,"id":"0039c7","input":"A.shape","output":{"0":{"data":{"text/plain":"(12,)"},"exec_count":85,"output_type":"execute_result"}},"pos":35,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":86,"id":"b68a98","input":"A = A.reshape(3,4)\nA","output":{"0":{"data":{"text/plain":"array([[ 0,  1,  2,  3],\n       [ 4,  5,  6,  7],\n       [ 8,  9, 10, 11]])"},"exec_count":86,"output_type":"execute_result"}},"pos":36,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":87,"id":"50135f","input":"A.shape","output":{"0":{"data":{"text/plain":"(3, 4)"},"exec_count":87,"output_type":"execute_result"}},"pos":37,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":88,"id":"eda89c","input":"A.reshape(6,2)","output":{"0":{"data":{"text/plain":"array([[ 0,  1],\n       [ 2,  3],\n       [ 4,  5],\n       [ 6,  7],\n       [ 8,  9],\n       [10, 11]])"},"exec_count":88,"output_type":"execute_result"}},"pos":38,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":89,"id":"391984","input":"A.reshape(4,3)","output":{"0":{"data":{"text/plain":"array([[ 0,  1,  2],\n       [ 3,  4,  5],\n       [ 6,  7,  8],\n       [ 9, 10, 11]])"},"exec_count":89,"output_type":"execute_result"}},"pos":39,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":9,"id":"95813f","input":"# Second row, all columns\nA[1,:]","output":{"0":{"data":{"text/plain":"array(['173.101', '70.5', 'M'], dtype='<U32')"},"exec_count":9,"output_type":"execute_result"}},"pos":22,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":99,"id":"3e5ea5","input":"A = np.array( range(12))\nA\n","output":{"0":{"data":{"text/plain":"array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11])"},"exec_count":99,"output_type":"execute_result"}},"pos":34,"state":"done","type":"cell"}
{"cell_type":"code","id":"19a425","input":"","kernel":"anaconda5","pos":56,"state":"done","type":"cell"}
{"cell_type":"code","id":"89948e","input":"","pos":42,"state":"done","type":"cell"}
{"cell_type":"markdown","exec_count":0,"id":"3b1560","input":"### Matrix product\n\nIf you want to get the matrix product then you have two options.\n\nOne is to conver to the numpy \"matrix\" type.\n","pos":17,"state":"done","type":"cell"}
{"cell_type":"markdown","exec_count":73,"id":"672a25","input":"## Exercise:\n\n#A = np.array(data)\n\n\n## Slice out these:\n\n# 1)  The 3rd column\n\n# 2)  The last row\n# 3)  The last 2 columns\n","kernel":"anaconda5","pos":28,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"2f8216","input":"## Lists of lists\n\nSometimes lists of lists are called 2-dimensional arrays.  \n\nEvery element in a 2D array can be specified by its row and column.\n\nFor instance Bob's sex is in the second row and , third column of the matrix `data`.\n\n\n\n","pos":4,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"39821c","input":"Not specifying an axis just adds up everything.\n","pos":77,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"3be140","input":"## Data\n\nIn machine learning, statistics and other applications, we need to represent data.  \n\nOften we represent data in _vectors_ which are just ordered lists of numbers or words.  \n\nFor instance if we have data about people, which records their _height (cm)_, _weight (kg)_, and _sex_, data about a particular person might be represented as a vector like this one:\n\n```\n[173.101, 70.5,'M']\n```\nThis vector says that the person in question is 173.101 cm tall, weighs 70.5 kg, and is a male.  \n\nIf we have data about several people, then we have many vectors of information.  Typically these are stacked to form a _matrix_.\n\nFor instance if we have three people, Alice, Bob, and Carol, then their data might together make a 3 by 3 matrix like this one:\n\n```\n[\n[150.701, 62.5,'F'],\n[173.101, 70.5,'M'],\n[140.19, 51.5,'F']\n]\n```\nI have written this as a list of lists.\n","pos":0,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"3c80c8","input":"## Numpy arrays\n\nNumpy (numerical python) supports $n$-dimensional arrays.\n\nThey call these `ndarray` [types](https://docs.scipy.org/doc/numpy-1.15.0/reference/generated/numpy.ndarray.html).  \n\nWe will only use 1-dimensional and 2-dimensional arrays.  \n\nLet's first go over some ways to generate 1-dimensional arrays of numbers in numpy.\n\nWe'll discuss\n\n1. conversion from python arrays\n1. arange\n1. linspace\n1. logspace\n1. zeros\n1. ones\n1. random\n","pos":7,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"42e7d8","input":"### Numpy 2-D arrays\n\nThe way to create a 2-D array in numpy is usually to reshape a 1-D array. \n\nBelow are examples of using the reshape command.\n","pos":9,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"4325f2","input":"# And more...\n\nHere is a nice tutorial showing you how to do more things...\n\n[http://cs231n.github.io/python-numpy-tutorial/](http://cs231n.github.io/python-numpy-tutorial/)\n    ","pos":88,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"64ae4f","input":"#### Linear algebra operations\n\nOften we want to do matrix arithmetic on numpy arrays.  \nBy default when you \"multiply\" numpy arrays you don't get the matrix product, you get respective elements multiplied together.\n\n","kernel":"anaconda5","pos":14,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"73946a","input":"## Slicing\n\nNow we practice doing 2D array slicing.\n\nYou may want to review 1D array slicing if you're still not sure how that works.\n\nhttps://stackoverflow.com/questions/509211/understanding-pythons-slice-notation\n\nThe basic form of a 2D slice is \n\n```\nA[<slice of rows>,<slice of columns>]\n```\n\nHere are some examples.\n","pos":19,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"754d12","input":"Another method is to use the \"dot\" method.\n\nThis is uglier, but I recommend it, because slices of \"matrix\" types can be weird (see \"slicing\" below).\n","pos":18.5,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"82a9bf","input":"# Exercise:\n\nIn the same window, plot all of the following\n\n    1. y = sin(x)\n    2. y = x\n    3. y = x - x**3/(3*2)\n    4. y = x - x**3/3 + x**5/(5*4*3*2)\n    5. y = x - x**3/3 + x**5/(5*4*3*2) - x**7/(7*6*5*4*3*2)\n","pos":61,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"8804f9","input":"Weirdly the sum is a vector?\n\nIf you check, you'll see that these are _column_ sums.  That means that 24 is the sum of the first column, 28 is the sum of the 2nd column, etc.\n\nWhat if you want to sum the rows instead?\n\nThat's what the optional _axis_ parameter is for.\n\nColumns are axis 0.  Rows are axis 1.\n","pos":74,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"9e18bf","input":"","pos":13,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"9e3285","input":"## The shape of an array\n\nHere we look at how to make matrices out of 1D arrays, and to \"flatten\" 2D arrays into 1D arrays.\n","pos":29,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"b42382","input":"## Vectorization\n\nOperations on numpy arrays are _vectorized_.  That means that most operations happen to all the elements at once.  \nHere are some examples.\n\n","pos":45,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"b9567c","input":"The above output means that the row index of the biggest element in each column is 3.\n\nAnalyzing a random matrix might shed more light on this...","pos":81,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"c395c0","input":"Notice that we first specify the row `data[1]`.  So `data[1]` is itself a list.  Then we get the third column by accessing the third element of that list:\n\n```\ndata[1][2]\n```\n","pos":6,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"d5bcf8","input":"## Axes\n\nWhat happens if you sum a numpy array?  Let's see...\n\n","pos":71,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"ed7acc","input":"#### Other matrix operations\n\nOften we want the inverse, the transpose, or the \"pseudo-inverse\".\n\nHere is how to get each of these.\n","pos":18.875,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"fa4197","input":"Lots of numpy built-in function work this way...","pos":79,"state":"done","type":"cell"}
{"end":1549378502133,"exec_count":4,"id":"fd3ca3","input":"# Unlike a python array, in a numpy array all elements are the same type\n# If any string is included, then everything must be a string\n\nL = [1,2,3,4,5,'a']\n\n\nLnp = np.array(L)\n\nLnp,Lnp.dtype","kernel":"anaconda5","output":{"0":{"data":{"text/plain":"(array(['1', '2', '3', '4', '5', 'a'], dtype='<U21'), dtype('<U21'))"},"exec_count":4}},"pos":8.5,"start":1549378502122,"state":"done","type":"cell"}
{"end":1549378617280,"exec_count":6,"id":"2acc67","input":"# linspace\n\n# This is similar to arange, but you give a start, a stop, and the _number_ of points.\n\nnp.linspace(0,1,10)","kernel":"anaconda5","output":{"0":{"data":{"text/plain":"array([0.        , 0.11111111, 0.22222222, 0.33333333, 0.44444444,\n       0.55555556, 0.66666667, 0.77777778, 0.88888889, 1.        ])"},"exec_count":6}},"pos":8.875,"start":1549378617271,"state":"done","type":"cell"}
{"end":1549379353340,"exec_count":37,"id":"b31c64","input":"# zeros\n\n# Often you just want an array of zeros.\n\nnp.zeros(10)","kernel":"anaconda5","output":{"0":{"data":{"text/plain":"array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])"},"exec_count":37}},"pos":8.96875,"start":1549379353325,"state":"done","type":"cell"}
{"end":1549379391266,"exec_count":40,"id":"91823b","input":"A.reshape(8,2)","kernel":"anaconda5","output":{"0":{"data":{"text/plain":"array([[0.        , 0.06666667],\n       [0.13333333, 0.2       ],\n       [0.26666667, 0.33333333],\n       [0.4       , 0.46666667],\n       [0.53333333, 0.6       ],\n       [0.66666667, 0.73333333],\n       [0.8       , 0.86666667],\n       [0.93333333, 1.        ]])"},"exec_count":40}},"pos":12.5,"start":1549379391253,"state":"done","type":"cell"}
{"end":1549379580751,"exec_count":43,"id":"28289f","input":"\n#  Here are 10 values sampled from a standard normal distribution\n\nnp.random.randn(10)","kernel":"anaconda5","output":{"0":{"data":{"text/plain":"array([ 1.07942322,  0.3080182 ,  1.39840618,  1.4107934 ,  0.48400112,\n       -0.70532046, -1.22057276,  0.26371531, -0.60847375,  2.35205058])"},"exec_count":43}},"pos":8.9921875,"start":1549379580742,"state":"done","type":"cell"}
{"end":1549379896535,"exec_count":54,"id":"751e39","input":"import numpy as np\n\nA = np.random.randint(0,10,9).reshape(3,3)\nB = np.random.randint(0,10,9).reshape(3,3)\nA","kernel":"anaconda5","output":{"0":{"data":{"text/plain":"array([[7, 1, 7],\n       [0, 9, 9],\n       [4, 0, 2]])"},"exec_count":54}},"pos":14.5,"start":1549379896521,"state":"done","type":"cell"}
{"end":1549380035632,"exec_count":58,"id":"3c92f1","input":"A.dot(B)","kernel":"anaconda5","output":{"0":{"data":{"text/plain":"array([[ 58,  10, 114],\n       [ 36,  27,  99],\n       [ 28,   4,  46]])"},"exec_count":58}},"pos":18.75,"start":1549380035621,"state":"done","type":"cell"}
{"end":1549380231427,"exec_count":64,"id":"ad27fd","input":"# The transpose\n\nA.T","kernel":"anaconda5","output":{"0":{"data":{"text/plain":"array([[7, 0, 4],\n       [1, 9, 0],\n       [7, 9, 2]])"},"exec_count":64}},"pos":18.984375,"start":1549380231415,"state":"done","type":"cell"}
{"end":1549380321383,"exec_count":66,"id":"34ba9b","input":"#  But for rectangular matrices the pseudo-inverse is also defined (where the regular inverse is not)\n\nC = np.random.randn(16).reshape(8,2)\nC","kernel":"anaconda5","output":{"0":{"data":{"text/plain":"array([[-1.67395215, -0.75074329],\n       [-1.61175077,  2.33154874],\n       [-1.99531934,  2.06477457],\n       [-0.16325107,  2.59638869],\n       [ 0.19130273,  1.42616082],\n       [-1.11099185,  0.19262457],\n       [ 0.05995189,  0.48841386],\n       [-0.89279144, -0.76279689]])"},"exec_count":66}},"pos":18.99609375,"start":1549380321373,"state":"done","type":"cell"}
{"end":1549380330263,"exec_count":67,"id":"9902d0","input":"np.linalg.pinv(C)","kernel":"anaconda5","output":{"0":{"data":{"text/plain":"array([[-0.20113761, -0.09224429, -0.14147895,  0.0690268 ,  0.06749242,\n        -0.11055328,  0.02252836, -0.11930847],\n       [-0.10117965,  0.0880915 ,  0.05915257,  0.15227336,  0.09297126,\n        -0.02519059,  0.03165492, -0.07597376]])"},"exec_count":67}},"pos":18.998046875,"start":1549380330257,"state":"done","type":"cell"}
{"end":1549380736156,"exec_count":83,"id":"9c8d51","input":"#  You can use argmin, argmax, and even \"argsort\"\nnums = np.array([8,9,1,3,0,1,44])\nnums[np.argsort(nums)]\n","kernel":"anaconda5","output":{"0":{"data":{"text/plain":"array([ 0,  1,  1,  3,  8,  9, 44])"},"exec_count":83}},"pos":87.5,"start":1549380736145,"state":"done","type":"cell"}
{"end":1549384818254,"exec_count":86,"id":"f2560b","input":"# arange\n\n# This method gives you an \"interval\" of values.\n# You specify a start, a stop, and a step\n\nnp.arange(0,1,0.5)","kernel":"anaconda5","output":{"0":{"data":{"text/plain":"array([0. , 0.5])"},"exec_count":86}},"pos":8.75,"start":1549384818244,"state":"done","type":"cell"}
{"end":1549384975526,"exec_count":89,"id":"366a37","input":"\n# Or an array of ones\n\nnp.ones(10)","kernel":"anaconda5","output":{"0":{"data":{"text/plain":"array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])"},"exec_count":89}},"pos":8.984375,"start":1549384975515,"state":"done","type":"cell"}
{"end":1549385058535,"exec_count":92,"id":"613384","input":"#  Here are 5 integers sampled uniformly at random between 0 and 10\n\nnp.random.randint(0,2,10)","kernel":"anaconda5","output":{"0":{"data":{"text/plain":"array([1, 1, 0, 0, 1, 0, 1, 0, 0, 0])"},"exec_count":92}},"pos":8.99609375,"start":1549385058525,"state":"done","type":"cell"}
{"end":1549555992979,"exec_count":98,"id":"c279b5","input":"A = np.array(data)\nA","kernel":"anaconda5","output":{"0":{"data":{"text/plain":"array([['150.701', '62.5', 'F'],\n       ['173.101', '70.5', 'M'],\n       ['140.19', '51.5', 'F']], dtype='<U32')"},"exec_count":98}},"pos":19.5,"start":1549555992957,"state":"done","type":"cell"}
{"end":1549556737377,"exec_count":109,"id":"22f3bc","input":"Bm = np.matrix(B)\nBm*Bm.T","kernel":"anaconda5","output":{"0":{"data":{"text/plain":"matrix([[10.31375423, -0.18473749,  2.25973518,  0.5994631 , -2.96526844],\n        [-0.18473749,  1.82469468,  1.08163423,  1.36854351, -0.21842   ],\n        [ 2.25973518,  1.08163423,  3.36969746,  1.52518487,  1.36238664],\n        [ 0.5994631 ,  1.36854351,  1.52518487,  2.34689807, -0.08162065],\n        [-2.96526844, -0.21842   ,  1.36238664, -0.08162065,  3.16889348]])"},"exec_count":109}},"pos":30.5,"start":1549556737367,"state":"done","type":"cell"}
{"end":1549556839228,"exec_count":112,"id":"2dedfe","input":"Bm.A[:,2]","kernel":"anaconda5","output":{"0":{"data":{"text/plain":"array([-0.15148783,  0.70670827,  1.16286656,  1.35880688,  0.62476067])"},"exec_count":112}},"pos":30.75,"start":1549556839214,"state":"done","type":"cell"}
{"end":1549557028828,"exec_count":115,"id":"52215f","input":"A[conditions]","kernel":"anaconda5","output":{"0":{"data":{"text/plain":"array([ 5,  6,  7,  8,  9, 10])"},"exec_count":115}},"pos":49.5,"start":1549557028816,"state":"done","type":"cell"}
{"end":1549557653549,"exec_count":137,"id":"7c82e3","input":"np.mean(A,axis=0)","kernel":"anaconda5","output":{"0":{"data":{"text/plain":"array([6., 7., 8., 9.])"},"exec_count":137}},"pos":72.5,"start":1549557653536,"state":"done","type":"cell"}
{"exec_count":16,"id":"904622","input":"# logspace\n\n# Similar to linspace, but now the points are separated by geometrically increasing amounts.\n# There is an implicit base b (10 by default)\n# It starts at b**start and stops at b**stop\n\nnp.logspace(1,5,num=10)","kernel":"anaconda5","output":{"0":{"data":{"text/plain":"array([1.00000000e+01, 2.78255940e+01, 7.74263683e+01, 2.15443469e+02,\n       5.99484250e+02, 1.66810054e+03, 4.64158883e+03, 1.29154967e+04,\n       3.59381366e+04, 1.00000000e+05])"},"exec_count":16}},"pos":8.9375,"state":"done","type":"cell"}
{"exec_count":62,"id":"ece18d","input":"#The inverse \n\nnp.linalg.inv(A)\n","kernel":"anaconda5","output":{"0":{"data":{"text/plain":"array([[-0.2       ,  0.02222222,  0.6       ],\n       [-0.4       ,  0.15555556,  0.7       ],\n       [ 0.4       , -0.04444444, -0.7       ]])"},"exec_count":62}},"pos":18.9375,"state":"done","type":"cell"}
{"exec_count":63,"id":"7508bc","input":"# Everything is numerical, so it can be a little sloppy.\n# Here's A*A^(-1)\nA.dot(np.linalg.inv(A))","kernel":"anaconda5","output":{"0":{"data":{"text/plain":"array([[ 1.00000000e+00, -2.08166817e-17, -3.33066907e-16],\n       [ 0.00000000e+00,  1.00000000e+00,  3.33066907e-16],\n       [ 2.22044605e-16, -2.77555756e-17,  1.00000000e+00]])"},"exec_count":63}},"pos":18.96875,"state":"done","type":"cell"}
{"exec_count":65,"id":"26eb69","input":"#  The pseudo-inverse\n#  (we'll explain this later)\n# For a square matrix, the pseudo-inverse is just the inverse\n\nnp.linalg.pinv(A)","kernel":"anaconda5","output":{"0":{"data":{"text/plain":"array([[-0.2       ,  0.02222222,  0.6       ],\n       [-0.4       ,  0.15555556,  0.7       ],\n       [ 0.4       , -0.04444444, -0.7       ]])"},"exec_count":65}},"pos":18.9921875,"state":"done","type":"cell"}
{"id":"5b7985","input":"","pos":80.5,"state":"done","type":"cell"}
{"id":0,"time":1550179942685,"type":"user"}
{"last_load":1549378066851,"type":"file"}