{"backend_state":"running","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":83628032},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.5"}},"type":"settings"}
{"cell_type":"code","exec_count":10,"id":"da2272","input":"Z = RBF(X,lm1,lm2,gamma=.1)\nZa = Z[y==1]\nplt.figure(figsize=(8,8))\nZb = Z[y==-1]\nplt.scatter(Za[:,0],Za[:,1])\nplt.scatter(Zb[:,0],Zb[:,1])\nplt.xlabel(r\"$\\phi_\\gamma(\\bar{x},\\bar{l_1})$\")\nplt.ylabel(r\"$\\phi_\\gamma(\\bar{x},\\bar{l_2})$\")\nplt.show()","output":{"0":{"data":{"image/png":"583ee0bbdab43a34bf8a885de0ed47f1607724ad","text/plain":"<Figure size 576x576 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":3,"type":"cell"}
{"cell_type":"code","exec_count":11,"id":"bc24db","input":"x = np.linspace(np.min(X)-2,np.max(X)+2,100)\ny = np.linspace(np.min(X)-2,np.max(X)+2,100)\na,b = np.meshgrid(x,y)\ndom = np.c_[a.ravel(),b.ravel()]\ngamma=0.1\nz = np.exp(-gamma*np.sum((dom-lm1)**2,axis=1))\nz += np.exp(-gamma*np.sum((dom-lm2)**2,axis=1))\n\nplt.contourf(dom[:,0].reshape(a.shape),dom[:,1].reshape(b.shape),z.reshape(a.shape),levels=100)\nplt.scatter(Xa[:,0],Xa[:,1],alpha=0.4)\nplt.scatter(Xb[:,0],Xb[:,1],alpha=0.4)\nplt.colorbar()\nplt.title(\"RBF with two landmarks\")\nplt.show()","output":{"0":{"data":{"image/png":"b25bed8a229f64f9593dc4ea4aecb372f302f0f7","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":4,"type":"cell"}
{"cell_type":"code","exec_count":22,"id":"fac7c6","input":"from sklearn.preprocessing import MinMaxScaler\nfrom sklearn.model_selection import train_test_split\n\nX = df.values[:,:-1]\ny = df.values[:,-1]\n\nX_train,X_test,y_train,y_test = train_test_split(X,y)\n\nscaler = MinMaxScaler()\nscaler.fit(X_train)\nX_train = scaler.transform(X_train)\nX_test = scaler.transform(X_test)\nX_train.shape,X_test.shape\n\n","output":{"0":{"data":{"text/plain":"((772, 8), (258, 8))"},"exec_count":22,"output_type":"execute_result"}},"pos":6,"type":"cell"}
{"cell_type":"code","exec_count":23,"id":"d6f740","input":"from sklearn.linear_model import LinearRegression\n\nmodel = LinearRegression()\nmodel.fit(X_train,y_train)\nmodel.score(X_test,y_test)\n","output":{"0":{"data":{"text/plain":"0.5928116391723559"},"exec_count":23,"output_type":"execute_result"}},"pos":7,"type":"cell"}
{"cell_type":"code","exec_count":27,"id":"2beebe","input":"import numpy as np\ndef rbf(x,landmarks,gamma=1):\n    dims = []\n    for lm in landmarks:\n        new_dim = np.exp(-gamma*np.sum((x-lm)**2))\n        dims.append(new_dim)\n    return np.array(dims)\n\ndef RBF(X,landmarks,gamma=1):\n    Z = np.zeros(X.shape[0]*len(landmarks)).reshape(X.shape[0],len(landmarks))\n    for i,x in enumerate(X):\n        Z[i] = rbf(x,landmarks,gamma)\n    return np.array(Z)\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndf = pd.read_excel(\"Concrete_Data.xls\")\ndf.head()\n","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Cement (component 1)(kg in a m^3 mixture)</th>\n      <th>Blast Furnace Slag (component 2)(kg in a m^3 mixture)</th>\n      <th>Fly Ash (component 3)(kg in a m^3 mixture)</th>\n      <th>Water  (component 4)(kg in a m^3 mixture)</th>\n      <th>Superplasticizer (component 5)(kg in a m^3 mixture)</th>\n      <th>Coarse Aggregate  (component 6)(kg in a m^3 mixture)</th>\n      <th>Fine Aggregate (component 7)(kg in a m^3 mixture)</th>\n      <th>Age (day)</th>\n      <th>Concrete compressive strength(MPa, megapascals)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>540.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>162.0</td>\n      <td>2.5</td>\n      <td>1040.0</td>\n      <td>676.0</td>\n      <td>28</td>\n      <td>79.986111</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>540.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>162.0</td>\n      <td>2.5</td>\n      <td>1055.0</td>\n      <td>676.0</td>\n      <td>28</td>\n      <td>61.887366</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>332.5</td>\n      <td>142.5</td>\n      <td>0.0</td>\n      <td>228.0</td>\n      <td>0.0</td>\n      <td>932.0</td>\n      <td>594.0</td>\n      <td>270</td>\n      <td>40.269535</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>332.5</td>\n      <td>142.5</td>\n      <td>0.0</td>\n      <td>228.0</td>\n      <td>0.0</td>\n      <td>932.0</td>\n      <td>594.0</td>\n      <td>365</td>\n      <td>41.052780</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>198.6</td>\n      <td>132.4</td>\n      <td>0.0</td>\n      <td>192.0</td>\n      <td>0.0</td>\n      <td>978.4</td>\n      <td>825.5</td>\n      <td>360</td>\n      <td>44.296075</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"   Cement (component 1)(kg in a m^3 mixture)  \\\n0                                      540.0   \n1                                      540.0   \n2                                      332.5   \n3                                      332.5   \n4                                      198.6   \n\n   Blast Furnace Slag (component 2)(kg in a m^3 mixture)  \\\n0                                                0.0       \n1                                                0.0       \n2                                              142.5       \n3                                              142.5       \n4                                              132.4       \n\n   Fly Ash (component 3)(kg in a m^3 mixture)  \\\n0                                         0.0   \n1                                         0.0   \n2                                         0.0   \n3                                         0.0   \n4                                         0.0   \n\n   Water  (component 4)(kg in a m^3 mixture)  \\\n0                                      162.0   \n1                                      162.0   \n2                                      228.0   \n3                                      228.0   \n4                                      192.0   \n\n   Superplasticizer (component 5)(kg in a m^3 mixture)  \\\n0                                                2.5     \n1                                                2.5     \n2                                                0.0     \n3                                                0.0     \n4                                                0.0     \n\n   Coarse Aggregate  (component 6)(kg in a m^3 mixture)  \\\n0                                             1040.0      \n1                                             1055.0      \n2                                              932.0      \n3                                              932.0      \n4                                              978.4      \n\n   Fine Aggregate (component 7)(kg in a m^3 mixture)  Age (day)  \\\n0                                              676.0         28   \n1                                              676.0         28   \n2                                              594.0        270   \n3                                              594.0        365   \n4                                              825.5        360   \n\n   Concrete compressive strength(MPa, megapascals)   \n0                                         79.986111  \n1                                         61.887366  \n2                                         40.269535  \n3                                         41.052780  \n4                                         44.296075  "},"exec_count":27,"output_type":"execute_result"}},"pos":5,"type":"cell"}
{"cell_type":"code","exec_count":45,"id":"ab2d77","input":"LM = np.random.choice(range(X_train.shape[0]),200)\nlandmarks = X_train[LM]\nZ_train = RBF(X_train,landmarks)\nZ_test = RBF(X_test,landmarks)\n\nmodel.fit(Z_train,y_train)\nmodel.score(Z_test,y_test)","output":{"0":{"data":{"text/plain":"0.8650844481972678"},"exec_count":45,"output_type":"execute_result"}},"pos":8,"type":"cell"}
{"cell_type":"code","exec_count":46,"id":"139c82","input":"LM = np.random.choice(range(X_train.shape[0]),200)\nlandmarks = X_train[LM]\nZ_train = RBF(X_train,landmarks,gamma=1/2)\nZ_test = RBF(X_test,landmarks,gamma=1/2)\n\nmodel.fit(Z_train,y_train)\nmodel.score(Z_test,y_test)","output":{"0":{"data":{"text/plain":"0.8787312878100911"},"exec_count":46,"output_type":"execute_result"}},"pos":9,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"e1a6fe","input":"from sklearn.datasets import make_moons\nfrom sklearn.datasets import make_blobs\nimport numpy as np\n\nX,y = make_blobs(centers=2,random_state=42,cluster_std=4)\n#X,y = make_moons(noise=0.1)\ny = y*2-1\n\n\nimport matplotlib.pyplot as plt\n\nXa = X[y==1]\nXb = X[y==-1]\nplt.scatter(Xa[:,0],Xa[:,1])\nplt.scatter(Xb[:,0],Xb[:,1])\nplt.show()","output":{"0":{"data":{"image/png":"f318334033155d570c86b49e2eb7f6f5aa995083","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":1,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"1a5008","input":"shuff = np.random.permutation(X.shape[0])\nX = X[shuff]\ny = y[shuff]\nlm1 = np.mean(Xa,axis=0)\nlm2 = np.mean(Xb,axis=0)\nimport numpy as np\ndef rbf(x,lm1,lm2,gamma=1):\n    dim1 = np.exp(-gamma*np.sum((x-lm1)**2))\n    dim2 = np.exp(-gamma*np.sum((x-lm2)**2))\n    return np.array([dim1,dim2])\n\ndef RBF(X,lm1,lm2,gamma=1):\n    Z = np.zeros_like(X)\n    for i,x in enumerate(X):\n        Z[i] = rbf(x,lm1,lm2,gamma)\n    return np.array(Z)\n\n","pos":2,"type":"cell"}
{"cell_type":"code","id":"50e960","input":"","pos":11,"type":"cell"}
{"cell_type":"code","id":"b73458","input":"","pos":10,"type":"cell"}
{"cell_type":"markdown","id":"550489","input":"### Gaussian Radial Basis Function\n\nIn this worksheet we expore a technique for transforming the columns of a dataset.\n\nSuppose $\\mathcal{X} = \\mathbb{R}^d$.\n\nLet $\\bar{l} \\in \\mathbb{R}^d$.  \n\nWe think of $\\bar{l}$ as a \"landmark\".  \n\nIt might be one of the datapoints in the training set.  \n\nNow for each $\\bar{x} \\in \\mathcal{X}$ we can produce a new feature column:\n\n$\\phi_\\gamma(\\bar{x},\\bar{l}) = \\exp(-\\gamma |\\!| \\bar{x}-\\bar{l} |\\!|^2)$\n\nThe meaning of $\\phi_\\gamma(\\bar{x},\\bar{l})$ is a kind of distance between $\\bar{x}$ and $\\bar{l}$. \n\nIt is not euclidean distance -- it weights points close to $\\bar{l}$ exponentially higher than more distant points (depending on $\\gamma$).\n\nThis gives a way of transforming the feature space.\n\nFor $k$ landmarks $\\bar{l}_1,\\bar{l}_2,\\ldots,\\bar{l}_k$, we can do the transformation\n\n$$\\bar{x} \\mapsto [\\phi_\\gamma(\\bar{x},\\bar{l}_1),\\phi_\\gamma(\\bar{x},\\bar{l}_2),\\ldots,\\phi_\\gamma(\\bar{x},\\bar{l}_k)]$$\n\nBelow we do an example with $d = k = 2$.\n","pos":0,"type":"cell"}
{"id":0,"time":1589080430749,"type":"user"}
{"last_load":1589080430964,"type":"file"}