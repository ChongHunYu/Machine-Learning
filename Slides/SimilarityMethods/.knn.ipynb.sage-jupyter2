{"backend_state":"running","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":83693568},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.5"}},"type":"settings"}
{"cell_type":"code","exec_count":120,"id":"4b3b74","input":"from sklearn.datasets import make_regression\n\nxx = np.linspace(0,5)\nX = np.random.choice(xx,100)\ny = np.sin(X)+ np.random.randn(len(X))/4\nplt.scatter(X,y,alpha=0.6)\nplt.show()","output":{"0":{"data":{"image/png":"873b66a405adae3403c6b004a30c5050f37571f0","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":16,"type":"cell"}
{"cell_type":"code","exec_count":126,"id":"80c20d","input":"# KNN_predict_all(X_known,y_known,X_predict,k=3,distance=euclidean,regression= False):\n\nfor k in [1,3,6,10,15,20]:\n    yhat = KNN_predict_all(X.reshape(-1,1),y,xx,regression=True,k=k)\n    plt.scatter(X,y,alpha=0.6)\n    plt.plot(xx,yhat,c='r')\n    plt.title(\"KNN regression with k = {}\".format(k))\n    plt.show()","output":{"0":{"data":{"image/png":"08fb1e3499aeec1bdec28b762913d928b72be185","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"},"1":{"data":{"image/png":"d0f241c7a588bdb6e78583ca89509589fb893b32","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"},"2":{"data":{"image/png":"9b970a64d90bb6889e31ed98ae35fff57f225609","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"},"3":{"data":{"image/png":"462d5984f199de4fe53870869973d09270a0e74f","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"},"4":{"data":{"image/png":"3edc71cc834574565b1a04015b1bc5683a698459","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"},"5":{"data":{"image/png":"9b23a9c545aa6daf67105161e03871a4b2e766f0","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":17,"type":"cell"}
{"cell_type":"code","exec_count":127,"id":"4d6038","input":"import pandas as pd\n\ndf = pd.read_excel(\"Concrete_Data.xls\")\ndf.head()","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Cement (component 1)(kg in a m^3 mixture)</th>\n      <th>Blast Furnace Slag (component 2)(kg in a m^3 mixture)</th>\n      <th>Fly Ash (component 3)(kg in a m^3 mixture)</th>\n      <th>Water  (component 4)(kg in a m^3 mixture)</th>\n      <th>Superplasticizer (component 5)(kg in a m^3 mixture)</th>\n      <th>Coarse Aggregate  (component 6)(kg in a m^3 mixture)</th>\n      <th>Fine Aggregate (component 7)(kg in a m^3 mixture)</th>\n      <th>Age (day)</th>\n      <th>Concrete compressive strength(MPa, megapascals)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>540.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>162.0</td>\n      <td>2.5</td>\n      <td>1040.0</td>\n      <td>676.0</td>\n      <td>28</td>\n      <td>79.986111</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>540.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>162.0</td>\n      <td>2.5</td>\n      <td>1055.0</td>\n      <td>676.0</td>\n      <td>28</td>\n      <td>61.887366</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>332.5</td>\n      <td>142.5</td>\n      <td>0.0</td>\n      <td>228.0</td>\n      <td>0.0</td>\n      <td>932.0</td>\n      <td>594.0</td>\n      <td>270</td>\n      <td>40.269535</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>332.5</td>\n      <td>142.5</td>\n      <td>0.0</td>\n      <td>228.0</td>\n      <td>0.0</td>\n      <td>932.0</td>\n      <td>594.0</td>\n      <td>365</td>\n      <td>41.052780</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>198.6</td>\n      <td>132.4</td>\n      <td>0.0</td>\n      <td>192.0</td>\n      <td>0.0</td>\n      <td>978.4</td>\n      <td>825.5</td>\n      <td>360</td>\n      <td>44.296075</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"   Cement (component 1)(kg in a m^3 mixture)  \\\n0                                      540.0   \n1                                      540.0   \n2                                      332.5   \n3                                      332.5   \n4                                      198.6   \n\n   Blast Furnace Slag (component 2)(kg in a m^3 mixture)  \\\n0                                                0.0       \n1                                                0.0       \n2                                              142.5       \n3                                              142.5       \n4                                              132.4       \n\n   Fly Ash (component 3)(kg in a m^3 mixture)  \\\n0                                         0.0   \n1                                         0.0   \n2                                         0.0   \n3                                         0.0   \n4                                         0.0   \n\n   Water  (component 4)(kg in a m^3 mixture)  \\\n0                                      162.0   \n1                                      162.0   \n2                                      228.0   \n3                                      228.0   \n4                                      192.0   \n\n   Superplasticizer (component 5)(kg in a m^3 mixture)  \\\n0                                                2.5     \n1                                                2.5     \n2                                                0.0     \n3                                                0.0     \n4                                                0.0     \n\n   Coarse Aggregate  (component 6)(kg in a m^3 mixture)  \\\n0                                             1040.0      \n1                                             1055.0      \n2                                              932.0      \n3                                              932.0      \n4                                              978.4      \n\n   Fine Aggregate (component 7)(kg in a m^3 mixture)  Age (day)  \\\n0                                              676.0         28   \n1                                              676.0         28   \n2                                              594.0        270   \n3                                              594.0        365   \n4                                              825.5        360   \n\n   Concrete compressive strength(MPa, megapascals)   \n0                                         79.986111  \n1                                         61.887366  \n2                                         40.269535  \n3                                         41.052780  \n4                                         44.296075  "},"exec_count":127,"output_type":"execute_result"}},"pos":19,"type":"cell"}
{"cell_type":"code","exec_count":132,"id":"4a120e","input":"\nX = df.values[:,:-1]\ny = df.values[:,-1]\n\nX_train,X_test,y_train,y_test = train_test_split(X,y)\n\nfrom sklearn.metrics import r2_score\n\nfor k in [1,3,6,10,15,20]:\n\n    yhat = KNN_predict_all(X_train,y_train,X_test,k=k)\n\n\n    score_test = r2_score(yhat,y_test)\n    print(\"Performance of k={} is {}\".format(k,score_test))\n    \n\n","output":{"0":{"name":"stdout","output_type":"stream","text":"Performance of k=1 is 0.7299244755639298\nPerformance of k=3 is 0.3986484369219213\nPerformance of k=6 is -0.24233706426395796\nPerformance of k=10 is -0.23332823760788068\nPerformance of k=15 is -0.13605640626497917\nPerformance of k=20 is -0.06381182488538562\n"}},"pos":20,"type":"cell"}
{"cell_type":"code","exec_count":14,"id":"e513e6","input":"import numpy as np\nfrom scipy.stats import mode\n\n\ndef euclidean(X,x):\n    return np.linalg.norm(X-x,axis=1)\n\n\n\ndef KNN(X,x,k=3,distance = euclidean):\n    \"\"\"Return the row indexes of the k nearest neighbors of x\n       in the matrix X\"\"\"\n    distances = distance(X,x)\n    neighbors = []\n    for i in range(k):\n        nearest = distances.argmin()\n        neighbors.append(nearest)\n        distances[nearest] = distances.max()\n    return neighbors\n\ndef KNN_predict_all(X_known,y_known,X_predict,k=3,distance=euclidean,regression= False):\n    y_hat = np.empty(X_predict.shape[0])\n    for i,x in enumerate(X_predict):\n        knn = KNN(X_known,x,k,distance)\n        if regression:\n            y_hat[i] = np.mean(y_known[knn])\n        else:\n            y_hat[i] = mode(y_known[knn])[0][0]\n    return y_hat\n\n","pos":1,"type":"cell"}
{"cell_type":"code","exec_count":142,"id":"f6bde4","input":"from sklearn.neighbors import KNeighborsRegressor\n\nknn = KNeighborsRegressor(weights=\"distance\",p=2)\n\nknn.fit(X_train,y_train)\n\nknn.score(X_test,y_test)\n","output":{"0":{"data":{"text/plain":"0.8070764456101281"},"exec_count":142,"output_type":"execute_result"}},"pos":21,"type":"cell"}
{"cell_type":"code","exec_count":15,"id":"9bb29e","input":"from sklearn.datasets import make_moons\nfrom sklearn.datasets import make_blobs\n\nX,y = make_blobs(centers=2,random_state=42,cluster_std=4)\n\ny = y*2-1\n\n\nimport matplotlib.pyplot as plt\n\n\nXa = X[y==1]\nXb = X[y==-1]\nplt.scatter(Xa[:,0],Xa[:,1])\nplt.scatter(Xb[:,0],Xb[:,1])\n\nspecial = np.array([3,-1])\nplt.scatter([special[0]],[special[1]],marker=\"*\",s=80,label=\"point to classify\")\nplt.legend()\nplt.title(\"Classification training data\")\nplt.show()\n","output":{"0":{"data":{"image/png":"1399a06941476bdf3ba37f0f7cde5fe7d386d2ad","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":2,"type":"cell"}
{"cell_type":"code","exec_count":16,"id":"85913b","input":"neighbors = KNN(X,special)\nX[neighbors]","output":{"0":{"data":{"text/plain":"array([[ 3.65832637, -1.04177497],\n       [ 1.08182112, -1.29007146],\n       [ 1.50686567,  0.68492362]])"},"exec_count":16,"output_type":"execute_result"}},"pos":3,"type":"cell"}
{"cell_type":"code","exec_count":17,"id":"aed16d","input":"\nXa = X[y==1]\nXb = X[y==-1]\nplt.scatter(Xa[:,0],Xa[:,1])\nplt.scatter(Xb[:,0],Xb[:,1])\n\nplt.scatter([special[0]],[special[1]],marker=\"*\",s=80,label=\"point to classify\")\nplt.legend()\n\nplt.scatter(X[neighbors][:,0],X[neighbors][:,1],s=120,alpha=0.2,label=\"neighbors\")\nplt.title(\"Classification training data\")\nplt.show()","output":{"0":{"data":{"image/png":"fa8576866b154ba986ff1b20ce3d0234b0219316","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":4,"type":"cell"}
{"cell_type":"code","exec_count":18,"id":"bfc5f9","input":"\n\nk = 1\n\n\ndef plot_boundary(X,y,k,num=100):\n    xc = np.linspace(X[:,1].min(),X[:,1].max(),num)\n    yc = np.linspace(X[:,0].min(),X[:,0].max(),num)\n    cart_prod = np.transpose([np.tile(xc, len(yc)), np.repeat(yc, len(xc))])\n    Xc = np.c_[cart_prod[:,1],cart_prod[:,0]]\n\n    g = KNN_predict_all(X,y,Xc,k=k)\n    #nn_predict_all(Xc,w,regression)\n    says_yeah = g == 1\n    says_no = ~says_yeah\n\n    plt.title(\"Decision boundary of KNN, K={}\".format(k))\n\n    plt.scatter(Xc[says_yeah][:,0],Xc[says_yeah][:,1],alpha=0.05,color='g')\n    plt.scatter(Xc[says_no][:,0],Xc[says_no][:,1],alpha=0.05,color='yellow')\n    plt.scatter(X[y==1][:,0],X[y==1][:,1],label=\"1\",alpha=0.43,c='b')\n    plt.scatter(X[y!=1][:,0],X[y!=1][:,1],label=\"-1\",alpha=0.43,c='red')\n    plt.legend()\n    plt.show()\n\n    g = KNN_predict_all(X,y,X,k=k)\n    print(\"Training error = \",np.mean(g != y))\n\n\nfor k in [1,3,8,15,25]:    \n    plot_boundary(X,y,k)\n","output":{"0":{"data":{"image/png":"a595d9b757211ba9dc750235d4e343364903a234","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"},"1":{"name":"stdout","output_type":"stream","text":"Training error =  0.0\n"},"2":{"data":{"image/png":"59f79a00dda73e9c139c341db3cf1e0ce591511d","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"},"3":{"name":"stdout","output_type":"stream","text":"Training error =  0.04\n"},"4":{"data":{"image/png":"7f696c24854b9041fe8f9373079316ced98150d8","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"},"5":{"name":"stdout","output_type":"stream","text":"Training error =  0.09\n"},"6":{"data":{"image/png":"38e202496435bec4eed331f0be16ff811ee18efa","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"},"7":{"name":"stdout","output_type":"stream","text":"Training error =  0.13\n"},"8":{"data":{"image/png":"aaca0d6e6d19e00cc4bc3f6002a8d376f465769e","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"},"9":{"name":"stdout","output_type":"stream","text":"Training error =  0.12\n"}},"pos":5,"type":"cell"}
{"cell_type":"code","exec_count":19,"id":"979af0","input":"X,y = make_moons(noise=0.1)\nfor k in [1,3,8,15,25]:    \n    plot_boundary(X,y,k)\n","output":{"0":{"data":{"image/png":"c4bde10c7809733b55c9a62eccfafd296be7ee15","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"},"1":{"name":"stdout","output_type":"stream","text":"Training error =  0.0\n"},"2":{"data":{"image/png":"f7bf4abd651bef483e8eb496b93a38919998255e","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"},"3":{"name":"stdout","output_type":"stream","text":"Training error =  0.0\n"},"4":{"data":{"image/png":"d3880b899ce00d401ce9c0669f36836604b3781a","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"},"5":{"name":"stdout","output_type":"stream","text":"Training error =  0.01\n"},"6":{"data":{"image/png":"7162770613fd6100654a1b566f120c6d340ada26","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"},"7":{"name":"stdout","output_type":"stream","text":"Training error =  0.02\n"},"8":{"data":{"image/png":"ade0a525464befadf0f8dd96c35e04b0383ce21a","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"},"9":{"name":"stdout","output_type":"stream","text":"Training error =  0.05\n"}},"pos":6,"type":"cell"}
{"cell_type":"code","exec_count":29,"id":"5ae8f2","input":"from sklearn import datasets\n\n# import some data to play with\niris = datasets.load_iris()\nX,y = iris['data'],iris['target']\ny","output":{"0":{"data":{"text/plain":"array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n       0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n       2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n       2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])"},"exec_count":29,"output_type":"execute_result"}},"pos":8,"type":"cell"}
{"cell_type":"code","exec_count":71,"id":"88f906","input":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(X,y,stratify=None)\nplt.hist(y_test)\nplt.show()","output":{"0":{"data":{"image/png":"2ad3ea62c2e3072fe24148efc33d2ebb8bff17a1","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":9,"type":"cell"}
{"cell_type":"code","exec_count":72,"id":"f68327","input":"y_hat = KNN_predict_all(X_train,y_train,X_test)\ny_hat","output":{"0":{"data":{"text/plain":"array([0., 2., 0., 1., 1., 1., 0., 0., 2., 2., 2., 0., 1., 1., 0., 1., 0.,\n       2., 2., 0., 1., 2., 0., 0., 2., 0., 0., 0., 1., 0., 2., 2., 2., 1.,\n       0., 0., 2., 1.])"},"exec_count":72,"output_type":"execute_result"}},"pos":10,"type":"cell"}
{"cell_type":"code","exec_count":73,"id":"7a41f6","input":"y_test","output":{"0":{"data":{"text/plain":"array([0, 2, 0, 1, 1, 1, 0, 0, 2, 2, 2, 0, 1, 1, 0, 1, 0, 2, 2, 0, 1, 2,\n       0, 0, 2, 0, 0, 0, 1, 0, 1, 2, 2, 1, 0, 0, 2, 1])"},"exec_count":73,"output_type":"execute_result"}},"pos":11,"type":"cell"}
{"cell_type":"code","exec_count":74,"id":"c94b91","input":"np.mean(y_hat != y_test)","output":{"0":{"data":{"text/plain":"0.02631578947368421"},"exec_count":74,"output_type":"execute_result"}},"pos":12,"type":"cell"}
{"cell_type":"code","exec_count":83,"id":"5b2a99","input":"X_iris2d = X[:,[1,3]]\nXa = X_iris2d[y==1]\nXb = X_iris2d[y==0]\nXc = X_iris2d[y==2]\nplt.figure(figsize=(8,8))\nplt.scatter(Xa[:,0],Xa[:,1],label=\"versicolor\")\nplt.scatter(Xb[:,0],Xb[:,1],label=\"setosa\")\nplt.scatter(Xc[:,0],Xc[:,1],label=\"virginica\")\n\nplt.title(\"Classification training data\")\nplt.legend()\nplt.show()","output":{"0":{"data":{"image/png":"cba03c02c9954aa91cfeebcb3fbe416a2a64ac61","text/plain":"<Figure size 576x576 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":13,"type":"cell"}
{"cell_type":"code","exec_count":88,"id":"65f75b","input":"\ndef plot_multilabel(X,y,k,num=100):\n    xc = np.linspace(X[:,1].min(),X[:,1].max(),num)\n    yc = np.linspace(X[:,0].min(),X[:,0].max(),num)\n    cart_prod = np.transpose([np.tile(xc, len(yc)), np.repeat(yc, len(xc))])\n    Xc = np.c_[cart_prod[:,1],cart_prod[:,0]]\n\n    g = KNN_predict_all(X,y,Xc,k=k)\n    for gg in set(g):\n        says_gg = g == gg\n        plt.scatter(Xc[says_gg][:,0],Xc[says_gg][:,1],alpha=0.05)\n        \n        \n    plt.title(\"Decision boundary of KNN, K={}\".format(k))\n\n\n    for yy in set(y):\n        plt.scatter(X[y==yy][:,0],X[y==yy][:,1],label=\"{}\".format(yy),alpha=0.75)\n    \n    plt.legend()\n    plt.show()\n\n    g = KNN_predict_all(X,y,X,k=k)\n    print(\"Training error = \",np.mean(g != y))\n\nfor k in [1,3,6,10,15,25]:    \n    plot_multilabel(X_iris2d,y,k)","output":{"0":{"data":{"image/png":"f2ec6a067520866b809ceb236834343984dfe4d5","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"},"1":{"name":"stdout","output_type":"stream","text":"Training error =  0.02\n"},"10":{"data":{"image/png":"22a07b0f642e5cc574449bd73b2af005de5e82b1","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"},"11":{"name":"stdout","output_type":"stream","text":"Training error =  0.04666666666666667\n"},"2":{"data":{"image/png":"201da8947cc63c7b95231adbb40985651f0cfa28","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"},"3":{"name":"stdout","output_type":"stream","text":"Training error =  0.04\n"},"4":{"data":{"image/png":"5420a8dd9e95320e183ec5826e0ba0fa69638e50","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"},"5":{"name":"stdout","output_type":"stream","text":"Training error =  0.04\n"},"6":{"data":{"image/png":"5e19c43160f356ca25b74195123dcab24114e81a","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"},"7":{"name":"stdout","output_type":"stream","text":"Training error =  0.04\n"},"8":{"data":{"image/png":"8f44cbfa0e4c7a83df7441c0476c7e4a2556a8a9","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"},"9":{"name":"stdout","output_type":"stream","text":"Training error =  0.04666666666666667\n"}},"pos":14,"type":"cell"}
{"cell_type":"code","id":"ac4e9d","input":"","pos":22,"type":"cell"}
{"cell_type":"markdown","id":"34f08a","input":"### A real dataset\n\nHere we apply KNN regression to the concrete dataset.\n","pos":18,"type":"cell"}
{"cell_type":"markdown","id":"3cd59a","input":"### K Nearest Neighbors\n\nIn these slides we explore a simple but powerful learning algorithm called $K$ Nearest Neighbors (KNN).\n\nKNN is an [instance based](https://en.wikipedia.org/wiki/Instance-based_learning) method that can be used for both classification and regression.\n\n\n\n","pos":0,"type":"cell"}
{"cell_type":"markdown","id":"5df4d1","input":"###  Regression\n\nKNN can be used for regression as easily as classification.\n\nRather than take the mode of the neigboring labels, we simply take their mean.\n","pos":15,"type":"cell"}
{"cell_type":"markdown","id":"af5b96","input":"### Real data\n\nWe now try out our KNN model on real data.\n\nWe will use the famous [iris](https://en.wikipedia.org/wiki/Iris_flower_data_set) dataset. \n\nKNN naturally does [multiclass classification](https://en.wikipedia.org/wiki/Multiclass_classification), so we will do our first multiclass classification exercise.\n\n","pos":7,"type":"cell"}
{"id":0,"time":1589217198940,"type":"user"}
{"last_load":1589079632351,"type":"file"}