{"backend_state":"ready","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":81747968},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.9"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"5f5d5e","input":"","pos":21,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"76d81b","input":"","pos":46,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":1,"id":"37e70d","input":"L = [\"1\",\"2\",\"3\"]\na = input()\ntry:\n    print(\"The index of {} in L is {}\".format(a,L.index(a)))\nexcept:\n    print(\"Uh oh, not there.\")","metadata":{"cocalc":{"outputs":{"0":{"name":"input","opts":{"password":false,"prompt":""},"output_type":"stream","value":"5"}}}},"output":{"0":{"name":"input","opts":{"password":false,"prompt":""},"output_type":"stream","value":"5"},"1":{"name":"stdout","output_type":"stream","text":"Uh oh, not there.\n"}},"pos":1,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":1,"id":"77aefa","input":"#Exercise:\n\n## implement the dot product of two lists as a function.\n## make sure they are the same length!","pos":36,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":11,"id":"e5fe98","input":"T = {2,3,4,5}\nS.intersection(T)","output":{"0":{"data":{"text/plain":"{2, 3}"},"exec_count":11,"output_type":"execute_result"}},"pos":20,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":12,"id":"e1341f","input":"F = {\"hey\":\"nonny\", \"hi\":\"ninny\", \"ho\":\"monny\"}\nF","output":{"0":{"data":{"text/plain":"{'hey': 'nonny', 'hi': 'ninny', 'ho': 'monny'}"},"exec_count":12,"output_type":"execute_result"}},"pos":14,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":13,"id":"fd38b9","input":"import pandas as pd\n\ndata = {'a':[1,2,3],'b':[4,5,6],'c':[7,8,9]}\ndf = pd.DataFrame(data)\ndf","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>a</th>\n      <th>b</th>\n      <th>c</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>4</td>\n      <td>7</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>5</td>\n      <td>8</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>6</td>\n      <td>9</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":13,"output_type":"execute_result"}},"pos":16,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":17,"id":"64b3eb","input":"s = \"\"\"\nYou may sometimes want to find the number of distinct words in a body of text.\nEven in this short bit of text many words occur multiple times.\nThe set datatype is very useful for text processing.\nAs an exercise, let us produce a list of the distinct words occurring in this text.\n\"\"\"\ns","output":{"0":{"data":{"text/plain":"'\\nYou may sometimes want to find the number of distinct words in a body of text.\\nEven in this short bit of text many words occur multiple times.\\nThe set datatype is very useful for text processing.\\nAs an exercise, let us produce a list of the distinct words occurring in this text.\\n'"},"exec_count":17,"output_type":"execute_result"}},"pos":22,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":18,"id":"268518","input":"s = s.lower()  #  first convert all words to lowercase.\ns = s.replace(\".\",\"\")  # delete all periods\ns = s.replace(\"\\n\",\"\")\ns","output":{"0":{"data":{"text/plain":"'you may sometimes want to find the number of distinct words in a body of texteven in this short bit of text many words occur multiple timesthe set datatype is very useful for text processingas an exercise, let us produce a list of the distinct words occurring in this text'"},"exec_count":18,"output_type":"execute_result"}},"pos":23,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":21,"id":"32d88c","input":"## now we use split() to convert s into a list of words\n\nL = s.split()\nL","output":{"0":{"data":{"text/plain":"['you',\n 'may',\n 'sometimes',\n 'want',\n 'to',\n 'find',\n 'the',\n 'number',\n 'of',\n 'distinct',\n 'words',\n 'in',\n 'a',\n 'body',\n 'of',\n 'texteven',\n 'in',\n 'this',\n 'short',\n 'bit',\n 'of',\n 'text',\n 'many',\n 'words',\n 'occur',\n 'multiple',\n 'timesthe',\n 'set',\n 'datatype',\n 'is',\n 'very',\n 'useful',\n 'for',\n 'text',\n 'processingas',\n 'an',\n 'exercise,',\n 'let',\n 'us',\n 'produce',\n 'a',\n 'list',\n 'of',\n 'the',\n 'distinct',\n 'words',\n 'occurring',\n 'in',\n 'this',\n 'text']"},"exec_count":21,"output_type":"execute_result"}},"pos":24,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":27,"id":"999cff","input":"print(\"The number of words occurring in L is {}\".format(len(L)))\nS = set(L)\nprint(\"The number of distinct words occurring in L is {}\".format(len(S)))\ncounts = {w:L.count(w) for w in S}\ncounts","output":{"0":{"name":"stdout","output_type":"stream","text":"The number of words occurring in L is 50\nThe number of distinct words occurring in L is 37\n"},"1":{"data":{"text/plain":"{'sometimes': 1,\n 'bit': 1,\n 'exercise,': 1,\n 'is': 1,\n 'useful': 1,\n 'set': 1,\n 'us': 1,\n 'an': 1,\n 'multiple': 1,\n 'number': 1,\n 'occurring': 1,\n 'short': 1,\n 'very': 1,\n 'processingas': 1,\n 'words': 3,\n 'to': 1,\n 'in': 3,\n 'many': 1,\n 'a': 2,\n 'find': 1,\n 'the': 2,\n 'body': 1,\n 'of': 4,\n 'this': 2,\n 'you': 1,\n 'may': 1,\n 'for': 1,\n 'occur': 1,\n 'list': 1,\n 'timesthe': 1,\n 'produce': 1,\n 'want': 1,\n 'texteven': 1,\n 'text': 3,\n 'distinct': 2,\n 'let': 1,\n 'datatype': 1}"},"exec_count":27,"output_type":"execute_result"}},"pos":25,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":34,"id":"8a7db2","input":"def selection_sort(L):\n    _L = L[:]  ## A deep local copy\n    Lsorted = []\n    while len(_L)!=0:\n        # pop the least element of L and append it to Lsorted\n        Lsorted.append(_L.pop(_L.index(min(_L))))\n    return Lsorted    \n\n## By the magic of OO programming, the same function can sort words or numbers\n\nprint(\"Using the function to sort alphabetically:\")\nL = \"what a great dog you have\".split()\nprint(selection_sort(L))\n\nprint(\"\\n\\nUsing the exact same function to sort numerically:\")\nimport random\nL = [random.randint(0,10) for i in range(13)]\nprint(selection_sort(L))","output":{"0":{"name":"stdout","output_type":"stream","text":"Using the function to sort alphabetically:\n['a', 'dog', 'great', 'have', 'what', 'you']\n\n\nUsing the exact same function to sort numerically:\n[0, 1, 1, 1, 3, 4, 6, 7, 7, 7, 8, 8, 9]\n"}},"pos":27,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":37,"id":"198baa","input":"def sort_wrapper(L, sort_method):\n    return sort_method(L)\nL = \"borrowed books must be promptly returned\".split()\nsort_wrapper(L,selection_sort)","output":{"0":{"data":{"text/plain":"['be', 'books', 'borrowed', 'must', 'promptly', 'returned']"},"exec_count":37,"output_type":"execute_result"}},"pos":29,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":38,"id":"ffbda0","input":"def bab_sqrt(S,iterations=3,initial_value=2):\n    \"\"\"Approximate the square root of S using the Babylonian method (Newton's method)\"\"\"\n    x = initial_value\n    for i in range(iterations):\n        x = 1/2*(x + S/x)\n    return x\n\na = bab_sqrt(40)\n    \na, a**2","output":{"0":{"data":{"text/plain":"(6.392010163749294, 40.85779393347428)"},"exec_count":38,"output_type":"execute_result"}},"pos":31,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":39,"id":"5068e6","input":"a = bab_sqrt(40,6,2)\na","output":{"0":{"data":{"text/plain":"6.324555320336758"},"exec_count":39,"output_type":"execute_result"}},"pos":32,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":4,"id":"1dbba2","input":"D[3.14]","output":{"0":{"data":{"text/plain":"'pi'"},"exec_count":4,"output_type":"execute_result"}},"pos":5,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":40,"id":"e03be5","input":"# If you don't know the order of the parameters you can do this:\n\na = bab_sqrt(55, initial_value = 10, iterations = 100)\na, a**2","output":{"0":{"data":{"text/plain":"(7.416198487095663, 55.0)"},"exec_count":40,"output_type":"execute_result"}},"pos":33,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":41,"id":"020cd6","input":"# The docstring shows up using the help function\nbab_sqrt?","pos":34,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":45,"id":"73a729","input":"!ls  ## The file Dear_John appears","output":{"0":{"name":"stdout","output_type":"stream","text":"Dear_John  python.ipynb  s.term\r\n"}},"pos":40,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":46,"id":"8b0e20","input":"!cat Dear_John  ## The contents of the file","output":{"0":{"name":"stdout","output_type":"stream","text":"Dear John Jay,\r\n You were great on the first Supreme Court of the USA."}},"pos":41,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":48,"id":"a89e48","input":"## Writing files\n\nletter = \"Dear John Jay,\\n You were great on the first Supreme Court of the USA.\"\n\nfilename = \"Dear_John\"\n\nfile_pointer = open(filename,\"w\")  #open a file for writing.  The \"a\" mode would append and not clobber.\n\nfile_pointer.write(letter)  # write the string\n\nfile_pointer.close()   # close the file\n","pos":38,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":5,"id":"faada0","input":"## Exercise:\n\n##  Try to find the value in D for a key that doesn't exist (eg 5).","pos":6,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":51,"id":"c4db52","input":"\n# Exercise:\n## implement GCD as a function","pos":35,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":54,"id":"b30415","input":"!cat {filename}  ## This is how python variable can interact with the shell in Jupyter","output":{"0":{"name":"stdout","output_type":"stream","text":"Dear John Jay,\r\n You were great on the first Supreme Court of the USA."}},"pos":42,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":56,"id":"8ee9e4","input":"files = !ls   ## You can also assign the result of a shell command to a python variable\nfiles","output":{"0":{"data":{"text/plain":"['Dear_John', 'python.ipynb', 's.term']"},"exec_count":56,"output_type":"execute_result"}},"pos":43,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":57,"id":"986000","input":"current_dir = !echo $PWD\ncurrent_dir","output":{"0":{"data":{"text/plain":"['/home/hunter/Documents/ML_course/ML_Spr_20/Slides/Intro2Python2']"},"exec_count":57,"output_type":"execute_result"}},"pos":44,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":57,"id":"b1ebf8","input":"D = dict()\nD[3.14] = \"pi\"\nD[2.71] = \"e\"\nD","output":{"0":{"data":{"text/plain":"{3.14: 'pi', 2.71: 'e'}"},"exec_count":57,"output_type":"execute_result"}},"pos":3,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":58,"id":"f65120","input":"# But you can also iterate over key,value pairs, aka items.\nfor e,d in D.items():\n    print(f\"{e} is the key for the value {d}\")","output":{"0":{"name":"stdout","output_type":"stream","text":"3.14 is the key for the value pi\n2.71 is the key for the value e\n"}},"pos":11,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":59,"id":"1c7c90","input":"# Exercise\n\n##  Create the inverse dictionary E of D.\n## That is, where D[key] = value, have E[value] = key.\nE = dict()\nfor key,val in D.items():\n    E[val] = key\nE    \n","output":{"0":{"data":{"text/plain":"{'pi': 3.14, 'e': 2.71}"},"exec_count":59,"output_type":"execute_result"}},"pos":12,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":6,"id":"837e51","input":"D.keys()","output":{"0":{"data":{"text/plain":"dict_keys([3.14, 2.71])"},"exec_count":6,"output_type":"execute_result"}},"pos":7,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":61,"id":"9d1d38","input":"### Reading files\n## Reading files is just as easy as writing to files.\n\nfp = open(filename,'r') #open in read mode\ncontent = fp.read()\nfp.close()\ncontent","output":{"0":{"data":{"text/plain":"'Dear John Jay,\\n You were great on the first Supreme Court of the USA.'"},"exec_count":61,"output_type":"execute_result"}},"pos":45,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":7,"id":"717fde","input":"D.items()","output":{"0":{"data":{"text/plain":"dict_items([(3.14, 'pi'), (2.71, 'e')])"},"exec_count":7,"output_type":"execute_result"}},"pos":8,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":8,"id":"4a7f6d","input":"D.values()","output":{"0":{"data":{"text/plain":"dict_values(['pi', 'e'])"},"exec_count":8,"output_type":"execute_result"}},"pos":9,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":8,"id":"76bebf","input":"L = [1,2,3,3,3,3]\nS = set(L)\nS","output":{"0":{"data":{"text/plain":"{1, 2, 3}"},"exec_count":8,"output_type":"execute_result"}},"pos":19,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":9,"id":"7c25d8","input":"#By default iteration is over keys\nfor d in D:\n    print(d)","output":{"0":{"name":"stdout","output_type":"stream","text":"3.14\n2.71\n"}},"pos":10,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"057397","input":"You can pass functions to functions.","pos":28,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"0d9fba","input":"### FileIO\n\nWe will mostly be using the very convenient \"pandas\" module to load and export datasets.\n\nHowever we should cover at least the basics of FileIO in python. \n\nBelow are examples of how to write and read simple text files.  \n\nIn real applications a lot of code is added to make sure that the file actually opens and stuff like that.\n\nI'll be ignoring all of that in these simple examples.\n\n","pos":37,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"1b5110","input":"#### More intro to python...\n\nWe continue where we left off in the previous intro worksheet.\n\nThe following is a *try-except* block.  \n\nYou use it when you want to do something you know might not work.\n\nThis snippet uses the built-in **index** function.\n","pos":0,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"752c32","input":"#### Functions\n\nHere we give examples of how to define functions in python.  Notice that indentation is crucial.\n\nThe basic syntax for declating a function is\n\n```\ndef func_name(parameter1, parameter2):\n    # code block\n    # optional return statements\n```\n\nBelow we implement selection sort as an example.","pos":26,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"7a71fa","input":"You will often see dictionaries defined in the following way:\n    ","pos":13,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"8f0550","input":"One common use of a dictionary in data applications is to specify a pandas dataframe.","pos":15,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"a01263","input":"","pos":17,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"c212d8","input":"#### Sets \n\nAs the name suggests, a set is an unordered list.  It can handle set theoretic operations (union, intersection, etc).\n\n","pos":18,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"cdcb99","input":"If you know JSON format you will recognize the similarity to the presentation of the dictionary `D`.\nIn python it is very easy to go from dictionaries to JSON and back again.\nThis might be relevant at some point if we need to load JSON data.\n","pos":4,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"cdd4d0","input":"### Shell commands from Jupyter\n\nThis is a convenient place to mention that you can use shell commands from Jupyter by adding a ! before the command.\n\nFor instance the \"cat\" command dumps the contents of a file to the terminal.  \n\nThe \"ls\" command lists the contents of a directory.\n\nBelow I will use cat and ls to check whether the code in the above cell worked.  ","pos":39,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"ddb9f1","input":"Unlike C++, python functions can have optional parameters with default values.","pos":30,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"fe86cd","input":"#### Dictionaries\n\nPython has a built-in associative array type called a `dict`.  This is similar to `map` in the C++ standard library.\n\nIt is based on key value pairs.  \n\nIn a standard array (or list) you can think of indexes as _keys_ and the array element at the indexed location as the _value_.\n\nFor example if we do:\n\n    L = ['a','b','c','banana']\n    \nThen for the key 3, the value is 'banana'.  The rule for access is:\n    \n    L[key] == value\n\nDictionaries are similar. The difference is that they keys do not have to be integers. They can be any \"[hashable](https://stackoverflow.com/questions/14535730/what-do-you-mean-by-hashable-in-python)\" object.\n\nHere are some examples.\n","pos":2,"state":"done","type":"cell"}
{"id":0,"time":1582647096938,"type":"user"}
{"last_load":1582751066602,"type":"file"}