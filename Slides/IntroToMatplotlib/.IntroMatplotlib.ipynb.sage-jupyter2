{"backend_state":"running","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":80416768},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.5"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1580833305723,"exec_count":8,"id":"80d7bb","input":"x = [1,2,3]\ny = [1,5,-2]\n\nprint(\"The data points are:\")\nfor xx,yy in zip(x,y):\n    print(\"({},{})\".format(xx,yy))","kernel":"python3","output":{"0":{"name":"stdout","text":"The data points are:\n(1,1)\n(2,5)\n(3,-2)\n"}},"pos":3,"start":1580833305713,"state":"done","type":"cell"}
{"cell_type":"code","end":1580833307924,"exec_count":9,"id":"866b9c","input":"import matplotlib.pyplot as plt\n\nplt.plot(x,y)\n\nplt.show()","kernel":"python3","output":{"0":{"data":{"image/png":"7e93f1dbea7a97018f8c1fdfa26c263786da0151","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"image/png":{"height":248,"width":370}}}},"pos":5,"start":1580833307618,"state":"done","type":"cell"}
{"cell_type":"code","end":1580833308559,"exec_count":10,"id":"53ff09","input":"import matplotlib.pyplot as plt\n\nplt.scatter(x,y)\n\nplt.show()","kernel":"python3","output":{"0":{"data":{"image/png":"dffa2d70d11c1b6aa9457fac640c782146148903","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"image/png":{"height":248,"width":370}}}},"pos":7,"start":1580833308095,"state":"done","type":"cell"}
{"cell_type":"code","end":1580833309496,"exec_count":11,"id":"0085b7","input":"import matplotlib.pyplot as plt\nfig = plt.figure(figsize=(8, 8))                      \n\nplt.title(\"The secret of the universe\")\nplt.scatter(x,y,color=['b','r','g'],s=[40,80,1600],alpha=0.5)\nplt.xlabel(\"Ethanol per juicebox\")\nplt.ylabel(\"Misery\")\nplt.xticks([1,2,3,4,5], ('Tom', 'Dick', 'Harry', 'Sally', 'Sue'),rotation=180)\ns = [\"huey\",\"dewey\",\"louie\"]\nfor xx,yy in zip(x,y):\n    plt.text(xx+0.2,yy-0.2,s[-1],fontsize=20,rotation=-15)\n    s.pop()\n\nplt.show()","kernel":"python3","output":{"0":{"data":{"image/png":"1709ed0f79052082acf31ed87ac1c6153ebe20f4","text/plain":"<Figure size 576x576 with 1 Axes>"},"metadata":{"image/png":{"height":494,"width":505}}}},"pos":11,"start":1580833308746,"state":"done","type":"cell"}
{"cell_type":"code","end":1580833314884,"exec_count":14,"id":"157353","input":"import matplotlib.pyplot as plt\nfrom numpy.random import random\n\ncolors = ['b', 'c', 'y', 'm', 'r']\n\nfig = plt.figure(figsize=(10, 10))                      \n\n\nlo = plt.scatter(random(10), random(10), marker='x', color=colors[0])\nll = plt.scatter(random(10), random(10), marker='X', color=colors[0])\nl  = plt.scatter(random(10), random(10), marker='o', color=colors[1])\na  = plt.scatter(random(10), random(10), marker='o', color=colors[2])\nh  = plt.scatter(random(10), random(10), marker='o', color=colors[3])\nhh = plt.scatter(random(10), random(10), marker='o', color=colors[4])\nho = plt.scatter(random(10), random(10), marker='x', color=colors[4])\n\nplt.legend((lo, ll, l, a, h, hh, ho),\n           ('Low Outlier', 'LoLo', 'Lo', 'Average', 'Hi', 'HiHi', 'High Outlier'),\n           scatterpoints=1,\n           loc='lower left',\n           ncol=3,\n           fontsize=8)\n\nplt.show()","kernel":"python3","output":{"0":{"data":{"image/png":"30ce9c12b62a02ebe1eb00213588ef0f5996656f","text/plain":"<Figure size 720x720 with 1 Axes>"},"metadata":{"image/png":{"height":574,"width":595}}}},"pos":13,"start":1580833313807,"state":"done","type":"cell"}
{"cell_type":"code","end":1580833322411,"exec_count":16,"id":"1301ac","input":"import numpy as np\n\nA = np.array([1,2,3,4])\nA","kernel":"python3","output":{"0":{"data":{"text/plain":"array([1, 2, 3, 4])"},"exec_count":16}},"pos":15,"start":1580833322364,"state":"done","type":"cell"}
{"cell_type":"code","end":1580833329014,"exec_count":20,"id":"60f53b","input":"## The sine function will be applied to each vector element \"respectively\"\nnp.sin(A)","kernel":"python3","output":{"0":{"data":{"text/plain":"array([ 0.84147098,  0.90929743,  0.14112001, -0.7568025 ])"},"exec_count":20}},"pos":16,"start":1580833329005,"state":"done","type":"cell"}
{"cell_type":"code","end":1580833330642,"exec_count":21,"id":"740c87","input":"## The arctan function will be applied to each vector element \"respectively\"\n\nnp.arctan(A)","kernel":"python3","output":{"0":{"data":{"text/plain":"array([0.78539816, 1.10714872, 1.24904577, 1.32581766])"},"exec_count":21}},"pos":17,"start":1580833330637,"state":"done","type":"cell"}
{"cell_type":"code","end":1580833331112,"exec_count":22,"id":"746d8e","input":"## The sigmoid function will be applied to each vector element \"respectively\"\n\n\nsig = 1/(1+np.exp(-A))\nsig","kernel":"python3","output":{"0":{"data":{"text/plain":"array([0.73105858, 0.88079708, 0.95257413, 0.98201379])"},"exec_count":22}},"pos":18,"start":1580833331101,"state":"done","type":"cell"}
{"cell_type":"code","end":1580833332918,"exec_count":23,"id":"0c8047","input":"## A very rough plot of the above functions\nfig = plt.figure(figsize=(8, 8))                      \n\nplt.plot(A,np.sin(A),label=\"sine\")\nplt.plot(A,np.arctan(A),label=\"atan\")\nplt.plot(A,sig,label=\"sigmoid\")\nplt.legend()\nplt.show()","kernel":"python3","output":{"0":{"data":{"image/png":"70a36d7580267edeec9fe9438fb1af93ddc309f8","text/plain":"<Figure size 576x576 with 1 Axes>"},"metadata":{"image/png":{"height":465,"width":492}}}},"pos":19,"start":1580833332308,"state":"done","type":"cell"}
{"cell_type":"code","end":1580833380520,"exec_count":24,"id":"e074d6","input":"## A continuous range of values from -2 to 2\nnp.arange(-2,2,0.001)","kernel":"python3","output":{"0":{"data":{"text/plain":"array([-2.   , -1.999, -1.998, ...,  1.997,  1.998,  1.999])"},"exec_count":24}},"pos":22,"start":1580833380513,"state":"done","type":"cell"}
{"cell_type":"code","end":1580833597408,"exec_count":28,"id":"924d52","input":"## A very rough plot of the above functions\n\nA = np.linspace(-6,6,500)\nfig = plt.figure(figsize=(8, 8))\n\nplt.plot(A,np.sin(A),label=\"sine\")\nplt.plot(A,np.arctan(A),label=\"atan\")\nsig = 1/(1+np.exp(-A))\n\nplt.plot(A,sig,label=\"sigmoid\")\nplt.legend()\n#plt.axhline(0, color='black')\n#plt.axvline(0, color='black')\n\nplt.show()","kernel":"python3","output":{"0":{"data":{"image/png":"d3ec4a1813e970b930280ebdb0fc5a17152c7777","text/plain":"<Figure size 576x576 with 1 Axes>"},"metadata":{"image/png":{"height":465,"width":492}}}},"pos":26,"start":1580833596801,"state":"done","type":"cell"}
{"cell_type":"code","end":1580833739639,"exec_count":29,"id":"a9765c","input":"import pandas as pd\nimport numpy as np\n\nrs = np.random.RandomState(0)\ndf = pd.DataFrame(rs.rand(10, 10))\ncorr = df.corr()\ncorr.style.background_gradient(cmap='coolwarm')\n# 'RdBu_r' & 'BrBG' are other good diverging colormaps","kernel":"python3","output":{"0":{"more_output":true}},"pos":28,"scrolled":true,"start":1580833736902,"state":"done","type":"cell"}
{"cell_type":"code","end":1580834045131,"exec_count":35,"id":"238e4c","input":"## This works well when f is smooth \n\nxvec = np.linspace(-10.,10.,100)                               \nX,Y = np.meshgrid(xvec, xvec)                                \nfig = plt.figure(figsize=(6, 4))     \nZ = X**2 - Y**2\nplt.contourf(X, Y, Z,50)                             \nplt.colorbar()    \nplt.show()","kernel":"python3","output":{"0":{"data":{"image/png":"8df1a9e07b4d3917ce2c187545abd71da553c65e","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"image/png":{"height":252,"width":375}}}},"pos":30,"start":1580834044506,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":102,"id":"ddc995","input":"'''\n======================\n3D surface (color map)\n======================\n\nDemonstrates plotting a 3D surface colored with the coolwarm color map.\nThe surface is made opaque by using antialiased=False.\n\nAlso demonstrates using the LinearLocator and custom formatting for the\nz axis tick labels.\n'''\n\nfrom mpl_toolkits.mplot3d import Axes3D\nimport matplotlib.pyplot as plt\nfrom matplotlib import cm\nfrom matplotlib.ticker import LinearLocator, FormatStrFormatter\nimport numpy as np\n\n\nfig = plt.figure(figsize=(8,6))\nax = fig.gca(projection='3d')\n\n# Make data.\nX = np.arange(-5, 5, 0.25)\nY = np.arange(-5, 5, 0.25)\nX, Y = np.meshgrid(X, Y)\nR = np.sqrt(X**2 + Y**2)\nZ = np.sin(R)\n\n# Plot the surface.\nsurf = ax.plot_surface(X, Y, Z, cmap=cm.coolwarm,\n                       linewidth=0, antialiased=False)\n\n# Customize the z axis.\nax.set_zlim(-1.01, 1.01)\nax.zaxis.set_major_locator(LinearLocator(10))\nax.zaxis.set_major_formatter(FormatStrFormatter('%.02f'))\n\n# Add a color bar which maps values to colors.\nfig.colorbar(surf, shrink=0.5, aspect=5)\n\nplt.show()","output":{"0":{"data":{"image/png":"57ae65ec98f5e653d7483b9d39fd8c3e4b414c0e","text/plain":"<Figure size 576x432 with 2 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":32,"type":"cell"}
{"cell_type":"code","exec_count":57,"id":"e6dff4","input":"np.arange?","pos":21,"type":"cell"}
{"cell_type":"code","exec_count":61,"id":"7aaf83","input":"## If you prefer to specify the number of points rather than the step size, \n## use linspace\n\nnp.linspace(-2,2,300)","output":{"0":{"data":{"text/plain":"array([-2.        , -1.98662207, -1.97324415, -1.95986622, -1.94648829,\n       -1.93311037, -1.91973244, -1.90635452, -1.89297659, -1.87959866,\n       -1.86622074, -1.85284281, -1.83946488, -1.82608696, -1.81270903,\n       -1.7993311 , -1.78595318, -1.77257525, -1.75919732, -1.7458194 ,\n       -1.73244147, -1.71906355, -1.70568562, -1.69230769, -1.67892977,\n       -1.66555184, -1.65217391, -1.63879599, -1.62541806, -1.61204013,\n       -1.59866221, -1.58528428, -1.57190635, -1.55852843, -1.5451505 ,\n       -1.53177258, -1.51839465, -1.50501672, -1.4916388 , -1.47826087,\n       -1.46488294, -1.45150502, -1.43812709, -1.42474916, -1.41137124,\n       -1.39799331, -1.38461538, -1.37123746, -1.35785953, -1.34448161,\n       -1.33110368, -1.31772575, -1.30434783, -1.2909699 , -1.27759197,\n       -1.26421405, -1.25083612, -1.23745819, -1.22408027, -1.21070234,\n       -1.19732441, -1.18394649, -1.17056856, -1.15719064, -1.14381271,\n       -1.13043478, -1.11705686, -1.10367893, -1.090301  , -1.07692308,\n       -1.06354515, -1.05016722, -1.0367893 , -1.02341137, -1.01003344,\n       -0.99665552, -0.98327759, -0.96989967, -0.95652174, -0.94314381,\n       -0.92976589, -0.91638796, -0.90301003, -0.88963211, -0.87625418,\n       -0.86287625, -0.84949833, -0.8361204 , -0.82274247, -0.80936455,\n       -0.79598662, -0.7826087 , -0.76923077, -0.75585284, -0.74247492,\n       -0.72909699, -0.71571906, -0.70234114, -0.68896321, -0.67558528,\n       -0.66220736, -0.64882943, -0.63545151, -0.62207358, -0.60869565,\n       -0.59531773, -0.5819398 , -0.56856187, -0.55518395, -0.54180602,\n       -0.52842809, -0.51505017, -0.50167224, -0.48829431, -0.47491639,\n       -0.46153846, -0.44816054, -0.43478261, -0.42140468, -0.40802676,\n       -0.39464883, -0.3812709 , -0.36789298, -0.35451505, -0.34113712,\n       -0.3277592 , -0.31438127, -0.30100334, -0.28762542, -0.27424749,\n       -0.26086957, -0.24749164, -0.23411371, -0.22073579, -0.20735786,\n       -0.19397993, -0.18060201, -0.16722408, -0.15384615, -0.14046823,\n       -0.1270903 , -0.11371237, -0.10033445, -0.08695652, -0.0735786 ,\n       -0.06020067, -0.04682274, -0.03344482, -0.02006689, -0.00668896,\n        0.00668896,  0.02006689,  0.03344482,  0.04682274,  0.06020067,\n        0.0735786 ,  0.08695652,  0.10033445,  0.11371237,  0.1270903 ,\n        0.14046823,  0.15384615,  0.16722408,  0.18060201,  0.19397993,\n        0.20735786,  0.22073579,  0.23411371,  0.24749164,  0.26086957,\n        0.27424749,  0.28762542,  0.30100334,  0.31438127,  0.3277592 ,\n        0.34113712,  0.35451505,  0.36789298,  0.3812709 ,  0.39464883,\n        0.40802676,  0.42140468,  0.43478261,  0.44816054,  0.46153846,\n        0.47491639,  0.48829431,  0.50167224,  0.51505017,  0.52842809,\n        0.54180602,  0.55518395,  0.56856187,  0.5819398 ,  0.59531773,\n        0.60869565,  0.62207358,  0.63545151,  0.64882943,  0.66220736,\n        0.67558528,  0.68896321,  0.70234114,  0.71571906,  0.72909699,\n        0.74247492,  0.75585284,  0.76923077,  0.7826087 ,  0.79598662,\n        0.80936455,  0.82274247,  0.8361204 ,  0.84949833,  0.86287625,\n        0.87625418,  0.88963211,  0.90301003,  0.91638796,  0.92976589,\n        0.94314381,  0.95652174,  0.96989967,  0.98327759,  0.99665552,\n        1.01003344,  1.02341137,  1.0367893 ,  1.05016722,  1.06354515,\n        1.07692308,  1.090301  ,  1.10367893,  1.11705686,  1.13043478,\n        1.14381271,  1.15719064,  1.17056856,  1.18394649,  1.19732441,\n        1.21070234,  1.22408027,  1.23745819,  1.25083612,  1.26421405,\n        1.27759197,  1.2909699 ,  1.30434783,  1.31772575,  1.33110368,\n        1.34448161,  1.35785953,  1.37123746,  1.38461538,  1.39799331,\n        1.41137124,  1.42474916,  1.43812709,  1.45150502,  1.46488294,\n        1.47826087,  1.4916388 ,  1.50501672,  1.51839465,  1.53177258,\n        1.5451505 ,  1.55852843,  1.57190635,  1.58528428,  1.59866221,\n        1.61204013,  1.62541806,  1.63879599,  1.65217391,  1.66555184,\n        1.67892977,  1.69230769,  1.70568562,  1.71906355,  1.73244147,\n        1.7458194 ,  1.75919732,  1.77257525,  1.78595318,  1.7993311 ,\n        1.81270903,  1.82608696,  1.83946488,  1.85284281,  1.86622074,\n        1.87959866,  1.89297659,  1.90635452,  1.91973244,  1.93311037,\n        1.94648829,  1.95986622,  1.97324415,  1.98662207,  2.        ])"},"exec_count":61,"output_type":"execute_result"}},"pos":23,"type":"cell"}
{"cell_type":"code","exec_count":64,"id":"f5580f","input":"### Very rarely you might want to use a logarithmic scale.\n### in this case, use logspace.\n\nnp.logspace?","pos":24,"type":"cell"}
{"cell_type":"code","exec_count":65,"id":"d709cc","input":"np.logspace(0,6,num=15)","output":{"0":{"data":{"text/plain":"array([1.00000000e+00, 2.68269580e+00, 7.19685673e+00, 1.93069773e+01,\n       5.17947468e+01, 1.38949549e+02, 3.72759372e+02, 1.00000000e+03,\n       2.68269580e+03, 7.19685673e+03, 1.93069773e+04, 5.17947468e+04,\n       1.38949549e+05, 3.72759372e+05, 1.00000000e+06])"},"exec_count":65,"output_type":"execute_result"}},"pos":25,"type":"cell"}
{"cell_type":"code","exec_count":91,"id":"0bc19c","input":"import matplotlib as mpl\nfrom mpl_toolkits.mplot3d import Axes3D\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nmpl.rcParams['legend.fontsize'] = 10\n\nfig = plt.figure(figsize=(8,6))\nax = fig.gca(projection='3d')\ntheta = np.linspace(-4 * np.pi, 4 * np.pi, 100)\nz = np.linspace(-2, 2, 100)\nr = z**2 + 1\nx = r * np.sin(theta)\ny = r * np.cos(theta)\nax.plot(x, y, z, label='parametric curve')\nax.legend()\n\nplt.show()","output":{"0":{"data":{"image/png":"be530d4408727231ef601569dbbe5b6fa00043ec","text/plain":"<Figure size 576x432 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":33,"type":"cell"}
{"cell_type":"code","exec_count":93,"id":"1f653b","input":"'''\n==============\n3D scatterplot\n==============\n\nDemonstration of a basic scatterplot in 3D.\n'''\n\nfrom mpl_toolkits.mplot3d import Axes3D\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef randrange(n, vmin, vmax):\n    '''\n    Helper function to make an array of random numbers having shape (n, )\n    with each number distributed Uniform(vmin, vmax).\n    '''\n    return (vmax - vmin)*np.random.rand(n) + vmin\n\nfig = plt.figure(figsize=(10,10))\nax = fig.add_subplot(111, projection='3d')\n\nn = 100\n\n# For each set of style and range settings, plot n random points in the box\n# defined by x in [23, 32], y in [0, 100], z in [zlow, zhigh].\nfor c, m, zlow, zhigh in [('r', 'o', -50, -25), ('b', '^', -30, -5)]:\n    xs = randrange(n, 23, 32)\n    ys = randrange(n, 0, 100)\n    zs = randrange(n, zlow, zhigh)\n    ax.scatter(xs, ys, zs, c=c, marker=m)\n\nax.set_xlabel('X Label')\nax.set_ylabel('Y Label')\nax.set_zlabel('Z Label')\n\nplt.show()","output":{"0":{"data":{"image/png":"c1ca9e908d17c29c88380a51644a5297f29ac7f8","text/plain":"<Figure size 720x720 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":34,"type":"cell"}
{"cell_type":"code","exec_count":99,"id":"3955c6","input":"'''\n===========================\nMore triangular 3D surfaces\n===========================\n\nTwo additional examples of plotting surfaces with triangular mesh.\n\nThe first demonstrates use of plot_trisurf's triangles argument, and the\nsecond sets a Triangulation object's mask and passes the object directly\nto plot_trisurf.\n'''\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport matplotlib.tri as mtri\n\n\nfig = plt.figure(figsize=3*plt.figaspect(0.5))\n\n#============\n# First plot\n#============\n\n# Make a mesh in the space of parameterisation variables u and v\nu = np.linspace(0, 2.0 * np.pi, endpoint=True, num=50)\nv = np.linspace(-0.5, 0.5, endpoint=True, num=10)\nu, v = np.meshgrid(u, v)\nu, v = u.flatten(), v.flatten()\n\n# This is the Mobius mapping, taking a u, v pair and returning an x, y, z\n# triple\nx = (1 + 0.5 * v * np.cos(u / 2.0)) * np.cos(u)\ny = (1 + 0.5 * v * np.cos(u / 2.0)) * np.sin(u)\nz = 0.5 * v * np.sin(u / 2.0)\n\n# Triangulate parameter space to determine the triangles\ntri = mtri.Triangulation(u, v)\n\n# Plot the surface.  The triangles in parameter space determine which x, y, z\n# points are connected by an edge.\nax = fig.add_subplot(1, 2, 1, projection='3d')\nax.plot_trisurf(x, y, z, triangles=tri.triangles, cmap=plt.cm.Spectral)\nax.set_zlim(-1, 1)\n\n\n#============\n# Second plot\n#============\n\n# Make parameter spaces radii and angles.\nn_angles = 36\nn_radii = 8\nmin_radius = 0.25\nradii = np.linspace(min_radius, 0.95, n_radii)\n\nangles = np.linspace(0, 2*np.pi, n_angles, endpoint=False)\nangles = np.repeat(angles[..., np.newaxis], n_radii, axis=1)\nangles[:, 1::2] += np.pi/n_angles\n\n# Map radius, angle pairs to x, y, z points.\nx = (radii*np.cos(angles)).flatten()\ny = (radii*np.sin(angles)).flatten()\nz = (np.cos(radii)*np.cos(angles*3.0)).flatten()\n\n# Create the Triangulation; no triangles so Delaunay triangulation created.\ntriang = mtri.Triangulation(x, y)\n\n# Mask off unwanted triangles.\nxmid = x[triang.triangles].mean(axis=1)\nymid = y[triang.triangles].mean(axis=1)\nmask = np.where(xmid**2 + ymid**2 < min_radius**2, 1, 0)\ntriang.set_mask(mask)\n\n# Plot the surface.\nax = fig.add_subplot(1, 2, 2, projection='3d')\nax.plot_trisurf(triang, z, cmap=plt.cm.CMRmap)\n\n\nplt.show()","output":{"0":{"data":{"image/png":"97c66ef7d91a2c8ee9bbacd0a7fa20efd79339a7","text/plain":"<Figure size 1728x864 with 2 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":35,"type":"cell"}
{"cell_type":"code","id":"120890","input":"","pos":36,"type":"cell"}
{"cell_type":"markdown","id":"67f111","input":"###  Smoothing things out\n\nThe plot we just made is very rough because the domain only contains four datapoints.\n\nWe can make things smoother by enriching the domain, filling in the gaps.\n\nBelow we introduce the usual way of making a smooth interval of values in Python.\n","pos":20,"type":"cell"}
{"cell_type":"markdown","id":"69d667","input":"### Examples of 3 axis plots\n\nBelow we borrow some nice examples from here:\n\nhttps://matplotlib.org/mpl_toolkits/mplot3d/tutorial.html","pos":31,"type":"cell"}
{"cell_type":"markdown","id":"6df863","input":"### The way you give data to matplotlib\n\nMost plots are two dimensional, and therefore consist of an $x$ and a $y$ axis.\n\nThe things that get plotted are points which are pairs $(x,y)$ of particular values.\n\nIn matplotlib you give the plotting program two vectors of data of the same length: \n\n* An \"x\" vector $\\bar{x}$\n* A \"y\" vector $\\bar{y}$\n\nThe $x_i$ entry of $\\bar{x}$ corresponds to the $y_i$ entry of $\\bar{y}$ to give the data point $(x_i,y_i)$.\n\n","pos":1,"type":"cell"}
{"cell_type":"markdown","id":"7e5552","input":"### Example\n\nBelow I give an example of how this works in practice.\n\n","pos":2,"type":"cell"}
{"cell_type":"markdown","id":"7f560c","input":"###  Plotting higher dimensional data\n\nConsider a function of two variables $f(x,y)$.\n\nThe graph of such a function is given by the surface $z = f(x,y)$.\n\nEach point in the $x$$y$ plane is associated with a height $z$.\n\nThere are two natural ways to plot such data:\n\n* As a contour plot (smooth f)\n* A plot with 3 axes\n\nFirst we show how to create a contour plot.\n","pos":29,"type":"cell"}
{"cell_type":"markdown","id":"81fde4","input":"### Introducing matplotlib\n\nThe matplotlib library is commonly used for visualizations in ML.\n\nThere are other rival plotting packages (eg Bokeh and Seaborn), but you really need to understand matplotlib to use them.\n\nThe \"basic idea\" of the way you plot in matplotlib is common across a wide range of plotting libraries.  \n\nHere is an informative discussion of the main differences between matplotlib, seaborn and bokeh:\n\nhttps://www.reddit.com/r/Python/comments/4tuwoz/how_do_you_decide_between_the_plotting_libraries/\n","pos":0,"type":"cell"}
{"cell_type":"markdown","id":"935150","input":"### Bells and whistles\n\nBelow I will gussy up our basic scatterplot to demo some further features of matplotlib.\n\n","pos":10,"type":"cell"}
{"cell_type":"markdown","id":"c6ff80","input":"### Mumbo jumbo\n\nAs with any software library, there is some arbitrary syntactical stuff that you just need to get used to.\n\nFor matplotlib this has to do with the \"pyplot\" object, which we call **plt** by convention.\n\nThe program below shows a minimal line plot made with matplotlib.\n","pos":4,"type":"cell"}
{"cell_type":"markdown","id":"d0d917","input":"### Plotting smooth functions\n\nOften, especially in regression, we might want to plot a smooth curve.  \n\nBelow we illustrate how to do this using numpy universal functions.  \n\nA **universal function** is a function that is applied to a vector of values in an element-by-element fashion.\n\n","pos":14,"type":"cell"}
{"cell_type":"markdown","id":"e24593","input":"###  Scatterplots with labels\n\nIn ML we will look at lots of scatterplots.  \n\nOften different points are of different types.\n\nBelow we steal a nice example of that from [here](https://stackoverflow.com/questions/17411940/matplotlib-scatter-plot-legend)\n\n","pos":12,"type":"cell"}
{"cell_type":"markdown","id":"ec5c8f","input":"###  Plotting a \"patch\" or polygon\n\nAnother common plotting task is to draw a polygon by specifying the vertices.\n\nUnfortunately although it seems fundamental it's pretty complex so we'll delay talking about it.\n","pos":8,"type":"cell"}
{"cell_type":"markdown","id":"f30163","input":"### A line plot? Or scatterplot?\n\nNotice that matplotlib assumed that the data points were just a sample from a smooth function and tried to \"connect the dots\" with a line.\n\nOften you just want to plot the points themselves.\n\nThis is called a **scatterplot** and it works as follows.\n","pos":6,"type":"cell"}
{"cell_type":"markdown","id":"f51f7c","input":"### Those are the basics\n\nMost of the other things that matplotlib can do comes from embelishing that basic functionality.\n\nComing up with useful visualizations of complex data is an art form.\n\nIt can be very challenging and rewarding as a field unto itself.\n\nhttps://www.edwardtufte.com/tufte/books_vdqi","pos":9,"type":"cell"}
{"cell_type":"markdown","id":"f6fa0f","input":"### Plotting a covariance matrix\n\nAs we mentioned in the pandas tutorial, the correlations between different features are very interesting in ML.\n\nIt is possible to use matplotlib to create nice visualizations of the correlations (covariance) between the features in a dataset.\n\nHere is an example from [here](https://stackoverflow.com/questions/29432629/plot-correlation-matrix-using-pandas).\n\n","pos":27,"type":"cell"}
{"id":0,"time":1581019339194,"type":"user"}
{"last_load":1580832044636,"type":"file"}