{"attachments":{"soft%20a.png":{"type":"sha1","value":"4ceaad059bb2cba0f0d85476d171bf2589557630"},"soft.png":{"type":"sha1","value":"89e748bc1210e959b8b7594bd3ce23407a301b61"}},"cell_type":"markdown","id":"3cb593","input":"<img src=\"attachment:soft.png\" style=\"max-width:100%\">\n<img src=\"attachment:soft%20a.png\" style=\"max-width:100%\">","pos":34,"type":"cell"}
{"attachments":{"soft%20a.png":{"type":"sha1","value":"4ceaad059bb2cba0f0d85476d171bf2589557630"},"soft.png":{"type":"sha1","value":"89e748bc1210e959b8b7594bd3ce23407a301b61"}},"cell_type":"markdown","id":"8e0084","input":"<img src=\"attachment:soft.png\" style=\"max-width:100%\">\n<img src=\"attachment:soft%20a.png\" style=\"max-width:100%\">","pos":16,"type":"cell"}
{"backend_state":"running","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":83382272},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.9"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"f4563b","input":"","pos":47,"type":"cell"}
{"cell_type":"code","exec_count":10,"id":"8b3091","input":"\nX,y = make_blobs(centers=2,cluster_std = 4,random_state=11)\nss = StandardScaler()\nX = ss.fit_transform(X)\ny = 2*y-1\nXr = X[y==1]\nXb = X[y==-1]\nplt.scatter(Xr[:,0],Xr[:,1])\nplt.scatter(Xb[:,0],Xb[:,1])\nplt.show()","output":{"0":{"data":{"image/png":"bdf75780f0fca2d93ea4da84d63919b3077a537c","text/plain":"<Figure size 864x504 with 1 Axes>"},"exec_count":10,"metadata":{"image/png":{"height":411,"width":715},"needs_background":"light"},"output_type":"execute_result"}},"pos":13,"type":"cell"}
{"cell_type":"code","exec_count":11,"id":"edb5b3","input":"X = np.c_[np.ones(X.shape[0]),X]","pos":14,"type":"cell"}
{"cell_type":"code","exec_count":12,"id":"dde84e","input":"\"\"\"\nimport quadprog as qp\n## You complete me\n## Please see html file for output!\n\nG = np.eye(X.shape[1]) #G  is a  d×d  matrix. #Create the identiy  matrix\nG[0,0] = 0 #adding zero at (0,0)\nG = np.eye(X.shape[1])*10**(-9) # To keep complaince with strictly convex // sprinkle of small constrants on the diagonal\n\na = np.zeros(X.shape[1]) #a  is a  d  dimensional vector.\n\nAt some point you need to broadcast multiply y and X, like y*X\nBut when you do it will give you a dimensions mismatch error.\nThis happens because y is of shape \"(12,)\" or something like that -- it's not a matrix.\nBut the code will work if you do\n\ny.reshape(-1,1)*X\nThis forces y to have one column (instead of no columns).\n\nA = y.reshape(-1,1)*X #A  is a  k×d  matrix.\n\nv = np.ones(X.shape[0])#v¯  is a  k  dimensional vector\n\nw = qp.solve_qp(G=G, a=a, C=A.T, b=v)[0]\n\"\"\"","output":{"0":{"data":{"text/plain":"'\\nimport quadprog as qp\\n## You complete me\\n## Please see html file for output!\\n\\nG = np.eye(X.shape[1]) #G  is a  d×d  matrix. #Create the identiy  matrix\\nG[0,0] = 0 #adding zero at (0,0)\\nG = np.eye(X.shape[1])*10**(-9) # To keep complaince with strictly convex // sprinkle of small constrants on the diagonal\\n\\na = np.zeros(X.shape[1]) #a  is a  d  dimensional vector.\\n\\nAt some point you need to broadcast multiply y and X, like y*X\\nBut when you do it will give you a dimensions mismatch error.\\nThis happens because y is of shape \"(12,)\" or something like that -- it\\'s not a matrix.\\nBut the code will work if you do\\n\\ny.reshape(-1,1)*X\\nThis forces y to have one column (instead of no columns).\\n\\nA = y.reshape(-1,1)*X #A  is a  k×d  matrix.\\n\\nv = np.ones(X.shape[0])#v¯  is a  k  dimensional vector\\n\\nw = qp.solve_qp(G=G, a=a, C=A.T, b=v)[0]\\n'"},"exec_count":12,"output_type":"execute_result"}},"pos":15,"type":"cell"}
{"cell_type":"code","exec_count":13,"id":"0bee1a","input":"## Soft margin\n#Hint: Try to write  G ,  A , and  v¯  out in \"block matrix\" form to see what to do.\nimport quadprog as qp\n\ndef svm_fit(X,y,C_svm=1):\n    ## You complete me\n    I = np.eye(X.shape[1])  #Create the identiy  matrix\n    I[0,0] = 0 #adding zero at (0,0)\n    #G  is a  d×d  matrix.\n    G = np.zeros((X.shape[0]+X.shape[1],X.shape[0]+X.shape[1]))\n    G[:X.shape[1],:X.shape[1]] = I\n    G = G + np.eye(G.shape[1])**10**(-9)  # To keep complaince with strictly convex // sprinkle of small constrants on the diagonal\n    a = np.zeros(X.shape[1],) #a  is a  d  dimensional vector.\n    a = np.hstack((a,-C_svm*np.ones(X.shape[0])))\n    A = y.reshape(-1,1)*X #A  is a  k×d  matrix.\n    I = np.eye(X.shape[0])\n    zeros = np.zeros(X.shape)\n    A = np.vstack((np.hstack((A,I)),np.hstack((zeros,I))))\n    v = np.hstack((np.ones(X.shape[0]),np.zeros(X.shape[0])))#v¯  is a  k  dimensional vector\n    w = qp.solve_qp(G=G,a=a,C=A.T,b=v)[0][:X.shape[1]]\n    return w\n\nw = svm_fit(X,y)\nprint(w)","output":{"0":{"name":"stdout","output_type":"stream","text":"[0.01213621 0.35055765 1.90135795]\n"}},"pos":17,"type":"cell"}
{"cell_type":"code","exec_count":14,"id":"9bb667","input":"\nfor C in [10**(k) for k in [-4,-3,-2,-1,0,1,2]]:\n    w = svm_fit(X,y,C)\n\n    plt.figure(figsize=(8,10))\n    left = np.min(X[:,1])\n    right = np.max(X[:,1])\n    xx = np.linspace(left,right)\n    yy = -(w[0]+w[1]*xx)/w[2]\n    plt.plot(xx,yy,c='r',label=\"soft margin boundary\")\n    yy_um = -(w[0]+w[1]*xx-1)/w[2]\n    plt.plot(xx,yy_um,'--',label=\"margin\")\n    yy_um = -(w[0]+w[1]*xx+1)/w[2]\n    plt.plot(xx,yy_um,'--',c='b',label=\"margin\")\n\n    plt.scatter(Xr[:,0],Xr[:,1])\n    plt.scatter(Xb[:,0],Xb[:,1])\n    plt.title(\"C = {}\".format(C))\n    plt.legend()\n    plt.show()","output":{"0":{"data":{"image/png":"4eac224d6ca47d7cadfd27b6d87fe0bd5e261465","text/plain":"<Figure size 576x720 with 1 Axes>"},"exec_count":14,"metadata":{"image/png":{"height":590,"width":492},"needs_background":"light"},"output_type":"execute_result"},"1":{"data":{"image/png":"5edca97f4e878a40b88dd6d3b59529f035ffb355","text/plain":"<Figure size 576x720 with 1 Axes>"},"exec_count":14,"metadata":{"image/png":{"height":590,"width":492},"needs_background":"light"},"output_type":"execute_result"},"2":{"data":{"image/png":"3e7d8e8af790e593dec37cc15f4fba3846b51ed3","text/plain":"<Figure size 576x720 with 1 Axes>"},"exec_count":14,"metadata":{"image/png":{"height":590,"width":492},"needs_background":"light"},"output_type":"execute_result"},"3":{"data":{"image/png":"10df32595c7c6aab36780b5d2468d7fbb61bb554","text/plain":"<Figure size 576x720 with 1 Axes>"},"exec_count":14,"metadata":{"image/png":{"height":590,"width":492},"needs_background":"light"},"output_type":"execute_result"},"4":{"data":{"image/png":"69f8de1a10d96f8b6b9f32b19c4b054e94d76d9d","text/plain":"<Figure size 576x720 with 1 Axes>"},"exec_count":14,"metadata":{"image/png":{"height":590,"width":492},"needs_background":"light"},"output_type":"execute_result"},"5":{"data":{"image/png":"555cb6bf7fc55cad5ccd201eb63695115472798f","text/plain":"<Figure size 576x720 with 1 Axes>"},"exec_count":14,"metadata":{"image/png":{"height":590,"width":492},"needs_background":"light"},"output_type":"execute_result"},"6":{"data":{"image/png":"e01fa840597e241fbaefcb7b43158228f1d4d485","text/plain":"<Figure size 576x720 with 1 Axes>"},"exec_count":14,"metadata":{"image/png":{"height":590,"width":492},"needs_background":"light"},"output_type":"execute_result"}},"pos":18,"type":"cell"}
{"cell_type":"code","exec_count":15,"id":"bb2f34","input":"from sklearn.preprocessing import PolynomialFeatures\n\npf = PolynomialFeatures(7)\nX = pf.fit_transform(X[:,[1,2]])\n\nX.shape","output":{"0":{"data":{"text/plain":"(100, 36)"},"exec_count":15,"output_type":"execute_result"}},"pos":20,"type":"cell"}
{"cell_type":"code","exec_count":16,"id":"d90603","input":"w = svm_fit(X,y)\nw","output":{"0":{"data":{"text/plain":"array([-0.2072942 , -0.20288008,  1.67310802,  0.52738099,  0.04201471,\n        0.30516493, -0.0958657 ,  0.3042573 , -0.01139425,  0.25826069,\n        0.06491144, -0.03741778,  0.02096424,  0.03201461,  0.08986593,\n        0.14720909,  0.13421894, -0.01192962,  0.03812097,  0.0069864 ,\n        0.06049626, -0.24972729, -0.06424657, -0.00361508,  0.00405709,\n        0.00897706,  0.01041571,  0.02636454,  0.41031601,  0.10560177,\n        0.00265317,  0.01013162, -0.00183827,  0.00794256,  0.00438985,\n        0.0166865 ])"},"exec_count":16,"output_type":"execute_result"}},"pos":21,"type":"cell"}
{"cell_type":"code","exec_count":17,"id":"c25880","input":"def plot_boundary(X,y,w,pf,title=None):\n    xmin = np.min(X[:,1])-0.5\n    xmax = np.max(X[:,1])+0.5\n    ymin = np.min(X[:,2])-0.5\n    ymax = np.max(X[:,2])+0.5\n    x1 = np.arange(xmin,xmax,0.01)\n    x2 = np.arange(ymin,ymax,0.01)\n\n    x1v,x2v = np.meshgrid(x1,x2)\n\n    varz = np.concatenate((x1v.reshape(-1,1),x2v.reshape(-1,1)),axis=1)\n    varzp = pf.fit_transform(varz)\n\n    z = (varzp.dot(w)).reshape(x1v.shape)\n\n    #zsoft = sigmoid(z)\n    z = np.sign(z)\n    plt.contourf(x1v,x2v,z,alpha=0.25)\n    Xg = X[y==1]\n    Xb = X[y==-1]\n\n    plt.scatter(Xg[:,1],Xg[:,2],c=\"b\",alpha=0.5)\n    plt.scatter(Xb[:,1],Xb[:,2],c='r',alpha=0.5)\n    plt.xlabel(r\"$x_1$\")\n    plt.ylabel(r\"$x_2$\")\n    if title:\n        plt.title(title)\n    plt.colorbar()\n    return plt\n\nplt = plot_boundary(X,y,w,pf)\nplt.show()","output":{"0":{"data":{"image/png":"5171d914e7fcf6176885f0d37ca39a8a8a9065eb","text/plain":"<Figure size 864x504 with 2 Axes>"},"exec_count":17,"metadata":{"image/png":{"height":428,"width":660},"needs_background":"light"},"output_type":"execute_result"}},"pos":22,"type":"cell"}
{"cell_type":"code","exec_count":18,"id":"6b68e0","input":"for C in [0.00001,0.0001,0.001,0.01,0.1,1,2,4,8,20,50,100]:\n    print(\"C = {}\".format(C))\n    w = svm_fit(X,y,C)\n    plt = plot_boundary(X,y,w,pf)\n    plt.show()","output":{"0":{"name":"stdout","output_type":"stream","text":"C = 1e-05\n"},"1":{"data":{"image/png":"b1a94c9a3d6e46a50698ab2d2139f13d82b0b193","text/plain":"<Figure size 864x504 with 2 Axes>"},"exec_count":18,"metadata":{"image/png":{"height":428,"width":660},"needs_background":"light"},"output_type":"execute_result"},"10":{"name":"stdout","output_type":"stream","text":"C = 1\n"},"11":{"data":{"image/png":"5171d914e7fcf6176885f0d37ca39a8a8a9065eb","text/plain":"<Figure size 864x504 with 2 Axes>"},"exec_count":18,"metadata":{"image/png":{"height":428,"width":660},"needs_background":"light"},"output_type":"execute_result"},"12":{"name":"stdout","output_type":"stream","text":"C = 2\n"},"13":{"data":{"image/png":"54437a8a4806099603493f8b96b9d3cd7e706c0d","text/plain":"<Figure size 864x504 with 2 Axes>"},"exec_count":18,"metadata":{"image/png":{"height":428,"width":660},"needs_background":"light"},"output_type":"execute_result"},"14":{"name":"stdout","output_type":"stream","text":"C = 4\n"},"15":{"data":{"image/png":"a9b251b1b8ee88e808388fa60c64681c7f6903e6","text/plain":"<Figure size 864x504 with 2 Axes>"},"exec_count":18,"metadata":{"image/png":{"height":428,"width":660},"needs_background":"light"},"output_type":"execute_result"},"16":{"name":"stdout","output_type":"stream","text":"C = 8\n"},"17":{"data":{"image/png":"99bf97a990e3cebdaa54c9d800a16e53bb6859b9","text/plain":"<Figure size 864x504 with 2 Axes>"},"exec_count":18,"metadata":{"image/png":{"height":428,"width":660},"needs_background":"light"},"output_type":"execute_result"},"18":{"name":"stdout","output_type":"stream","text":"C = 20\n"},"19":{"data":{"image/png":"225a97baf996dd783983a974c9e3e455aa63e847","text/plain":"<Figure size 864x504 with 2 Axes>"},"exec_count":18,"metadata":{"image/png":{"height":428,"width":660},"needs_background":"light"},"output_type":"execute_result"},"2":{"name":"stdout","output_type":"stream","text":"C = 0.0001\n"},"20":{"name":"stdout","output_type":"stream","text":"C = 50\n"},"21":{"data":{"image/png":"39a70df57d97fd0b44407b8995b5ee620642fd59","text/plain":"<Figure size 864x504 with 2 Axes>"},"exec_count":18,"metadata":{"image/png":{"height":428,"width":660},"needs_background":"light"},"output_type":"execute_result"},"22":{"name":"stdout","output_type":"stream","text":"C = 100\n"},"23":{"data":{"image/png":"39a70df57d97fd0b44407b8995b5ee620642fd59","text/plain":"<Figure size 864x504 with 2 Axes>"},"exec_count":18,"metadata":{"image/png":{"height":428,"width":660},"needs_background":"light"},"output_type":"execute_result"},"3":{"data":{"image/png":"b1a94c9a3d6e46a50698ab2d2139f13d82b0b193","text/plain":"<Figure size 864x504 with 2 Axes>"},"exec_count":18,"metadata":{"image/png":{"height":428,"width":660},"needs_background":"light"},"output_type":"execute_result"},"4":{"name":"stdout","output_type":"stream","text":"C = 0.001\n"},"5":{"data":{"image/png":"b1a94c9a3d6e46a50698ab2d2139f13d82b0b193","text/plain":"<Figure size 864x504 with 2 Axes>"},"exec_count":18,"metadata":{"image/png":{"height":428,"width":660},"needs_background":"light"},"output_type":"execute_result"},"6":{"name":"stdout","output_type":"stream","text":"C = 0.01\n"},"7":{"data":{"image/png":"3d6b25b483731098feadfc2d997be998dd8ccea2","text/plain":"<Figure size 864x504 with 2 Axes>"},"exec_count":18,"metadata":{"image/png":{"height":428,"width":660},"needs_background":"light"},"output_type":"execute_result"},"8":{"name":"stdout","output_type":"stream","text":"C = 0.1\n"},"9":{"data":{"image/png":"cd5c0e9d502699fda49937e7115dd23efc3454e1","text/plain":"<Figure size 864x504 with 2 Axes>"},"exec_count":18,"metadata":{"image/png":{"height":428,"width":660},"needs_background":"light"},"output_type":"execute_result"}},"pos":24,"type":"cell"}
{"cell_type":"code","exec_count":19,"id":"507097","input":"from sklearn.model_selection import train_test_split\n\n#https://archive.ics.uci.edu/ml/datasets/Divorce+Predictors+data+set\n\ndf = pd.read_csv(\"divorce.csv\",delimiter=\";\")\ndf.head()\nX = df.values[:,:-1]\ny = df.values[:,-1]*2-1\n\npf = PolynomialFeatures(2)\nX = pf.fit_transform(X)\nX_train,X_test,y_train,y_test = train_test_split(X,y, random_state =42)\n\n","pos":26,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"a51621","input":"from sklearn.datasets import make_blobs\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt \nfrom sklearn.preprocessing import StandardScaler\n\nX,y = make_blobs(centers=2,random_state=11)\n\n#print(\"before\\n\",X)\n\nss = StandardScaler()\n# Fit to data, then transform it.\nX = ss.fit_transform(X)\n#print(\"after\\n\",X)\ny = 2*y-1\n\nXr = X[y==1]\n\nXb = X[y==-1]\n\nplt.scatter(Xr[:,0],Xr[:,1])\n\nplt.scatter(Xb[:,0],Xb[:,1])\n\nplt.show()\n","output":{"0":{"data":{"image/png":"9390f0ea3c4885919667aada930d62b88fa45b26","text/plain":"<Figure size 864x504 with 1 Axes>"},"exec_count":2,"metadata":{"image/png":{"height":411,"width":715},"needs_background":"light"},"output_type":"execute_result"}},"pos":0,"type":"cell"}
{"cell_type":"code","exec_count":20,"id":"fac11a","input":"print(\"SVM performance (linear kernel, polynomial features)\")\nfrom sklearn.metrics import accuracy_score as score\nfor C in [0.00001,0.0001,0.001,0.01,0.1,1,2,4,8,20,50,100]:\n    w = svm_fit(X_train,y_train,C)\n    yhat = np.sign(X_test.dot(w))\n    print(\"C = {}, score = {}\".format(C, score(y_test,yhat)))","output":{"0":{"name":"stdout","output_type":"stream","text":"SVM performance (linear kernel, polynomial features)\n"},"1":{"name":"stdout","output_type":"stream","text":"C = 1e-05, score = 0.9534883720930233\n"},"10":{"name":"stdout","output_type":"stream","text":"C = 20, score = 0.9534883720930233\n"},"11":{"name":"stdout","output_type":"stream","text":"C = 50, score = 0.9534883720930233\n"},"12":{"name":"stdout","output_type":"stream","text":"C = 100, score = 0.9534883720930233\n"},"2":{"name":"stdout","output_type":"stream","text":"C = 0.0001, score = 0.9534883720930233\n"},"3":{"name":"stdout","output_type":"stream","text":"C = 0.001, score = 0.9534883720930233\n"},"4":{"name":"stdout","output_type":"stream","text":"C = 0.01, score = 0.9534883720930233\n"},"5":{"name":"stdout","output_type":"stream","text":"C = 0.1, score = 0.9534883720930233\n"},"6":{"name":"stdout","output_type":"stream","text":"C = 1, score = 0.9534883720930233\n"},"7":{"name":"stdout","output_type":"stream","text":"C = 2, score = 0.9534883720930233\n"},"8":{"name":"stdout","output_type":"stream","text":"C = 4, score = 0.9534883720930233\n"},"9":{"name":"stdout","output_type":"stream","text":"C = 8, score = 0.9534883720930233\n"}},"pos":27,"type":"cell"}
{"cell_type":"code","exec_count":21,"id":"c217bc","input":"print(\"Linear Regression (for classification) same features\")\nfor C in [0.00001,0.0001,0.001,0.01,0.1,1,2,4,8,20,50,100]:\n    A = np.eye(X.shape[1])\n    A[0][0]=1\n    w = np.linalg.inv(X_train.T.dot(X_train)+C*A).dot(X_train.T).dot(y_train)\n    yhat = np.sign(X_test.dot(w))\n    print(\"lambda = {}, score = {}\".format(C, score(y_test,yhat)))","output":{"0":{"name":"stdout","output_type":"stream","text":"Linear Regression (for classification) same features\n"},"1":{"name":"stdout","output_type":"stream","text":"lambda = 1e-05, score = 0.7906976744186046\n"},"10":{"name":"stdout","output_type":"stream","text":"lambda = 20, score = 0.9069767441860465\n"},"11":{"name":"stdout","output_type":"stream","text":"lambda = 50, score = 0.9069767441860465\n"},"12":{"name":"stdout","output_type":"stream","text":"lambda = 100, score = 0.9302325581395349\n"},"2":{"name":"stdout","output_type":"stream","text":"lambda = 0.0001, score = 0.9302325581395349\n"},"3":{"name":"stdout","output_type":"stream","text":"lambda = 0.001, score = 0.9302325581395349\n"},"4":{"name":"stdout","output_type":"stream","text":"lambda = 0.01, score = 0.9302325581395349\n"},"5":{"name":"stdout","output_type":"stream","text":"lambda = 0.1, score = 0.9302325581395349\n"},"6":{"name":"stdout","output_type":"stream","text":"lambda = 1, score = 0.9302325581395349\n"},"7":{"name":"stdout","output_type":"stream","text":"lambda = 2, score = 0.9302325581395349\n"},"8":{"name":"stdout","output_type":"stream","text":"lambda = 4, score = 0.9302325581395349\n"},"9":{"name":"stdout","output_type":"stream","text":"lambda = 8, score = 0.9302325581395349\n"}},"pos":28,"type":"cell"}
{"cell_type":"code","exec_count":22,"id":"de2cf9","input":"from sklearn.svm import SVC\nfor C in [0.00001,0.0001,0.001,0.01,0.1,1,2,4,8,20,50,100]:\n    model = SVC(C=C,kernel=\"linear\")\n    model.fit(X_train,y_train)\n    yhat = model.predict(X_test)\n    print(\"lambda = {}, score = {}\".format(C, score(y_test,yhat)))","output":{"0":{"name":"stdout","output_type":"stream","text":"lambda = 1e-05, score = 0.9767441860465116\nlambda = 0.0001, score = 0.9767441860465116\nlambda = 0.001, score = 1.0\nlambda = 0.01, score = 1.0\nlambda = 0.1, score = 1.0\nlambda = 1, score = 1.0\nlambda = 2, score = 1.0\nlambda = 4, score = 1.0\nlambda = 8, score = 1.0\nlambda = 20, score = 1.0\nlambda = 50, score = 1.0\nlambda = 100, score = 1.0\n"}},"pos":29,"type":"cell"}
{"cell_type":"code","exec_count":23,"id":"2bbc45","input":"from sklearn.svm import SVC\nfor C in [0.00001,0.0001,0.001,0.01,0.1,1,2,4,8,20,50,100]:\n    model = SVC(C=C,kernel=\"rbf\")\n    model.fit(X_train,y_train)\n    yhat = model.predict(X_test)\n    print(\"lambda = {}, score = {}\".format(C, score(y_test,yhat)))","output":{"0":{"name":"stdout","output_type":"stream","text":"lambda = 1e-05, score = 0.46511627906976744\nlambda = 0.0001, score = 0.46511627906976744\nlambda = 0.001, score = 0.46511627906976744\nlambda = 0.01, score = 0.46511627906976744\n"},"1":{"name":"stdout","output_type":"stream","text":"lambda = 0.1, score = 0.9767441860465116\nlambda = 1, score = 0.9767441860465116\nlambda = 2, score = 0.9767441860465116\nlambda = 4, score = 0.9767441860465116\nlambda = 8, score = 1.0\nlambda = 20, score = 1.0\nlambda = 50, score = 1.0\nlambda = 100, score = 1.0\n"}},"pos":30,"type":"cell"}
{"cell_type":"code","exec_count":24,"id":"911e3b","input":"from sklearn.datasets import make_regression\n\nX_no_bias,y = make_regression(n_features=1,noise=10,random_state=100)\n\nplt.scatter(X_no_bias,y,alpha=0.6)\nplt.show()","output":{"0":{"data":{"image/png":"5fde7fb71bdd8c087220bf05859190d924fee55c","text/plain":"<Figure size 864x504 with 1 Axes>"},"exec_count":24,"metadata":{"image/png":{"height":411,"width":718},"needs_background":"light"},"output_type":"execute_result"}},"pos":32,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":25,"id":"4bed89","input":"X = np.c_[np.ones(X_no_bias.shape[0]),X_no_bias]","pos":33,"type":"cell"}
{"cell_type":"code","exec_count":26,"id":"80985f","input":"import quadprog as qp\n\ndef svr_fit(X,y,epsilon=0.1,C_svr=1):\n    ## You complete me\n    I = np.eye(X.shape[1])\n    I[0,0]=0\n    G = np.zeros((2*X.shape[0]+X.shape[1],2*X.shape[0]+X.shape[1]))\n    G[:X.shape[1],:X.shape[1]] = I\n    G = G + np.eye(G.shape[0])*10**(-9)\n\n    a = np.zeros((X.shape[1],))\n    a = np.hstack((a,-C_svr*np.ones(X.shape[0])))\n    a = np.hstack((a,-C_svr*np.ones(X.shape[0])))\n\n    I = np.eye(X.shape[0])\n    zerosMatrix_I = np.zeros(I.shape)\n    zerosMatrix_X = np.zeros(X.shape)\n\n    row1 = np.hstack((-X,I,zerosMatrix_I))\n    row2 = np.hstack((X, zerosMatrix_I, I))\n    row3 = np.hstack((zerosMatrix_X, I, zerosMatrix_I))\n    row4 = np.hstack((zerosMatrix_X, zerosMatrix_I, I))\n    A = np.vstack((row1,row2,row3,row4))\n\n    v1 = (-epsilon*np.ones(X.shape[0])-y)\n    v2 = (-epsilon*np.ones(X.shape[0])+y)\n    v3 = (np.zeros(2*X.shape[0]))\n    v = np.concatenate((v1,v2,v3))\n\n    w = qp.solve_qp(G=G, a=a, C=A.T, b=v)[0][:X.shape[1]]\n    return w","pos":35,"type":"cell"}
{"cell_type":"code","exec_count":27,"id":"db104d","input":"w= svr_fit(X,y,epsilon=0.5,C_svr=100)\nw","output":{"0":{"data":{"text/plain":"array([-0.16558521, 41.11313706])"},"exec_count":27,"output_type":"execute_result"}},"pos":36,"type":"cell"}
{"cell_type":"code","exec_count":28,"id":"55d0ee","input":"y_hat = X.dot(w)\nplt.scatter(X[:,1],y)\nplt.plot(X[:,1],y_hat,c='r')\nplt.title(\"The regression line learned by the SVR\")\nplt.show()","output":{"0":{"data":{"image/png":"1ccf905dd49d04917f7c2d66a59ba89bbc4e143d","text/plain":"<Figure size 864x504 with 1 Axes>"},"exec_count":28,"metadata":{"image/png":{"height":426,"width":718},"needs_background":"light"},"output_type":"execute_result"}},"pos":37,"type":"cell"}
{"cell_type":"code","exec_count":29,"id":"f2223e","input":"\nn_samples=20\nnoise=0.5\n\n### There was too much variability in the sklearn version of this function\n### so I implemented a version\ndef make_regression(n_features,noise,n_samples,random_state):\n    np.random.seed(random_state)\n    dom = np.linspace(0,3,3*n_samples)\n    dom = np.random.choice(dom,n_samples).reshape(n_samples,1)\n    nz = np.random.randn(n_samples,1)*noise\n    y = 2+1.7*dom+nz\n    return dom,y\n\n\n#from sklearn.datasets import make_regression\nnoise=0.5\nXnb,y = make_regression(n_features=1,noise=noise,n_samples=n_samples,random_state=42)\ny= y.ravel()\nXnb = np.sqrt(Xnb-np.min(Xnb))\nplt.scatter(Xnb,y)\nplt.title(\"The data to be fit\")\ndata = np.c_[Xnb,y]\nplt.show()","output":{"0":{"data":{"image/png":"de84110684780ec52f584d309cde42d81f5ad786","text/plain":"<Figure size 864x504 with 1 Axes>"},"exec_count":29,"metadata":{"image/png":{"height":426,"width":706},"needs_background":"light"},"output_type":"execute_result"}},"pos":39,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"80ca02","input":"#adding bias column with the scaler and fitting\nX = np.c_[np.ones(X.shape[0]),X]\n","pos":1,"type":"cell"}
{"cell_type":"code","exec_count":30,"id":"8dd170","input":"from sklearn.preprocessing import PolynomialFeatures\npoly = PolynomialFeatures(2)\nXp = poly.fit_transform(Xnb)\nXp[:2]","output":{"0":{"data":{"text/plain":"array([[1.        , 1.35296285, 1.83050847],\n       [1.        , 1.57845666, 2.49152542]])"},"exec_count":30,"output_type":"execute_result"}},"pos":40,"type":"cell"}
{"cell_type":"code","exec_count":31,"id":"f00fcd","input":"Xp.shape,y.shape","output":{"0":{"data":{"text/plain":"((20, 3), (20,))"},"exec_count":31,"output_type":"execute_result"}},"pos":41,"type":"cell"}
{"cell_type":"code","exec_count":32,"id":"d6b9c6","input":"w= svr_fit(Xp,y,epsilon=0.5,C_svr=100)\n\nxx = np.linspace(np.min(Xnb),np.max(Xnb),100)\nXX = poly.fit_transform(xx.reshape(-1,1))\npred = XX.dot(w)\nplt.scatter(Xnb[:,0],y)\nplt.plot(xx,pred,c='r')\nplt.title(\"The regression line learned by the SVR\")\nplt.show()","output":{"0":{"data":{"image/png":"763b59a6875738474e1bbd7d2cdf40fff4418a39","text/plain":"<Figure size 864x504 with 1 Axes>"},"exec_count":32,"metadata":{"image/png":{"height":426,"width":706},"needs_background":"light"},"output_type":"execute_result"}},"pos":42,"type":"cell"}
{"cell_type":"code","exec_count":33,"id":"89a5e7","input":"noise=0.5\nn_samples=5\nXnb,y = make_regression(n_features=1,noise=noise,n_samples=n_samples,random_state=42)\ny= y.ravel()\nXnb = np.sqrt(Xnb-np.min(Xnb))\nplt.scatter(Xnb,y)\nplt.title(\"The data to be fit\")\ndata = np.c_[Xnb,y]\nplt.show()\n\npoly = PolynomialFeatures(7)\nXp = poly.fit_transform(Xnb)\n\nw= svr_fit(Xp,y,epsilon=0.5,C_svr=100)\n\nxx = np.linspace(np.min(Xnb),np.max(Xnb),100)\nXX = poly.fit_transform(xx.reshape(-1,1))\npred = XX.dot(w)\nplt.scatter(Xnb[:,0],y)\nplt.plot(xx,pred,c='r')\nplt.title(\"The regression line learned by the SVR\")\nplt.show()","output":{"0":{"data":{"image/png":"f63fa8d819df31742f8e7a493f5535e82f2b9cdc","text/plain":"<Figure size 864x504 with 1 Axes>"},"exec_count":33,"metadata":{"image/png":{"height":426,"width":710},"needs_background":"light"},"output_type":"execute_result"},"1":{"data":{"image/png":"f24788065c8bf57a82e74aac57293d63e380e801","text/plain":"<Figure size 864x504 with 1 Axes>"},"exec_count":33,"metadata":{"image/png":{"height":426,"width":710},"needs_background":"light"},"output_type":"execute_result"}},"pos":44,"type":"cell"}
{"cell_type":"code","exec_count":34,"id":"1f6de1","input":"\nfor epsilon in [0.01,0.1,.5,1]:\n    for C_svr in [0.001,0.1,1,100,1000]:\n        w= svr_fit(Xp,y,epsilon=epsilon,C_svr=C_svr)\n\n        xx = np.linspace(np.min(Xnb),np.max(Xnb),100)\n        XX = poly.fit_transform(xx.reshape(-1,1))\n        pred = XX.dot(w)\n        plt.scatter(Xnb[:,0],y)\n        plt.plot(xx,pred,c='r')\n        plt.plot(xx,pred+epsilon,'--',c='r')\n        plt.plot(xx,pred-epsilon,'--',c='r')        \n        plt.title(\"SVR, epsilon={},C={}\".format(epsilon,C_svr))\n        \n        plt.show()","output":{"0":{"data":{"image/png":"04b248d260c4964f4d19d86a1b0f5b0a5d94d361","text/plain":"<Figure size 864x504 with 1 Axes>"},"exec_count":34,"metadata":{"image/png":{"height":426,"width":710},"needs_background":"light"},"output_type":"execute_result"},"1":{"data":{"image/png":"576248dab77fa110a9a69eb4b01e6558828586e8","text/plain":"<Figure size 864x504 with 1 Axes>"},"exec_count":34,"metadata":{"image/png":{"height":426,"width":710},"needs_background":"light"},"output_type":"execute_result"},"10":{"data":{"image/png":"d1da994b09591fa1a1e1f97f7c69fa4a46946f19","text/plain":"<Figure size 864x504 with 1 Axes>"},"exec_count":34,"metadata":{"image/png":{"height":426,"width":710},"needs_background":"light"},"output_type":"execute_result"},"11":{"data":{"image/png":"3deb73b93fb3057d2176d62b3cc3da4d84132804","text/plain":"<Figure size 864x504 with 1 Axes>"},"exec_count":34,"metadata":{"image/png":{"height":426,"width":710},"needs_background":"light"},"output_type":"execute_result"},"12":{"data":{"image/png":"f39927396812ffed51530d27a965c99ed9db6f60","text/plain":"<Figure size 864x504 with 1 Axes>"},"exec_count":34,"metadata":{"image/png":{"height":426,"width":710},"needs_background":"light"},"output_type":"execute_result"},"13":{"data":{"image/png":"ee12857ec169e7fccd6cc42a102c981ace90bb4e","text/plain":"<Figure size 864x504 with 1 Axes>"},"exec_count":34,"metadata":{"image/png":{"height":426,"width":710},"needs_background":"light"},"output_type":"execute_result"},"14":{"data":{"image/png":"9307f4f1c33d9868ae1496cb0dd28e5c5c5ca349","text/plain":"<Figure size 864x504 with 1 Axes>"},"exec_count":34,"metadata":{"image/png":{"height":426,"width":710},"needs_background":"light"},"output_type":"execute_result"},"15":{"data":{"image/png":"1ccb067d44a1e631c23d21d7819a4dafc502f2cf","text/plain":"<Figure size 864x504 with 1 Axes>"},"exec_count":34,"metadata":{"image/png":{"height":426,"width":710},"needs_background":"light"},"output_type":"execute_result"},"16":{"data":{"image/png":"7bfb136f47d33a754808b670b69bae5d0a17cf8b","text/plain":"<Figure size 864x504 with 1 Axes>"},"exec_count":34,"metadata":{"image/png":{"height":426,"width":710},"needs_background":"light"},"output_type":"execute_result"},"17":{"data":{"image/png":"866c8ed61c3be8ea486a4b03f93eb950eea92b54","text/plain":"<Figure size 864x504 with 1 Axes>"},"exec_count":34,"metadata":{"image/png":{"height":426,"width":710},"needs_background":"light"},"output_type":"execute_result"},"18":{"data":{"image/png":"582137a843b04f1df1fe8023d56aa0cdfac7f16e","text/plain":"<Figure size 864x504 with 1 Axes>"},"exec_count":34,"metadata":{"image/png":{"height":426,"width":710},"needs_background":"light"},"output_type":"execute_result"},"19":{"data":{"image/png":"315125081eeca3d7745a782ee1ac7080f5b148ef","text/plain":"<Figure size 864x504 with 1 Axes>"},"exec_count":34,"metadata":{"image/png":{"height":426,"width":710},"needs_background":"light"},"output_type":"execute_result"},"2":{"data":{"image/png":"8924609a879fd1e0a3a04e3a0a2f27e599cf2270","text/plain":"<Figure size 864x504 with 1 Axes>"},"exec_count":34,"metadata":{"image/png":{"height":426,"width":710},"needs_background":"light"},"output_type":"execute_result"},"3":{"data":{"image/png":"0f01ab46507e921660d7f9a0f85e82af2f9b37c7","text/plain":"<Figure size 864x504 with 1 Axes>"},"exec_count":34,"metadata":{"image/png":{"height":426,"width":710},"needs_background":"light"},"output_type":"execute_result"},"4":{"data":{"image/png":"749780adc13355d8abd02edfa24c6321a4583053","text/plain":"<Figure size 864x504 with 1 Axes>"},"exec_count":34,"metadata":{"image/png":{"height":426,"width":710},"needs_background":"light"},"output_type":"execute_result"},"5":{"data":{"image/png":"a8c765c55d26f4e36ea8c1ad1f0086d3b12a05a3","text/plain":"<Figure size 864x504 with 1 Axes>"},"exec_count":34,"metadata":{"image/png":{"height":426,"width":710},"needs_background":"light"},"output_type":"execute_result"},"6":{"data":{"image/png":"63495189bdd103936ed0f3ad3fe6776087aecaf7","text/plain":"<Figure size 864x504 with 1 Axes>"},"exec_count":34,"metadata":{"image/png":{"height":426,"width":710},"needs_background":"light"},"output_type":"execute_result"},"7":{"data":{"image/png":"5de4cee5cef79b3c1f966cea48d75840a83d5eac","text/plain":"<Figure size 864x504 with 1 Axes>"},"exec_count":34,"metadata":{"image/png":{"height":426,"width":710},"needs_background":"light"},"output_type":"execute_result"},"8":{"data":{"image/png":"3ff742b02422ffd6f2b826d5ffa53856bdd87aed","text/plain":"<Figure size 864x504 with 1 Axes>"},"exec_count":34,"metadata":{"image/png":{"height":426,"width":710},"needs_background":"light"},"output_type":"execute_result"},"9":{"data":{"image/png":"1e9f23c5b00b980c4cf794e90cee18d554587032","text/plain":"<Figure size 864x504 with 1 Axes>"},"exec_count":34,"metadata":{"image/png":{"height":426,"width":710},"needs_background":"light"},"output_type":"execute_result"}},"pos":46,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"1b6fe7","input":"#!pip3 install quadprog","pos":4,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"944cd8","input":"import quadprog as qp\n## You complete me\n## Please see html file for output!\n\nG = np.eye(X.shape[1]) #G  is a  d×d  matrix. #Create the identiy  matrix\nG[0,0] = 0 #adding zero at (0,0)\nG = np.eye(X.shape[1])*10**(-9) # To keep complaince with strictly convex // sprinkle of small constrants on the diagonal\n\na = np.zeros(X.shape[1]) #a  is a  d  dimensional vector.\n\"\"\"\nAt some point you need to broadcast multiply y and X, like y*X\nBut when you do it will give you a dimensions mismatch error.\nThis happens because y is of shape \"(12,)\" or something like that -- it's not a matrix.\nBut the code will work if you do\n\ny.reshape(-1,1)*X\nThis forces y to have one column (instead of no columns).\n\"\"\"\nA = y.reshape(-1,1)*X #A  is a  k×d  matrix.\n\nv = np.ones(X.shape[0])#v¯  is a  k  dimensional vector\n\nw = qp.solve_qp(G=G, a=a, C=A.T, b=v)[0]\n","pos":5,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"c766e8","input":"w","output":{"0":{"data":{"text/plain":"array([0.08441634, 0.6361118 , 0.90252076])"},"exec_count":6,"output_type":"execute_result"}},"pos":6,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"896f86","input":"left = np.min(X[:,1])\nright = np.max(X[:,1])\nxx = np.linspace(left,right)\nyy = -(w[0]+w[1]*xx)/w[2]\nplt.plot(xx,yy,c='r',label=\"max margin boundary\")\nyy_um = -(w[0]+w[1]*xx-1)/w[2]\nplt.plot(xx,yy_um,'--',label=\"margin\")\nyy_um = -(w[0]+w[1]*xx+1)/w[2]\nplt.plot(xx,yy_um,'--',c='b',label=\"margin\")\n\nplt.scatter(Xr[:,0],Xr[:,1])\nplt.scatter(Xb[:,0],Xb[:,1])\nplt.legend()\nplt.show()\n","output":{"0":{"data":{"image/png":"7ccb3f9d75530d77b0d87ed1ed08aa0a7c941291","text/plain":"<Figure size 864x504 with 1 Axes>"},"exec_count":7,"metadata":{"image/png":{"height":411,"width":705},"needs_background":"light"},"output_type":"execute_result"}},"pos":7,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"8df172","input":"## The support vectors...\n\n[(w.dot(x),(x[1],x[2])) for x in X if w.dot(x) == 1 or w.dot(x)==-1  ]","output":{"0":{"data":{"text/plain":"[(-1.0, (-0.5167856699098254, -0.8373024843430854))]"},"exec_count":8,"output_type":"execute_result"}},"pos":9,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"7076f3","input":"\nfrom mpl_toolkits.mplot3d import axes3d\nimport matplotlib.pyplot as plt\n\nx = np.linspace(-2, 2, 30)\ny = np.linspace(-2, 2, 30)\n\nXX, YY = np.meshgrid(x, y)\nZZ = w[0]+w[1]*XX+w[2]*YY\n\n\nfig = plt.figure(figsize=(7,7))\nax = fig.add_subplot(111, projection='3d')\n#ax2 = fig.add_subplot(212, projection='3d')\n# Grab some test data.\n#X, Y, Z = axes3d.get_test_data(0.05)\n\n# Plot a basic wireframe.\nax.plot_wireframe(XX, YY, ZZ, rstride=10, cstride=10,alpha=0.9)\n\nax.plot_surface(XX, YY, 0*XX, rstride=10, cstride=10,alpha=0.2)\n\n\nax.scatter(Xr[:,0], Xr[:,1], np.zeros(Xr.shape[0]),c='b')\nax.scatter(Xb[:,0], Xb[:,1], np.zeros(Xr.shape[0]),c='r')\n\n\"\"\"\nax2.plot_wireframe(XX, YY, 3*ZZ, rstride=10, cstride=10,alpha=0.9)\n\nax2.plot_surface(XX, YY, 0*XX, rstride=10, cstride=10,alpha=0.2)\n\n\nax2.scatter(Xr[:,0], Xr[:,1], np.zeros(Xr.shape[0]),c='r')\nax2.scatter(Xb[:,0], Xb[:,1], np.zeros(Xr.shape[0]),c='b')\n\"\"\"\n\nplt.show()","output":{"0":{"data":{"image/png":"e75f0c8604f408493e1ff18caf68a909a64e113b","text/plain":"<Figure size 504x504 with 1 Axes>"},"exec_count":9,"metadata":{"image/png":{"height":394,"width":404},"needs_background":"light"},"output_type":"execute_result"}},"pos":11,"type":"cell"}
{"cell_type":"markdown","id":"0d40fd","input":"### Solving the  optimization problem\n\nBefore when we wanted to do optimization we used gradient descent or the normal equations (for linear regression).\n\nBut here we will do something different.\n\nThe optimization problem defined by an SVM is an example of a **quadratic programming** (QP) problem.\n\nQuadratic programming problems are very well understood and there are a number of QP solving libraries that can be used to train a SVM.\n\n---\n\nA discussion of QP is beyond the scope of our class. \n\nBut the basic idea is to find the optimum of a linearly constrained set subject to a quadratic function.\n\n![img](quadratic-programming.jpg)\n\n---\n\nThere are a number of QP solvers available in python:  CVXOPT, CVXPY, Gurobi, MOSEK, qpOASES and quadprog.\n\nWe will use quadprog.\n\n---\n\n### Defining the QP problem\n\nThe following formally defines a QP problem.\n\n**Minimize**     $\\frac{1}{2} \\bar{w}^T G \\bar{w} - \\bar{a}^T \\bar{w}$\n\n**Subject to**   $A\\bar{w} \\geq \\bar{v}$\n\nThe first line gives a general quadratic function of $\\bar{w}$.\n\nThe second line gives a **system** of inequalities (one for each dimension of $\\bar{v}$).\n\nHere:\n\n1. $G$ is a $d\\times d$ matrix.\n2. $\\bar{a}$ is a $d$ dimensional vector.\n3. $A$ is a $k \\times d$ matrix.\n4. $\\bar{v}$ is a $k$ dimensional vector.\n\nI have expressed the variables to optimize as $\\bar{w}$ to give a big hint as to how this will work for hard margin classification.\n\nBut be mindful that the variables could have other meanings (as they will in soft-margin classification).\n\nThe QP problem and QP solvers do not care about any particular meaning of the elements as it relates to the SVM problem.\n\n---\n\n### Connecting QP and SVM\n\nNotice that the thing we want to minimize in the SVM problem is\n\n$\\frac{1}{2}|\\!|\\bar{w}_{[1:]}|\\!|^2 = \\frac{1}{2}\\bar{w}_{[1:]}^T\\bar{w}_{[1:]}$\n\nWe can realize this as $\\frac{1}{2} \\bar{w}^T G \\bar{w} - \\bar{a}^T \\bar{w}$ by \n\n1. making $G = I$, except $G_{0,0}$, which will be 0,\n2. and by making $\\bar{a} = \\bar{0}$.\n\nThe constraints in the SVM problem are $y_n(\\bar{w}^T\\bar{x}_n) \\geq 1$ for all $n=1,2,\\ldots,N$.\n\nWe can realize this as $A\\bar{w} \\geq \\bar{v}$ in the following way.\n\nFirst, $A$ will have $k=N$ rows.\n\nThe $i$th row of $A$ will be $y_i\\bar{x}_i$.\n\nThe vector $\\bar{v}$ can simply be a vector of $N$ ones.\n\n\n\n---\n\n\nTo simplify the transition from the equations to the code, we will formally define the QP problem using the notation used in the quadprog documentation.\n\nYou can see the docs by loading \n\n```\nimport quadprog as qp\nqp.solve_qp?\n```\n\nWhich produces\n\n```\nDocstring:\nSolve a strictly convex quadratic program\n\nMinimize     1/2 x^T G x - a^T x\nSubject to   C.T x >= b\n\nThis routine uses the the Goldfarb/Idnani dual algorithm [1].\n\nReferences\n---------\n... [1] D. Goldfarb and A. Idnani (1983). A numerically stable dual\n    method for solving strictly convex quadratic programs.\n    Mathematical Programming, 27, 1-33.\n\nParameters\n----------\nG : array, shape=(n, n)\n    matrix appearing in the quadratic function to be minimized\na : array, shape=(n,)\n    vector appearing in the quadratic function to be minimized\nC : array, shape=(n, m)\n    matrix defining the constraints under which we want to minimize the\n    quadratic function\nb : array, shape=(m), default=None\n    vector defining the constraints\nmeq : int, default=0\n    the first meq constraints are treated as equality constraints,\n    all further as inequality constraints (defaults to 0).\nfactorized : bool, default=False\n    If True, then we are passing :math:`R^{−1}` (where :math:`G = R^T R`)\n    instead of the matrix G in the argument G.\n\nReturns\n-------\nx : array, shape=(n,)\n    vector containing the solution of the quadratic programming problem.\nf : float\n    the value of the quadratic function at the solution.\nxu : array, shape=(n,)\n    vector containing the unconstrained minimizer of the quadratic function\niterations : tuple\n    2-tuple. the first component contains the number of iterations the\n    algorithm needed, the second indicates how often constraints became\n    inactive after becoming active first.\nlagrangian : array, shape=(m,)\n    vector with the Lagragian at the solution.\niact : array\n    vector with the indices of the active constraints at the solution.\nType:      builtin_function_or_method\n```\n\nNotice that `quadprog` uses `x` for our $\\bar{w}$ and `b` for our $\\bar{v}$. \n\nWe will not use the optional parameters `meq` or `factorized`.\n\nFor reasons that are unclear `quadprog` prefers to think of our $A$ as being the transpose of another matrix called $C$.  \n\nWe generally only care about the 0th entry of the vector returned by `quadprog`, which is our $\\bar{w}$.\n\n---\n\n### Exercise\n\nBelow, use quadprog to find the maximum margin $\\bar{w}$ for the blob data loaded above.\n\nThe solver will not like it if a row or column of $G$ is all zeros.\n\nAfter you set up $G$ add a \"sprinkling\" of small constants on the diagonal:\n\n```\nG = G + np.eye(X.shape[1])*10**(-9)\n```\n\nThis ensures that $G$ is *positive-definite*, meaning $\\bar{w}^TG\\bar{w} > 0$.\n.","pos":3,"type":"cell"}
{"cell_type":"markdown","id":"209bf4","input":"### Soft margin\n\nYou can use the hard margin method for linearly separable data, but most real data is not perfectly linearly separable. \n\nAdditionally the hard margin approach is sensitive to outliers.  \n\nAn outlying data point can significantly change the best margin boundary.\n\n---\n\nTo relax the hard margin assumption of linear separability, we have to allow **margin violations**.\n\nThis means we have to allow points inside the margin, and even allow points on the wrong side of the decision boundary.  \n\nWhile doing this, we still want to stay true to the \"wide margin\" principle.  \n\nThe key idea that makes this possible is a **slack variable**.\n\nWe usually denote slack variables as $\\zeta$, the Greek letter zeta.\n\n---\n\n### Slack variables\n\nFor every training point $(\\bar{x}_n, y_n)$ we will associate a slack variable $\\zeta_n$.  \n\nThe slack variable measures how far $\\bar{x}_n$ is from being on the right side of the margin.\n\nIf $\\bar{x}_n$ is actually on the correct side of the margin then $\\zeta_n = 0$.\n\nIn hard margin we require $y_n\\bar{w}^T\\bar{x} \\geq 1$.\n\nWith slack variables we only require $y_n\\bar{w}^T\\bar{x} \\geq 1-\\zeta_n$,\n\nwhere $\\zeta_n \\geq 0$.\n\n![img](slack.jpeg)\n\nNotice that slack variables are always nonnegative.\n\n---\n\n### The soft margin optimization problem\n\nIn soft margin classification, we want to maximize the width of the margin, but we also want to minimize the amount of slack we need.  \n\nMathematically we want to\n\n**minimize** $$\\frac{1}{2}\\bar{w}^T_{[1:]}\\bar{w}_{[1:]} + C\\sum_{i=1}^N \\zeta_i$$\n\n**subject to**\n\n$$y_i\\bar{w}^T\\bar{x}_i \\geq 1-\\zeta_i$$ and $$\\zeta_i \\geq 0$$ for $i=1,2\\ldots,N$.\n\n\nThe minimization is with respect to the variables $\\bar{w},\\zeta_1,\\zeta_2,\\ldots,\\zeta_N$.\n\nTo be clear:  **we now want to minimize an expression that involves $d+1+N$ variables**.\n\n---\n\nThe constant $C$ is a nonzero hyperparameter that lets us balance two competing wants:\n\n1. the widest possible margins\n2. the most benign possible margin violations\n\nIf $C$ is large then margin violations will be heavily penalized, causing the margin to be smaller.\n\nIf $C$ is small then margin violations are only lightly penalized, and the margin is allowed to be wider.\n\nWe give some plots below showing the effect of shrinking $C$.\n\n![img](sm1.png)\n\n![img](sm2.png)\n\n\n### The soft margin QP problem\n\nThe soft margin constraint is still a quadratic programming problem.\n\n**Minimize**     $\\frac{1}{2} \\bar{z}^T G \\bar{z} - \\bar{a}^T \\bar{z}$\n\n**Subject to**   $A\\bar{z} \\geq \\bar{v}$\n\n\nHere I have made the variables $\\bar{z}$ minimized by the QP solver into the deliberately abstract $\\bar{z}$.\n\nNow we will use $\\bar{z} = [w_0,w_1,w_2,\\ldots,w_d,\\zeta_1,\\zeta_2,\\ldots,\\zeta_N]$.\n\nWe need to choose $G$ so that $\\bar{z}^T G \\bar{z} = \\frac{1}{2}\\bar{w}^T_{[1:]}\\bar{w}_{[1:]}$.\n\nWe need to chose $\\bar{a}$ so that $\\bar{a}^T\\bar{z} = -C\\sum_{i=1}^N\\zeta_i$.\n\nFinally we need to choose $A$ and $\\bar{v}$ so that $A\\bar{z} \\geq \\bar{v}$ expresses both $$y_i\\bar{w}^T\\bar{x}_i \\geq 1-\\zeta_i$$ as well as $\\zeta_i \\geq 0$ for all $i=1,2,\\ldots,N$.\n\n### Exercise:\n\nImplement a soft margin SVM in the function `svm-fit` below.  \n\nHint:  Try to write $G$, $A$, and $\\bar{v}$ out in \"block matrix\" form to see what to do.\n","pos":12,"type":"cell"}
{"cell_type":"markdown","id":"2e93ea","input":"### A chance to overfit\n\nWe now make the number of data points small compared to the complexity of the model.\n\nThis will allow us to examine how the SVR deals with overfitting.\n","pos":43,"type":"cell"}
{"cell_type":"markdown","id":"5eb4c0","input":"## Support Vector Machines\n\n\nThe basic idea of the SVM is to find a **maximum margin** separator. \n\n![img](margin.png)\n\n\nAs with the linear model, the SVM is based on the hyperplane\n\n$$\\bar{w}^T\\bar{x}$$\n\nBecause scaling affects the width of the margin, SVM methods are sensitive to data scaling. \n\n---\n\n\nIn classification the hypothesis class is the same as linear classification:\n\n$$\\mathcal{H} = \\{sign(\\bar{w}^T\\bar{x}) : \\bar{w} \\in \\mathbb{R}^{d+1}\\}$$\n\nThe difference is just the algorithm for finding the best $\\bar{w}$.\n\n---\n\nThe above notation employs our usual convention that $\\bar{w} = [w_0,w_1,\\ldots,w_d]^T$ and $\\bar{x} = [x_0,x_1,\\ldots,x_d]^T$ where $x_0 = 1$ is the bias coordinate. \n\nBut because of the way SVMs work it is more convenient to use the notation $b = w_0$, $\\bar{w} = [w_1,\\ldots,w_d]^T$ and $\\bar{x} = [x_1,\\ldots,x_d]^T$.\n\nThen we express the hyperplane like this:\n\n$$\\bar{w}^T\\bar{x} + b$$\n\nIt says the same thing, just in different notation. \n\nTo avoid confusion I will express this as \n\n$$\\bar{w}^T_{[1:]}\\bar{x}_{[1:]} + b$$\n\nwith the understanding that $b=w_0$.\n\nThen we can keep our familiar notation and \n\n$$\\bar{w}^T\\bar{x} = \\bar{w}^T_{[1:]}\\bar{x}_{[1:]} + b$$\n\n\n\n#### Decision boundary\n\nAs usual, the decision boundary is given by the equation\n\n$$\\bar{w}^T\\bar{x} = 0.$$\n\nThe margin lines are (by definition) given by the equations \n\n$$\\bar{w}^T\\bar{x} = 1$$\n\nand\n\n$$\\bar{w}^T\\bar{x} = -1.$$\n\nTo fully understand this, remember that the decision boundary is really the intersection of the **plane** $z = \\bar{w}^T\\bar{x}$ and the $xy$ plane.\n\n![img](2d.png)\n\n![img](3d2.png)\n\nIn the above plot, the decision boundary is where the mesh plane intersects the $xy$ or $z=0$ plane.  \n\nThe upper margin is where the mesh plane intersects the $z=1$ plane (projected down to $xy$).\n\nThe lower margin is where the mesh plane intersects the $z=-1$ plane (projected down to $xy$).\n\n---\n\n#### Slope and margin width\n\nNotice that the locations of the margin depend on the slope of the mesh plane.\n\nThe plane *must* go through the decision boundary, but it could do so with varying degrees of steepness.\n\nThe steeper the angle, the narrower the margin will be.\n\nObserve that $\\nabla_{\\bar{x}_{[1:]}} \\bar{w}^T\\bar{x} = \\bar{w}_{[1:]}$.\n\nTherefore the direction of increase for the mesh plane is $\\bar{w}_{[1:]}$.\n\nAnd the steepness is controlled by $|\\!|\\bar{w}_{[1:]}|\\!|$.\n\nThe smaller $|\\!|\\bar{w}_{[1:]}|\\!|$ is, more gradual the slope, the wider the margin.\n\nWhen $|\\!|\\bar{w}_{[1:]}|\\!|$ is large, the opposite is true -- the margins are narrow and the slope is steep.\n\n---\n\n\n### Hard margin classification\n\n\nIn hard margin classification we assume that the data is linearly separable.\n\nThen we try to find the boundary that admits the widest margin.\n\nWe can phrase everything as an optimization problem.\n\nThe goal is to maximize the margin width, while ensuring that the data is correctly classified by the \"thick\" decision boundary.\n\n---\n\n### The optimization problem\n\nRecall that maximizing margin width means minimizing $|\\!|\\bar{w}_{[1:]}|\\!|$.\n\nEquivalently we can minimize that more convenient expression $\\frac{1}{2}|\\!|\\bar{w}_{[1:]}|\\!|^2$.\n\nAnd we want to do this subject to these constraints:\n\n$\\bar{w}^T\\bar{x}_n \\geq 1$ whenever $y_n = 1$\n\nand\n\n$\\bar{w}^T\\bar{x}_n \\leq -1$ whenever $y_n = -1$\n\nMore succinctly, we want to\n\n**minimize**  $\\frac{1}{2}|\\!|\\bar{w}_{[1:]}|\\!|^2$\n\n**subject to** $y_n(\\bar{w}^T\\bar{x}_n) \\geq 1$ for all $n=1,2,\\ldots,N$.\n\nThere is one constraint for each training data point. \n\n\n","pos":2,"type":"cell"}
{"cell_type":"markdown","id":"6d21b6","input":"### Changing $\\epsilon$ and $C$\n\nIn the plots below we examine the conseqences of changing $\\epsilon$ and $C$.\n\nReducing $\\epsilon$ creates a narrower tube.\n\nTo maintain the same level of slack the curve must become more curvy.\n\nThis increases variance.  \n\n---\n\nIncreasing $C$ makes the model hate margin violations more.\n\nWith the same size tube the curve will become curvier to reduce slack.\n\nThis increases variance.\n\n---\n\nIf $\\epsilon$ is reduced and/or $C$ is increased, variance will increase.\n\nThis means that $C$ will have lower training error but possibly overfit.\n","pos":45,"type":"cell"}
{"cell_type":"markdown","id":"715908","input":"### Polynomial features\n\nJust as with linear regression, it may help the SVM to add polynomial features.\n\nThis allows a higher degree decision boundary at the cost of extra variance.\n\n","pos":19,"type":"cell"}
{"cell_type":"markdown","id":"7db92d","input":"### Support vector regression\n\nMuch of the setup we did for SVM classification can be adapted to solve a regression problem.\n\nRather than an \"empty\" margin between two classes, we now want a \"full\" margin around the regression line.\n\nThe radius of this margin is a new hyperparameter called $\\epsilon$.\n\nWe want $\\epsilon$ to be small, which may lead to some datapoints being outside the \"$\\epsilon$ tunnel\".\n\nAgain we assign to each training variable a certain amount of slack (which we will then minimize using QP).\n\nUnfortunately absolute value is a nonlinear function, so we cannot express the criteria we really want in QP:\n\n$$|\\bar{w}^T\\bar{x}_n-y_n| < \\epsilon+\\zeta_n$$\n\nHowever we can just convert this into two linear inequalities:\n\n$$\\bar{w}^T\\bar{x}_n-y_n < \\epsilon + \\zeta^*_n$$\n\n$$y_n - \\bar{w}^T\\bar{x}_n < \\epsilon + \\zeta_n$$\n\nNow each datapoint has *two* slack variables. \n\nOne is for being too far above the regression line (hyperplane).\n\nThe other is for beeing too far below the regression line (hyperplane).\n\nThe following picture shows graphically what we are trying to do:\n\n![img](corridor.jpeg)\n\n\n\nIn addition to requiring the slack variables to be positive, this gives us our linear constraints.\n\nWe still want to minimize $|\\!|\\bar{w}_{[1:]}|\\!|$, because this now controls the \"flatness\" of the regression line (hyperplane).  \n\nWe want to find the flattest line (hyperplane) fitting the data, subject to the constraints, with the fewest margin violations.\n\nThis *is* a QP problem, and so we can express the support vector regression problem as\n\n\n**minimize** $$\\frac{1}{2}\\bar{w}^T_{[1:]}\\bar{w}_{[1:]} + C\\sum_{i=1}^N (\\zeta_i+\\zeta^*_i)$$\n\n**subject to**\n\n$$\\bar{w}^T\\bar{x}_n-y_n < \\epsilon + \\zeta^*_n$$\n\n$$y_n - \\bar{w}^T\\bar{x}_n < \\epsilon + \\zeta_n$$\n\n$$\\zeta_n \\geq 0$$\n\n$$\\zeta^*_n \\geq 0$$\n\n\n### Exercise\n\nCode this up using `quadprog` inside the `svr_fit` function below.\n\nAgain, it will be helpful to sketch out what you need to do in block matrix form.\n\n","pos":31,"type":"cell"}
{"cell_type":"markdown","id":"8d649d","input":"### A 3D view\n\nHere is a 3-dimensional view of the same decision boundary.\n\nTry to use it to understand why $\\bar{w}^T\\bar{x} = \\pm 1$ gives different margins depending on $\\bar{w}$.\n","pos":10,"type":"cell"}
{"cell_type":"markdown","id":"a29f7c","input":"### Polynomial features\n\nWe now explore using our SVR with some toy data.\n\nWe make the regression curve \"curvy\" using a polynomial transformation of the data.\n\nThen we explore the effect that $\\epsilon$ and $C$ have on bias and variance.\n","pos":38,"type":"cell"}
{"cell_type":"markdown","id":"ca9193","input":"### A real dataset\n\nWe now try out our SVM classifier on a real dataset.\n\nA link to the data source on UCI is provided below.\n\nOn this dataset our SVM outperforms our logistic regression model.\n\nIn fact it seems to outperform the library SVM from sklearn.\n","pos":25,"type":"cell"}
{"cell_type":"markdown","id":"de05df","input":"### Regularization\n\nThe hyperparameter $C$ can be adjusted to different values.  \n\nBy increasing $C$ we prioritize points being classified correctly.\n\nThis makes the boundary more \"curvy\" and increases variance.\n\nBy lowering $C$ we tolerate misclassifications.\n\nThis makes the boundary more stiff and decreases variance.\n\n\nIf $C$ is **too** small there might be strange behavior,\n\nbecause we're then trying so solve an impossible problem on data that isn't linearly separable.\n\n\nIn the plots below the model starts to overfit somewhere around $C=1$.","pos":23,"type":"cell"}
{"cell_type":"markdown","id":"fa9123","input":"### Support vectors\n\nGiven that this learning algorithm is called a Support Vector Machine, we should mention support vectors.\n\nThese are just the training points that are exactly on the margins.\n\nIn other words they are the training points $(\\bar{x}_n,y_n)$ such that\n\n$$y_n\\bar{w}^T\\bar{x} = \\pm 1$$\n\nBelow we find the support vectors for the above problem.\n\nGiven their coordinates, you can find them in the plot above. \n","pos":8,"type":"cell"}
{"id":0,"time":1589906211640,"type":"user"}
{"last_load":1589906216009,"type":"file"}