{"backend_state":"running","kernel":"anaconda2019","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":77848576},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.7"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":10,"id":"a1b854","input":"# Sort feature ranking\n\nimportances = model3.feature_importances_\n\nstd = np.std([tree.feature_importances_ for tree in model3.estimators_],axis=0)\n\nindices = np.argsort(importances)[::-1]\n\n\nprint(\"Feature ranking:\")\n\nfor f in range(X_train.shape[1]):\n    print(\"%d. feature %s (%f)\" % (f + 1, train.columns[indices[f]], importances[indices[f]]))\n","output":{"0":{"name":"stdout","output_type":"stream","text":"Feature ranking:\n1. feature bruises (0.204474)\n2. feature gill-spacing (0.164378)\n3. feature gill-size (0.087343)\n4. feature ring-number (0.063883)\n5. feature spore-print-color (0.059044)\n6. feature stalk-surface-above-ring (0.055894)\n7. feature ring-type (0.045950)\n8. feature stalk-shape (0.043536)\n9. feature cap-color (0.041669)\n10. feature population (0.040546)\n11. feature radius (0.033329)\n12. feature gill-color (0.029611)\n13. feature gill-attachment (0.029038)\n14. feature cap-surface (0.023817)\n15. feature stalk-color-above-ring (0.023483)\n16. feature weight (0.021484)\n17. feature stalk-surface-below-ring (0.015607)\n18. feature cap-shape (0.007900)\n19. feature class (0.003845)\n20. feature veil-type (0.002275)\n21. feature stalk-root (0.001838)\n22. feature odor (0.000613)\n23. feature veil-color (0.000441)\n24. feature stalk-color-below-ring (0.000000)\n"}},"pos":10,"type":"cell"}
{"cell_type":"code","exec_count":11,"id":"4170d9","input":"\"\"\"\nHi All,\n\nI'm seeing a common issue helping people with their projects and it's partly because of the order in which we covered the material.\n\nWe introduced hyperparameters long before validation and cross-validation.\n\n(One has to come first and neither makes much sense without the other.)\n\nWhen tuning hyperparameters be sure to use cross-validation or a validation set.\n\nYou should reserve the actual test set only for estimating out of sample error. \n\nYou only want to use the test set on your model with hyperparameters already tuned.\n\n\nCross-validation is a resampling procedure used to evaluate machine learning models on a limited data sample. \nThe procedure has a single parameter called k that refers to the number of groups that a given data sample is to be split into. \nAs such, the procedure is often called k-fold cross-validation\n\n1. feature odor (0.175426)\n2. feature gill-color (0.124879)\n3. feature stalk-surface-below-ring (0.120724)\n4. feature gill-size (0.113269)\n5. feature population (0.089279)\n6. feature stalk-root (0.065333)\n7. feature ring-type (0.056171)\n8. feature bruises (0.049522)\n\n\n\"\"\"\nfrom sklearn.model_selection import cross_val_score\n\npredictors=['odor','gill-color','stalk-surface-below-ring','gill-size','population','stalk-root','ring-type','bruises']\n\ndata_train=X_train[predictors]\ndata_test=X_test[predictors]\n\n\nmodels=[LogisticRegression(),DecisionTreeClassifier(random_state=0),RandomForestClassifier(n_estimators=10),SVC()]\nmodel_names=['LR','DT','RFC','SVM']\n\nfor model in models:\n    print(\"\\n\\n%s:\"%model_names[models.index(model)])\n    print(cross_val_score(model, data_train, y_train, scoring='accuracy', cv = 10))\n    accuracy = cross_val_score(model, data_train, y_train, scoring='accuracy', cv = 10).mean() * 100\n    print(\"Accuracy of %s is: %f\"%(model_names[models.index(model)],accuracy))\n","output":{"0":{"name":"stdout","output_type":"stream","text":"\n\nLR:\n"},"1":{"name":"stdout","output_type":"stream","text":"[0.88056206 0.90398126 0.90163934 0.86416862 0.90140845 0.93192488\n 0.88732394 0.87323944 0.90610329 0.88967136]\n"},"2":{"name":"stdout","output_type":"stream","text":"Accuracy of LR is: 89.400226\n\n\nDT:\n"},"3":{"name":"stdout","output_type":"stream","text":"[0.99297424 1.         0.99765808 0.99531616 0.99295775 0.99765258\n 0.99295775 0.99530516 0.99530516 1.        ]\nAccuracy of DT is: 99.601269\n\n\nRFC:\n"},"4":{"name":"stdout","output_type":"stream","text":"[0.99297424 1.         0.99765808 0.99531616 0.99295775 0.99765258\n 0.99295775 0.99530516 0.99530516 1.        ]\n"},"5":{"name":"stdout","output_type":"stream","text":"Accuracy of RFC is: 99.601269\n\n\nSVM:\n"},"6":{"name":"stdout","output_type":"stream","text":"[0.96487119 0.97892272 0.97892272 0.96955504 0.96244131 0.99295775\n 0.97652582 0.97652582 0.96948357 0.9741784 ]\n"},"7":{"name":"stdout","output_type":"stream","text":"Accuracy of SVM is: 97.443843\n"}},"pos":11,"type":"cell"}
{"cell_type":"code","exec_count":12,"id":"fe75cd","input":"#Step 4: Perform a train-test split on the data. You can use your own code or sklearn for this.\n\nfrom sklearn.model_selection import train_test_split\n\nX_train,X_test,y_train,y_test = train_test_split(X,y,random_state=0)\ny_train = np.asarray(y_train)\ny_test = np.asarray(y_test)\n\n#Step 5: Scale the data. You can use your own code or sklearn for this. \n#Be sure you scale correctly: First fit the training data to get the scaling parameters, and then apply the scaling to both the training and testing data.\n\nfrom sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\n\nscaler.fit(X_train)\nX_train = scaler.transform(X_train)\nX_test = scaler.transform(X_test)\n\n\nX_train = np.c_[np.ones(X_train.shape[0]),X_train]         #re-adding the bias column, because it disappeard after scaler\nX_test = np.c_[np.ones(X_test.shape[0]),X_test]            #re-adding the bias column, because it disappeard after scaler\n\n#Step 6:  Train a linear classifier such as logistic regression on the training data. This must be your own code.\n\ndef gradient_of_the_pointwise_error_function(x, w, yy):\n    return (-yy * x)/(1+np.exp(yy*w.T.dot(x)))\n          #(-yy * x)/(1+np.exp(yy*w.T.dot(x)))\n\ndef sgd(w,X,y,pw_gradient,eta=0.05,num_epochs=50):\n    \"\"\"parameters: w (initial weight vector)\n                   X (data matrix)\n                   y (target vector)\n                   pw_gradient (pointwise gradient function taking params x,w,yy)\"\"\"\n    history = [] ## Every time you compute a new w, do history.append(w).\n    for j in range(num_epochs):\n        shuff = np.random.permutation(X.shape[0])\n        Xs = X[shuff]\n        Ys = y[shuff]\n        for i in range(X.shape[0]):\n            xs = Xs[i]\n            ys = Ys[i]\n            w = w - eta*pw_gradient(xs,w,ys)\n            history.append(w)\n    return w,np.array(history)\n\nw = np.random.randn(X_train.shape[1])\nw, path = sgd(w, X_train, y_train, gradient_of_the_pointwise_error_function,eta=0.001,num_epochs=200 )\n\n#Step 7: Apply your model to the test data to get predictions y hat\nyhat = np.sign(X_test.dot(w))\n\n#Step 8: Evaluate the accuracy of your model. You can use simply the proportion of correct predictions.\ndef E_in(X,y,w):\n    mc = (np.sign(X.dot(w)) != y)\n    return np.sum(mc)/len(mc)\n\nprint(\"E_in = {}\".format(E_in(X_test, y_test, w)))","output":{"0":{"name":"stdout","output_type":"stream","text":"E_in = 0.5210970464135021\n"}},"pos":12,"type":"cell"}
{"cell_type":"code","exec_count":13,"id":"bec177","input":"#https://archive.ics.uci.edu/ml/datasets/Mushroom\n\n#mushroom_train has the class column where it holds the value p and e for poisonous and edible\n\nimport pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\n\ntrain=pd.read_csv('mushroom_train.csv')\ntest=pd.read_csv('mushroom_test.csv')\n\nprint (\"The size of train data is \",train.shape)\nprint (\"The size of test data is \",test.shape)","output":{"0":{"name":"stdout","output_type":"stream","text":"The size of train data is  (5686, 25)\nThe size of test data is  (2438, 24)\n"}},"pos":1,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"3d8003","input":"train.head()","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>class</th>\n      <th>cap-shape</th>\n      <th>cap-surface</th>\n      <th>cap-color</th>\n      <th>bruises</th>\n      <th>odor</th>\n      <th>gill-attachment</th>\n      <th>gill-spacing</th>\n      <th>gill-size</th>\n      <th>gill-color</th>\n      <th>...</th>\n      <th>stalk-color-above-ring</th>\n      <th>stalk-color-below-ring</th>\n      <th>veil-type</th>\n      <th>veil-color</th>\n      <th>weight</th>\n      <th>ring-number</th>\n      <th>ring-type</th>\n      <th>spore-print-color</th>\n      <th>population</th>\n      <th>habitat</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>p</td>\n      <td>f</td>\n      <td>s</td>\n      <td>e</td>\n      <td>f</td>\n      <td>s</td>\n      <td>f</td>\n      <td>c</td>\n      <td>n</td>\n      <td>b</td>\n      <td>...</td>\n      <td>p</td>\n      <td>w</td>\n      <td>p</td>\n      <td>w</td>\n      <td>38</td>\n      <td>o</td>\n      <td>e</td>\n      <td>w</td>\n      <td>v</td>\n      <td>l</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>p</td>\n      <td>x</td>\n      <td>y</td>\n      <td>w</td>\n      <td>t</td>\n      <td>p</td>\n      <td>f</td>\n      <td>c</td>\n      <td>n</td>\n      <td>k</td>\n      <td>...</td>\n      <td>w</td>\n      <td>w</td>\n      <td>p</td>\n      <td>w</td>\n      <td>43</td>\n      <td>o</td>\n      <td>p</td>\n      <td>n</td>\n      <td>v</td>\n      <td>u</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>e</td>\n      <td>f</td>\n      <td>s</td>\n      <td>n</td>\n      <td>t</td>\n      <td>n</td>\n      <td>f</td>\n      <td>c</td>\n      <td>b</td>\n      <td>e</td>\n      <td>...</td>\n      <td>e</td>\n      <td>e</td>\n      <td>p</td>\n      <td>w</td>\n      <td>37</td>\n      <td>t</td>\n      <td>e</td>\n      <td>w</td>\n      <td>c</td>\n      <td>w</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>p</td>\n      <td>x</td>\n      <td>s</td>\n      <td>e</td>\n      <td>f</td>\n      <td>y</td>\n      <td>f</td>\n      <td>c</td>\n      <td>n</td>\n      <td>b</td>\n      <td>...</td>\n      <td>p</td>\n      <td>w</td>\n      <td>p</td>\n      <td>w</td>\n      <td>82</td>\n      <td>o</td>\n      <td>e</td>\n      <td>w</td>\n      <td>v</td>\n      <td>l</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>e</td>\n      <td>x</td>\n      <td>s</td>\n      <td>w</td>\n      <td>t</td>\n      <td>l</td>\n      <td>f</td>\n      <td>c</td>\n      <td>b</td>\n      <td>n</td>\n      <td>...</td>\n      <td>w</td>\n      <td>w</td>\n      <td>p</td>\n      <td>w</td>\n      <td>36</td>\n      <td>o</td>\n      <td>p</td>\n      <td>n</td>\n      <td>s</td>\n      <td>m</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 25 columns</p>\n</div>","text/plain":"  class cap-shape cap-surface cap-color bruises odor gill-attachment  \\\n0     p         f           s         e       f    s               f   \n1     p         x           y         w       t    p               f   \n2     e         f           s         n       t    n               f   \n3     p         x           s         e       f    y               f   \n4     e         x           s         w       t    l               f   \n\n  gill-spacing gill-size gill-color  ... stalk-color-above-ring  \\\n0            c         n          b  ...                      p   \n1            c         n          k  ...                      w   \n2            c         b          e  ...                      e   \n3            c         n          b  ...                      p   \n4            c         b          n  ...                      w   \n\n  stalk-color-below-ring  veil-type veil-color weight ring-number ring-type  \\\n0                      w          p          w     38           o         e   \n1                      w          p          w     43           o         p   \n2                      e          p          w     37           t         e   \n3                      w          p          w     82           o         e   \n4                      w          p          w     36           o         p   \n\n  spore-print-color population  habitat  \n0                 w          v        l  \n1                 n          v        u  \n2                 w          c        w  \n3                 w          v        l  \n4                 n          s        m  \n\n[5 rows x 25 columns]"},"exec_count":2,"output_type":"execute_result"}},"pos":2,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"f8ea20","input":"test.head()","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>cap-shape</th>\n      <th>cap-surface</th>\n      <th>cap-color</th>\n      <th>bruises</th>\n      <th>odor</th>\n      <th>gill-attachment</th>\n      <th>gill-spacing</th>\n      <th>gill-size</th>\n      <th>gill-color</th>\n      <th>stalk-shape</th>\n      <th>...</th>\n      <th>stalk-color-above-ring</th>\n      <th>stalk-color-below-ring</th>\n      <th>veil-type</th>\n      <th>veil-color</th>\n      <th>weight</th>\n      <th>ring-number</th>\n      <th>ring-type</th>\n      <th>spore-print-color</th>\n      <th>population</th>\n      <th>habitat</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>x</td>\n      <td>f</td>\n      <td>g</td>\n      <td>t</td>\n      <td>n</td>\n      <td>f</td>\n      <td>c</td>\n      <td>b</td>\n      <td>u</td>\n      <td>t</td>\n      <td>...</td>\n      <td>p</td>\n      <td>g</td>\n      <td>p</td>\n      <td>w</td>\n      <td>23</td>\n      <td>o</td>\n      <td>p</td>\n      <td>k</td>\n      <td>y</td>\n      <td>d</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>x</td>\n      <td>y</td>\n      <td>g</td>\n      <td>f</td>\n      <td>f</td>\n      <td>f</td>\n      <td>c</td>\n      <td>b</td>\n      <td>g</td>\n      <td>e</td>\n      <td>...</td>\n      <td>b</td>\n      <td>b</td>\n      <td>p</td>\n      <td>w</td>\n      <td>23</td>\n      <td>o</td>\n      <td>l</td>\n      <td>h</td>\n      <td>v</td>\n      <td>d</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>b</td>\n      <td>s</td>\n      <td>w</td>\n      <td>t</td>\n      <td>a</td>\n      <td>f</td>\n      <td>c</td>\n      <td>b</td>\n      <td>w</td>\n      <td>e</td>\n      <td>...</td>\n      <td>w</td>\n      <td>w</td>\n      <td>p</td>\n      <td>w</td>\n      <td>24</td>\n      <td>o</td>\n      <td>p</td>\n      <td>k</td>\n      <td>s</td>\n      <td>m</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>f</td>\n      <td>y</td>\n      <td>y</td>\n      <td>f</td>\n      <td>f</td>\n      <td>f</td>\n      <td>c</td>\n      <td>b</td>\n      <td>p</td>\n      <td>e</td>\n      <td>...</td>\n      <td>n</td>\n      <td>b</td>\n      <td>p</td>\n      <td>w</td>\n      <td>53</td>\n      <td>o</td>\n      <td>l</td>\n      <td>h</td>\n      <td>y</td>\n      <td>d</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>b</td>\n      <td>y</td>\n      <td>y</td>\n      <td>t</td>\n      <td>a</td>\n      <td>f</td>\n      <td>c</td>\n      <td>b</td>\n      <td>w</td>\n      <td>e</td>\n      <td>...</td>\n      <td>w</td>\n      <td>w</td>\n      <td>p</td>\n      <td>w</td>\n      <td>24</td>\n      <td>o</td>\n      <td>p</td>\n      <td>k</td>\n      <td>n</td>\n      <td>m</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 24 columns</p>\n</div>","text/plain":"  cap-shape cap-surface cap-color bruises odor gill-attachment gill-spacing  \\\n0         x           f         g       t    n               f            c   \n1         x           y         g       f    f               f            c   \n2         b           s         w       t    a               f            c   \n3         f           y         y       f    f               f            c   \n4         b           y         y       t    a               f            c   \n\n  gill-size gill-color stalk-shape  ... stalk-color-above-ring  \\\n0         b          u           t  ...                      p   \n1         b          g           e  ...                      b   \n2         b          w           e  ...                      w   \n3         b          p           e  ...                      n   \n4         b          w           e  ...                      w   \n\n   stalk-color-below-ring veil-type veil-color weight ring-number ring-type  \\\n0                       g         p          w     23           o         p   \n1                       b         p          w     23           o         l   \n2                       w         p          w     24           o         p   \n3                       b         p          w     53           o         l   \n4                       w         p          w     24           o         p   \n\n  spore-print-color  population habitat  \n0                 k           y       d  \n1                 h           v       d  \n2                 k           s       m  \n3                 h           y       d  \n4                 k           n       m  \n\n[5 rows x 24 columns]"},"exec_count":3,"output_type":"execute_result"}},"pos":3,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"bf8e54","input":"#changing the train dataset to numerals by using labelencoder\n# y = all the variables of class column where it holds the value p and e for poisonous and edible but now it is (0 or 1)\n\n\nle=LabelEncoder()\nfor col in train.columns:\n    train[col] = le.fit_transform(train[col])\n\nX=train.iloc[:,1:]\ny=train.iloc[:,0]\n\nX_train, X_test, y_train, y_test = train_test_split(X,y, random_state=0)\ny_train = np.asarray(y_train)\ny_test = np.asarray(y_test)\n","pos":4,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"16c32d","input":"train.head()","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>class</th>\n      <th>cap-shape</th>\n      <th>cap-surface</th>\n      <th>cap-color</th>\n      <th>bruises</th>\n      <th>odor</th>\n      <th>gill-attachment</th>\n      <th>gill-spacing</th>\n      <th>gill-size</th>\n      <th>gill-color</th>\n      <th>...</th>\n      <th>stalk-color-above-ring</th>\n      <th>stalk-color-below-ring</th>\n      <th>veil-type</th>\n      <th>veil-color</th>\n      <th>weight</th>\n      <th>ring-number</th>\n      <th>ring-type</th>\n      <th>spore-print-color</th>\n      <th>population</th>\n      <th>habitat</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>2</td>\n      <td>2</td>\n      <td>2</td>\n      <td>0</td>\n      <td>7</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>...</td>\n      <td>6</td>\n      <td>7</td>\n      <td>0</td>\n      <td>2</td>\n      <td>26</td>\n      <td>1</td>\n      <td>0</td>\n      <td>7</td>\n      <td>4</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>5</td>\n      <td>3</td>\n      <td>8</td>\n      <td>1</td>\n      <td>6</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>4</td>\n      <td>...</td>\n      <td>7</td>\n      <td>7</td>\n      <td>0</td>\n      <td>2</td>\n      <td>31</td>\n      <td>1</td>\n      <td>4</td>\n      <td>3</td>\n      <td>4</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0</td>\n      <td>2</td>\n      <td>2</td>\n      <td>4</td>\n      <td>1</td>\n      <td>5</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>...</td>\n      <td>2</td>\n      <td>2</td>\n      <td>0</td>\n      <td>2</td>\n      <td>25</td>\n      <td>2</td>\n      <td>0</td>\n      <td>7</td>\n      <td>1</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>5</td>\n      <td>2</td>\n      <td>2</td>\n      <td>0</td>\n      <td>8</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>...</td>\n      <td>6</td>\n      <td>7</td>\n      <td>0</td>\n      <td>2</td>\n      <td>69</td>\n      <td>1</td>\n      <td>0</td>\n      <td>7</td>\n      <td>4</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>5</td>\n      <td>2</td>\n      <td>8</td>\n      <td>1</td>\n      <td>3</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>5</td>\n      <td>...</td>\n      <td>7</td>\n      <td>7</td>\n      <td>0</td>\n      <td>2</td>\n      <td>24</td>\n      <td>1</td>\n      <td>4</td>\n      <td>3</td>\n      <td>3</td>\n      <td>3</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 25 columns</p>\n</div>","text/plain":"   class  cap-shape  cap-surface  cap-color  bruises  odor  gill-attachment  \\\n0      1          2            2          2        0     7                1   \n1      1          5            3          8        1     6                1   \n2      0          2            2          4        1     5                1   \n3      1          5            2          2        0     8                1   \n4      0          5            2          8        1     3                1   \n\n   gill-spacing  gill-size  gill-color  ...  stalk-color-above-ring  \\\n0             0          1           0  ...                       6   \n1             0          1           4  ...                       7   \n2             0          0           1  ...                       2   \n3             0          1           0  ...                       6   \n4             0          0           5  ...                       7   \n\n   stalk-color-below-ring  veil-type  veil-color  weight  ring-number  \\\n0                       7          0           2      26            1   \n1                       7          0           2      31            1   \n2                       2          0           2      25            2   \n3                       7          0           2      69            1   \n4                       7          0           2      24            1   \n\n   ring-type  spore-print-color  population  habitat  \n0          0                  7           4        2  \n1          4                  3           4        5  \n2          0                  7           1        6  \n3          0                  7           4        2  \n4          4                  3           3        3  \n\n[5 rows x 25 columns]"},"exec_count":5,"output_type":"execute_result"}},"pos":5,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"a461bb","input":"#Logistic Regression\n\n#Fitting Logistic Regression Model\nmodel1=LogisticRegression()\nmodel1.fit(X_train,y_train)\n\n#Checking accuracy on train\nLR_acc_train=accuracy_score(model1.predict(X_train),y_train)\n\n#checking accuracy on test set\nLR_acc_test=accuracy_score(model1.predict(X_test),y_test)\n\n\nprint (\"Accuracy Score on Train Set for Logistic Regression: \",LR_acc_train*100)\nprint (\"Accuracy Score on Test Set for Logistic Regression: \",LR_acc_test*100)","output":{"0":{"name":"stdout","output_type":"stream","text":"Accuracy Score on Train Set for Logistic Regression:  92.80018761726079\nAccuracy Score on Test Set for Logistic Regression:  92.54571026722925\n"},"1":{"name":"stderr","output_type":"stream","text":"/ext/anaconda-2019.03/lib/python3.7/site-packages/sklearn/linear_model/_logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1):\nSTOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n\nIncrease the number of iterations (max_iter) or scale the data as shown in:\n    https://scikit-learn.org/stable/modules/preprocessing.html\nPlease also refer to the documentation for alternative solver options:\n    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n"}},"pos":6,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"cab90a","input":"#Decision Tree\n\n#Fitting Decision Tree Model\nmodel2=DecisionTreeClassifier(random_state=0)\nmodel2.fit(X_train,y_train)\n\n#Checking accuracy on train\nDT_acc_train=accuracy_score(model2.predict(X_train),y_train)\n\n#checking accuracy on test set\nDT_acc_test=accuracy_score(model2.predict(X_test),y_test)\n\nprint (\"Accuracy Score on Train Set for Decision Tree: \",DT_acc_train*100)\nprint (\"Accuracy Score on Test Set for Decision Tree: \",DT_acc_test*100)","output":{"0":{"name":"stdout","output_type":"stream","text":"Accuracy Score on Train Set for Decision Tree:  100.0\nAccuracy Score on Test Set for Decision Tree:  100.0\n"}},"pos":7,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"a43581","input":"#Random Forest Classifier\n\n#Fitting Random Forest Classifier Model\nmodel3=RandomForestClassifier(n_estimators=10)\nmodel3.fit(X_train,y_train)\n#Checking accuracy on train\nRFC_acc_train=accuracy_score(model3.predict(X_train),y_train)\n#checking accuracy on test set\nRFC_acc_test=accuracy_score(model3.predict(X_test),y_test)\n\nprint(\"Accuracy Score on Train Set for Random Forest: \",RFC_acc_train*100)\nprint(\"Accuracy Score on Test Set for Random Forest: \",RFC_acc_test*100)","output":{"0":{"name":"stdout","output_type":"stream","text":"Accuracy Score on Train Set for Random Forest:  100.0\nAccuracy Score on Test Set for Random Forest:  100.0\n"}},"pos":8,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"f53920","input":"#Support Vector Machine\n\n#Fitting Support Vector Machine Model\nmodel4=SVC()\nmodel4.fit(X_train,y_train)\n\n#Checking accuracy on train\nSVM_acc_train=accuracy_score(model4.predict(X_train),y_train)\n\n#checking accuracy on test set\nSVM_acc_test=accuracy_score(model4.predict(X_test),y_test)\n\nprint (\"Accuracy Score on Train Set for SVM: \",SVM_acc_train*100)\nprint (\"Accuracy Score on Test Set for SVM: \",SVM_acc_test*100)","output":{"0":{"name":"stdout","output_type":"stream","text":"Accuracy Score on Train Set for SVM:  77.4624765478424\nAccuracy Score on Test Set for SVM:  80.37974683544303\n"}},"pos":9,"type":"cell"}
{"cell_type":"markdown","id":"3246e7","input":" Attribute Information:\n https://archive.ics.uci.edu/ml/datasets/Mushroom\n\n0. class: e=editable, p=poisonous\n1. cap-shape: bell=b,conical=c,convex=x,flat=f, knobbed=k,sunken=s\n2. cap-surface: fibrous=f,grooves=g,scaly=y,smooth=s\n3. cap-color: brown=n,buff=b,cinnamon=c,gray=g,green=r, pink=p,purple=u,red=e,white=w,yellow=y\n4. bruises?: bruises=t,no=f\n5. odor: almond=a,anise=l,creosote=c,fishy=y,foul=f, musty=m,none=n,pungent=p,spicy=s\n6. gill-attachment: attached=a,descending=d,free=f,notched=n\n7. gill-spacing: close=c,crowded=w,distant=d\n8. gill-size: broad=b,narrow=n\n9. gill-color: black=k,brown=n,buff=b,chocolate=h,gray=g, green=r,orange=o,pink=p,purple=u,red=e, white=w,yellow=y\n10. stalk-shape: enlarging=e,tapering=t\n11. stalk-root: bulbous=b,club=c,cup=u,equal=e, rhizomorphs=z,rooted=r,missing=?\n12. stalk-surface-above-ring: fibrous=f,scaly=y,silky=k,smooth=s\n13. stalk-surface-below-ring: fibrous=f,scaly=y,silky=k,smooth=s\n14. stalk-color-above-ring: brown=n,buff=b,cinnamon=c,gray=g,orange=o, pink=p,red=e,white=w,yellow=y\n15. stalk-color-below-ring: brown=n,buff=b,cinnamon=c,gray=g,orange=o, pink=p,red=e,white=w,yellow=y\n16. veil-type: partial=p,universal=u\n17. veil-color: brown=n,orange=o,white=w,yellow=y\n18. ring-number: none=n,one=o,two=t\n19. ring-type: cobwebby=c,evanescent=e,flaring=f,large=l, none=n,pendant=p,sheathing=s,zone=z\n20. spore-print-color: black=k,brown=n,buff=b,chocolate=h,green=r, orange=o,purple=u,white=w,yellow=y\n21. population: abundant=a,clustered=c,numerous=n, scattered=s,several=v,solitary=y\n22. habitat: grasses=g,leaves=l,meadows=m,paths=p, urban=u,waste=w,woods=d\n\n","pos":0,"type":"cell"}
{"id":0,"time":1590353992011,"type":"user"}
{"last_load":1590353980083,"type":"file"}